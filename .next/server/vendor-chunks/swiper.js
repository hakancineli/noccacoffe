"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/swiper";
exports.ids = ["vendor-chunks/swiper"];
exports.modules = {

/***/ "(ssr)/./node_modules/swiper/modules/autoplay.css":
/*!**************************************************!*\
  !*** ./node_modules/swiper/modules/autoplay.css ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"da39a3ee5e6b\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvYXV0b3BsYXkuY3NzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxjQUFjO0FBQzdCLElBQUksS0FBVSxFQUFFLEVBQXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhcmJ1Y2tzLXR1cmtleS1jbG9uZS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9hdXRvcGxheS5jc3M/N2Q4MyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcImRhMzlhM2VlNWU2YlwiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/autoplay.css\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/navigation.css":
/*!****************************************************!*\
  !*** ./node_modules/swiper/modules/navigation.css ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"aacf35a14809\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvbmF2aWdhdGlvbi5jc3MiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWM7QUFDN0IsSUFBSSxLQUFVLEVBQUUsRUFBdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFyYnVja3MtdHVya2V5LWNsb25lLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL25hdmlnYXRpb24uY3NzPzdlMGQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCJhYWNmMzVhMTQ4MDlcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/navigation.css\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/swiper.css":
/*!****************************************!*\
  !*** ./node_modules/swiper/swiper.css ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"6fd53cd2807a\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3N3aXBlci5jc3MiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWM7QUFDN0IsSUFBSSxLQUFVLEVBQUUsRUFBdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFyYnVja3MtdHVya2V5LWNsb25lLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zd2lwZXIuY3NzPzJmZTMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCI2ZmQ1M2NkMjgwN2FcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/swiper.css\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/a11y.mjs":
/*!**********************************************!*\
  !*** ./node_modules/swiper/modules/a11y.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ A11y)\n/* harmony export */ });\n/* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/ssr-window.esm.mjs */ \"(ssr)/./node_modules/swiper/shared/ssr-window.esm.mjs\");\n/* harmony import */ var _shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/classes-to-selector.mjs */ \"(ssr)/./node_modules/swiper/shared/classes-to-selector.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\n\n\nfunction A11y({ swiper, extendParams, on }) {\n    extendParams({\n        a11y: {\n            enabled: true,\n            notificationClass: \"swiper-notification\",\n            prevSlideMessage: \"Previous slide\",\n            nextSlideMessage: \"Next slide\",\n            firstSlideMessage: \"This is the first slide\",\n            lastSlideMessage: \"This is the last slide\",\n            paginationBulletMessage: \"Go to slide {{index}}\",\n            slideLabelMessage: \"{{index}} / {{slidesLength}}\",\n            containerMessage: null,\n            containerRoleDescriptionMessage: null,\n            containerRole: null,\n            itemRoleDescriptionMessage: null,\n            slideRole: \"group\",\n            id: null,\n            scrollOnFocus: true,\n            wrapperLiveRegion: true\n        }\n    });\n    swiper.a11y = {\n        clicked: false\n    };\n    let liveRegion = null;\n    let preventFocusHandler;\n    let focusTargetSlideEl;\n    let visibilityChangedTimestamp = new Date().getTime();\n    function notify(message) {\n        const notification = liveRegion;\n        if (notification.length === 0) return;\n        (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.s)(notification, message);\n    }\n    function getRandomNumber(size = 16) {\n        const randomChar = ()=>Math.round(16 * Math.random()).toString(16);\n        return \"x\".repeat(size).replace(/x/g, randomChar);\n    }\n    function makeElFocusable(el) {\n        el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\n        el.forEach((subEl)=>{\n            subEl.setAttribute(\"tabIndex\", \"0\");\n        });\n    }\n    function makeElNotFocusable(el) {\n        el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\n        el.forEach((subEl)=>{\n            subEl.setAttribute(\"tabIndex\", \"-1\");\n        });\n    }\n    function addElRole(el, role) {\n        el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\n        el.forEach((subEl)=>{\n            subEl.setAttribute(\"role\", role);\n        });\n    }\n    function addElRoleDescription(el, description) {\n        el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\n        el.forEach((subEl)=>{\n            subEl.setAttribute(\"aria-roledescription\", description);\n        });\n    }\n    function addElControls(el, controls) {\n        el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\n        el.forEach((subEl)=>{\n            subEl.setAttribute(\"aria-controls\", controls);\n        });\n    }\n    function addElLabel(el, label) {\n        el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\n        el.forEach((subEl)=>{\n            subEl.setAttribute(\"aria-label\", label);\n        });\n    }\n    function addElId(el, id) {\n        el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\n        el.forEach((subEl)=>{\n            subEl.setAttribute(\"id\", id);\n        });\n    }\n    function addElLive(el, live) {\n        el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\n        el.forEach((subEl)=>{\n            subEl.setAttribute(\"aria-live\", live);\n        });\n    }\n    function disableEl(el) {\n        el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\n        el.forEach((subEl)=>{\n            subEl.setAttribute(\"aria-disabled\", true);\n        });\n    }\n    function enableEl(el) {\n        el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\n        el.forEach((subEl)=>{\n            subEl.setAttribute(\"aria-disabled\", false);\n        });\n    }\n    function onEnterOrSpaceKey(e) {\n        if (e.keyCode !== 13 && e.keyCode !== 32) return;\n        const params = swiper.params.a11y;\n        const targetEl = e.target;\n        if (swiper.pagination && swiper.pagination.el && (targetEl === swiper.pagination.el || swiper.pagination.el.contains(e.target))) {\n            if (!e.target.matches((0,_shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(swiper.params.pagination.bulletClass))) return;\n        }\n        if (swiper.navigation && swiper.navigation.prevEl && swiper.navigation.nextEl) {\n            const prevEls = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(swiper.navigation.prevEl);\n            const nextEls = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(swiper.navigation.nextEl);\n            if (nextEls.includes(targetEl)) {\n                if (!(swiper.isEnd && !swiper.params.loop)) {\n                    swiper.slideNext();\n                }\n                if (swiper.isEnd) {\n                    notify(params.lastSlideMessage);\n                } else {\n                    notify(params.nextSlideMessage);\n                }\n            }\n            if (prevEls.includes(targetEl)) {\n                if (!(swiper.isBeginning && !swiper.params.loop)) {\n                    swiper.slidePrev();\n                }\n                if (swiper.isBeginning) {\n                    notify(params.firstSlideMessage);\n                } else {\n                    notify(params.prevSlideMessage);\n                }\n            }\n        }\n        if (swiper.pagination && targetEl.matches((0,_shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(swiper.params.pagination.bulletClass))) {\n            targetEl.click();\n        }\n    }\n    function updateNavigation() {\n        if (swiper.params.loop || swiper.params.rewind || !swiper.navigation) return;\n        const { nextEl, prevEl } = swiper.navigation;\n        if (prevEl) {\n            if (swiper.isBeginning) {\n                disableEl(prevEl);\n                makeElNotFocusable(prevEl);\n            } else {\n                enableEl(prevEl);\n                makeElFocusable(prevEl);\n            }\n        }\n        if (nextEl) {\n            if (swiper.isEnd) {\n                disableEl(nextEl);\n                makeElNotFocusable(nextEl);\n            } else {\n                enableEl(nextEl);\n                makeElFocusable(nextEl);\n            }\n        }\n    }\n    function hasPagination() {\n        return swiper.pagination && swiper.pagination.bullets && swiper.pagination.bullets.length;\n    }\n    function hasClickablePagination() {\n        return hasPagination() && swiper.params.pagination.clickable;\n    }\n    function updatePagination() {\n        const params = swiper.params.a11y;\n        if (!hasPagination()) return;\n        swiper.pagination.bullets.forEach((bulletEl)=>{\n            if (swiper.params.pagination.clickable) {\n                makeElFocusable(bulletEl);\n                if (!swiper.params.pagination.renderBullet) {\n                    addElRole(bulletEl, \"button\");\n                    addElLabel(bulletEl, params.paginationBulletMessage.replace(/\\{\\{index\\}\\}/, (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.j)(bulletEl) + 1));\n                }\n            }\n            if (bulletEl.matches((0,_shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(swiper.params.pagination.bulletActiveClass))) {\n                bulletEl.setAttribute(\"aria-current\", \"true\");\n            } else {\n                bulletEl.removeAttribute(\"aria-current\");\n            }\n        });\n    }\n    const initNavEl = (el, wrapperId, message)=>{\n        makeElFocusable(el);\n        if (el.tagName !== \"BUTTON\") {\n            addElRole(el, \"button\");\n            el.addEventListener(\"keydown\", onEnterOrSpaceKey);\n        }\n        addElLabel(el, message);\n        addElControls(el, wrapperId);\n    };\n    const handlePointerDown = (e)=>{\n        if (focusTargetSlideEl && focusTargetSlideEl !== e.target && !focusTargetSlideEl.contains(e.target)) {\n            preventFocusHandler = true;\n        }\n        swiper.a11y.clicked = true;\n    };\n    const handlePointerUp = ()=>{\n        preventFocusHandler = false;\n        requestAnimationFrame(()=>{\n            requestAnimationFrame(()=>{\n                if (!swiper.destroyed) {\n                    swiper.a11y.clicked = false;\n                }\n            });\n        });\n    };\n    const onVisibilityChange = (e)=>{\n        visibilityChangedTimestamp = new Date().getTime();\n    };\n    const handleFocus = (e)=>{\n        if (swiper.a11y.clicked || !swiper.params.a11y.scrollOnFocus) return;\n        if (new Date().getTime() - visibilityChangedTimestamp < 100) return;\n        const slideEl = e.target.closest(`.${swiper.params.slideClass}, swiper-slide`);\n        if (!slideEl || !swiper.slides.includes(slideEl)) return;\n        focusTargetSlideEl = slideEl;\n        const isActive = swiper.slides.indexOf(slideEl) === swiper.activeIndex;\n        const isVisible = swiper.params.watchSlidesProgress && swiper.visibleSlides && swiper.visibleSlides.includes(slideEl);\n        if (isActive || isVisible) return;\n        if (e.sourceCapabilities && e.sourceCapabilities.firesTouchEvents) return;\n        if (swiper.isHorizontal()) {\n            swiper.el.scrollLeft = 0;\n        } else {\n            swiper.el.scrollTop = 0;\n        }\n        requestAnimationFrame(()=>{\n            if (preventFocusHandler) return;\n            if (swiper.params.loop) {\n                swiper.slideToLoop(swiper.getSlideIndexWhenGrid(parseInt(slideEl.getAttribute(\"data-swiper-slide-index\"))), 0);\n            } else {\n                swiper.slideTo(swiper.getSlideIndexWhenGrid(swiper.slides.indexOf(slideEl)), 0);\n            }\n            preventFocusHandler = false;\n        });\n    };\n    const initSlides = ()=>{\n        const params = swiper.params.a11y;\n        if (params.itemRoleDescriptionMessage) {\n            addElRoleDescription(swiper.slides, params.itemRoleDescriptionMessage);\n        }\n        if (params.slideRole) {\n            addElRole(swiper.slides, params.slideRole);\n        }\n        const slidesLength = swiper.slides.length;\n        if (params.slideLabelMessage) {\n            swiper.slides.forEach((slideEl, index)=>{\n                const slideIndex = swiper.params.loop ? parseInt(slideEl.getAttribute(\"data-swiper-slide-index\"), 10) : index;\n                const ariaLabelMessage = params.slideLabelMessage.replace(/\\{\\{index\\}\\}/, slideIndex + 1).replace(/\\{\\{slidesLength\\}\\}/, slidesLength);\n                addElLabel(slideEl, ariaLabelMessage);\n            });\n        }\n    };\n    const init = ()=>{\n        const params = swiper.params.a11y;\n        swiper.el.append(liveRegion);\n        // Container\n        const containerEl = swiper.el;\n        if (params.containerRoleDescriptionMessage) {\n            addElRoleDescription(containerEl, params.containerRoleDescriptionMessage);\n        }\n        if (params.containerMessage) {\n            addElLabel(containerEl, params.containerMessage);\n        }\n        if (params.containerRole) {\n            addElRole(containerEl, params.containerRole);\n        }\n        // Wrapper\n        const wrapperEl = swiper.wrapperEl;\n        const wrapperId = params.id || wrapperEl.getAttribute(\"id\") || `swiper-wrapper-${getRandomNumber(16)}`;\n        addElId(wrapperEl, wrapperId);\n        if (params.wrapperLiveRegion) {\n            const live = swiper.params.autoplay && swiper.params.autoplay.enabled ? \"off\" : \"polite\";\n            addElLive(wrapperEl, live);\n        }\n        // Slide\n        initSlides();\n        // Navigation\n        let { nextEl, prevEl } = swiper.navigation ? swiper.navigation : {};\n        nextEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(nextEl);\n        prevEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(prevEl);\n        if (nextEl) {\n            nextEl.forEach((el)=>initNavEl(el, wrapperId, params.nextSlideMessage));\n        }\n        if (prevEl) {\n            prevEl.forEach((el)=>initNavEl(el, wrapperId, params.prevSlideMessage));\n        }\n        // Pagination\n        if (hasClickablePagination()) {\n            const paginationEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(swiper.pagination.el);\n            paginationEl.forEach((el)=>{\n                el.addEventListener(\"keydown\", onEnterOrSpaceKey);\n            });\n        }\n        // Tab focus\n        const document = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n        document.addEventListener(\"visibilitychange\", onVisibilityChange);\n        swiper.el.addEventListener(\"focus\", handleFocus, true);\n        swiper.el.addEventListener(\"focus\", handleFocus, true);\n        swiper.el.addEventListener(\"pointerdown\", handlePointerDown, true);\n        swiper.el.addEventListener(\"pointerup\", handlePointerUp, true);\n    };\n    function destroy() {\n        if (liveRegion) liveRegion.remove();\n        let { nextEl, prevEl } = swiper.navigation ? swiper.navigation : {};\n        nextEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(nextEl);\n        prevEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(prevEl);\n        if (nextEl) {\n            nextEl.forEach((el)=>el.removeEventListener(\"keydown\", onEnterOrSpaceKey));\n        }\n        if (prevEl) {\n            prevEl.forEach((el)=>el.removeEventListener(\"keydown\", onEnterOrSpaceKey));\n        }\n        // Pagination\n        if (hasClickablePagination()) {\n            const paginationEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(swiper.pagination.el);\n            paginationEl.forEach((el)=>{\n                el.removeEventListener(\"keydown\", onEnterOrSpaceKey);\n            });\n        }\n        const document = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n        document.removeEventListener(\"visibilitychange\", onVisibilityChange);\n        // Tab focus\n        if (swiper.el && typeof swiper.el !== \"string\") {\n            swiper.el.removeEventListener(\"focus\", handleFocus, true);\n            swiper.el.removeEventListener(\"pointerdown\", handlePointerDown, true);\n            swiper.el.removeEventListener(\"pointerup\", handlePointerUp, true);\n        }\n    }\n    on(\"beforeInit\", ()=>{\n        liveRegion = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.c)(\"span\", swiper.params.a11y.notificationClass);\n        liveRegion.setAttribute(\"aria-live\", \"assertive\");\n        liveRegion.setAttribute(\"aria-atomic\", \"true\");\n    });\n    on(\"afterInit\", ()=>{\n        if (!swiper.params.a11y.enabled) return;\n        init();\n    });\n    on(\"slidesLengthChange snapGridLengthChange slidesGridLengthChange\", ()=>{\n        if (!swiper.params.a11y.enabled) return;\n        initSlides();\n    });\n    on(\"fromEdge toEdge afterInit lock unlock\", ()=>{\n        if (!swiper.params.a11y.enabled) return;\n        updateNavigation();\n    });\n    on(\"paginationUpdate\", ()=>{\n        if (!swiper.params.a11y.enabled) return;\n        updatePagination();\n    });\n    on(\"destroy\", ()=>{\n        if (!swiper.params.a11y.enabled) return;\n        destroy();\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvYTExeS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFnRTtBQUNXO0FBQzRDO0FBRXZILFNBQVNXLEtBQUssRUFDWkMsTUFBTSxFQUNOQyxZQUFZLEVBQ1pDLEVBQUUsRUFDSDtJQUNDRCxhQUFhO1FBQ1hFLE1BQU07WUFDSkMsU0FBUztZQUNUQyxtQkFBbUI7WUFDbkJDLGtCQUFrQjtZQUNsQkMsa0JBQWtCO1lBQ2xCQyxtQkFBbUI7WUFDbkJDLGtCQUFrQjtZQUNsQkMseUJBQXlCO1lBQ3pCQyxtQkFBbUI7WUFDbkJDLGtCQUFrQjtZQUNsQkMsaUNBQWlDO1lBQ2pDQyxlQUFlO1lBQ2ZDLDRCQUE0QjtZQUM1QkMsV0FBVztZQUNYQyxJQUFJO1lBQ0pDLGVBQWU7WUFDZkMsbUJBQW1CO1FBQ3JCO0lBQ0Y7SUFDQW5CLE9BQU9HLElBQUksR0FBRztRQUNaaUIsU0FBUztJQUNYO0lBQ0EsSUFBSUMsYUFBYTtJQUNqQixJQUFJQztJQUNKLElBQUlDO0lBQ0osSUFBSUMsNkJBQTZCLElBQUlDLE9BQU9DLE9BQU87SUFDbkQsU0FBU0MsT0FBT0MsT0FBTztRQUNyQixNQUFNQyxlQUFlUjtRQUNyQixJQUFJUSxhQUFhQyxNQUFNLEtBQUssR0FBRztRQUMvQmhDLG9EQUFZQSxDQUFDK0IsY0FBY0Q7SUFDN0I7SUFDQSxTQUFTRyxnQkFBZ0JDLE9BQU8sRUFBRTtRQUNoQyxNQUFNQyxhQUFhLElBQU1DLEtBQUtDLEtBQUssQ0FBQyxLQUFLRCxLQUFLRSxNQUFNLElBQUlDLFFBQVEsQ0FBQztRQUNqRSxPQUFPLElBQUlDLE1BQU0sQ0FBQ04sTUFBTU8sT0FBTyxDQUFDLE1BQU1OO0lBQ3hDO0lBQ0EsU0FBU08sZ0JBQWdCQyxFQUFFO1FBQ3pCQSxLQUFLN0Msb0RBQWlCQSxDQUFDNkM7UUFDdkJBLEdBQUdDLE9BQU8sQ0FBQ0MsQ0FBQUE7WUFDVEEsTUFBTUMsWUFBWSxDQUFDLFlBQVk7UUFDakM7SUFDRjtJQUNBLFNBQVNDLG1CQUFtQkosRUFBRTtRQUM1QkEsS0FBSzdDLG9EQUFpQkEsQ0FBQzZDO1FBQ3ZCQSxHQUFHQyxPQUFPLENBQUNDLENBQUFBO1lBQ1RBLE1BQU1DLFlBQVksQ0FBQyxZQUFZO1FBQ2pDO0lBQ0Y7SUFDQSxTQUFTRSxVQUFVTCxFQUFFLEVBQUVNLElBQUk7UUFDekJOLEtBQUs3QyxvREFBaUJBLENBQUM2QztRQUN2QkEsR0FBR0MsT0FBTyxDQUFDQyxDQUFBQTtZQUNUQSxNQUFNQyxZQUFZLENBQUMsUUFBUUc7UUFDN0I7SUFDRjtJQUNBLFNBQVNDLHFCQUFxQlAsRUFBRSxFQUFFUSxXQUFXO1FBQzNDUixLQUFLN0Msb0RBQWlCQSxDQUFDNkM7UUFDdkJBLEdBQUdDLE9BQU8sQ0FBQ0MsQ0FBQUE7WUFDVEEsTUFBTUMsWUFBWSxDQUFDLHdCQUF3Qks7UUFDN0M7SUFDRjtJQUNBLFNBQVNDLGNBQWNULEVBQUUsRUFBRVUsUUFBUTtRQUNqQ1YsS0FBSzdDLG9EQUFpQkEsQ0FBQzZDO1FBQ3ZCQSxHQUFHQyxPQUFPLENBQUNDLENBQUFBO1lBQ1RBLE1BQU1DLFlBQVksQ0FBQyxpQkFBaUJPO1FBQ3RDO0lBQ0Y7SUFDQSxTQUFTQyxXQUFXWCxFQUFFLEVBQUVZLEtBQUs7UUFDM0JaLEtBQUs3QyxvREFBaUJBLENBQUM2QztRQUN2QkEsR0FBR0MsT0FBTyxDQUFDQyxDQUFBQTtZQUNUQSxNQUFNQyxZQUFZLENBQUMsY0FBY1M7UUFDbkM7SUFDRjtJQUNBLFNBQVNDLFFBQVFiLEVBQUUsRUFBRXhCLEVBQUU7UUFDckJ3QixLQUFLN0Msb0RBQWlCQSxDQUFDNkM7UUFDdkJBLEdBQUdDLE9BQU8sQ0FBQ0MsQ0FBQUE7WUFDVEEsTUFBTUMsWUFBWSxDQUFDLE1BQU0zQjtRQUMzQjtJQUNGO0lBQ0EsU0FBU3NDLFVBQVVkLEVBQUUsRUFBRWUsSUFBSTtRQUN6QmYsS0FBSzdDLG9EQUFpQkEsQ0FBQzZDO1FBQ3ZCQSxHQUFHQyxPQUFPLENBQUNDLENBQUFBO1lBQ1RBLE1BQU1DLFlBQVksQ0FBQyxhQUFhWTtRQUNsQztJQUNGO0lBQ0EsU0FBU0MsVUFBVWhCLEVBQUU7UUFDbkJBLEtBQUs3QyxvREFBaUJBLENBQUM2QztRQUN2QkEsR0FBR0MsT0FBTyxDQUFDQyxDQUFBQTtZQUNUQSxNQUFNQyxZQUFZLENBQUMsaUJBQWlCO1FBQ3RDO0lBQ0Y7SUFDQSxTQUFTYyxTQUFTakIsRUFBRTtRQUNsQkEsS0FBSzdDLG9EQUFpQkEsQ0FBQzZDO1FBQ3ZCQSxHQUFHQyxPQUFPLENBQUNDLENBQUFBO1lBQ1RBLE1BQU1DLFlBQVksQ0FBQyxpQkFBaUI7UUFDdEM7SUFDRjtJQUNBLFNBQVNlLGtCQUFrQkMsQ0FBQztRQUMxQixJQUFJQSxFQUFFQyxPQUFPLEtBQUssTUFBTUQsRUFBRUMsT0FBTyxLQUFLLElBQUk7UUFDMUMsTUFBTUMsU0FBUzlELE9BQU84RCxNQUFNLENBQUMzRCxJQUFJO1FBQ2pDLE1BQU00RCxXQUFXSCxFQUFFSSxNQUFNO1FBQ3pCLElBQUloRSxPQUFPaUUsVUFBVSxJQUFJakUsT0FBT2lFLFVBQVUsQ0FBQ3hCLEVBQUUsSUFBS3NCLENBQUFBLGFBQWEvRCxPQUFPaUUsVUFBVSxDQUFDeEIsRUFBRSxJQUFJekMsT0FBT2lFLFVBQVUsQ0FBQ3hCLEVBQUUsQ0FBQ3lCLFFBQVEsQ0FBQ04sRUFBRUksTUFBTSxJQUFJO1lBQy9ILElBQUksQ0FBQ0osRUFBRUksTUFBTSxDQUFDRyxPQUFPLENBQUM1RSxrRUFBaUJBLENBQUNTLE9BQU84RCxNQUFNLENBQUNHLFVBQVUsQ0FBQ0csV0FBVyxJQUFJO1FBQ2xGO1FBQ0EsSUFBSXBFLE9BQU9xRSxVQUFVLElBQUlyRSxPQUFPcUUsVUFBVSxDQUFDQyxNQUFNLElBQUl0RSxPQUFPcUUsVUFBVSxDQUFDRSxNQUFNLEVBQUU7WUFDN0UsTUFBTUMsVUFBVTVFLG9EQUFpQkEsQ0FBQ0ksT0FBT3FFLFVBQVUsQ0FBQ0MsTUFBTTtZQUMxRCxNQUFNRyxVQUFVN0Usb0RBQWlCQSxDQUFDSSxPQUFPcUUsVUFBVSxDQUFDRSxNQUFNO1lBQzFELElBQUlFLFFBQVFDLFFBQVEsQ0FBQ1gsV0FBVztnQkFDOUIsSUFBSSxDQUFFL0QsQ0FBQUEsT0FBTzJFLEtBQUssSUFBSSxDQUFDM0UsT0FBTzhELE1BQU0sQ0FBQ2MsSUFBSSxHQUFHO29CQUMxQzVFLE9BQU82RSxTQUFTO2dCQUNsQjtnQkFDQSxJQUFJN0UsT0FBTzJFLEtBQUssRUFBRTtvQkFDaEJoRCxPQUFPbUMsT0FBT3JELGdCQUFnQjtnQkFDaEMsT0FBTztvQkFDTGtCLE9BQU9tQyxPQUFPdkQsZ0JBQWdCO2dCQUNoQztZQUNGO1lBQ0EsSUFBSWlFLFFBQVFFLFFBQVEsQ0FBQ1gsV0FBVztnQkFDOUIsSUFBSSxDQUFFL0QsQ0FBQUEsT0FBTzhFLFdBQVcsSUFBSSxDQUFDOUUsT0FBTzhELE1BQU0sQ0FBQ2MsSUFBSSxHQUFHO29CQUNoRDVFLE9BQU8rRSxTQUFTO2dCQUNsQjtnQkFDQSxJQUFJL0UsT0FBTzhFLFdBQVcsRUFBRTtvQkFDdEJuRCxPQUFPbUMsT0FBT3RELGlCQUFpQjtnQkFDakMsT0FBTztvQkFDTG1CLE9BQU9tQyxPQUFPeEQsZ0JBQWdCO2dCQUNoQztZQUNGO1FBQ0Y7UUFDQSxJQUFJTixPQUFPaUUsVUFBVSxJQUFJRixTQUFTSSxPQUFPLENBQUM1RSxrRUFBaUJBLENBQUNTLE9BQU84RCxNQUFNLENBQUNHLFVBQVUsQ0FBQ0csV0FBVyxJQUFJO1lBQ2xHTCxTQUFTaUIsS0FBSztRQUNoQjtJQUNGO0lBQ0EsU0FBU0M7UUFDUCxJQUFJakYsT0FBTzhELE1BQU0sQ0FBQ2MsSUFBSSxJQUFJNUUsT0FBTzhELE1BQU0sQ0FBQ29CLE1BQU0sSUFBSSxDQUFDbEYsT0FBT3FFLFVBQVUsRUFBRTtRQUN0RSxNQUFNLEVBQ0pFLE1BQU0sRUFDTkQsTUFBTSxFQUNQLEdBQUd0RSxPQUFPcUUsVUFBVTtRQUNyQixJQUFJQyxRQUFRO1lBQ1YsSUFBSXRFLE9BQU84RSxXQUFXLEVBQUU7Z0JBQ3RCckIsVUFBVWE7Z0JBQ1Z6QixtQkFBbUJ5QjtZQUNyQixPQUFPO2dCQUNMWixTQUFTWTtnQkFDVDlCLGdCQUFnQjhCO1lBQ2xCO1FBQ0Y7UUFDQSxJQUFJQyxRQUFRO1lBQ1YsSUFBSXZFLE9BQU8yRSxLQUFLLEVBQUU7Z0JBQ2hCbEIsVUFBVWM7Z0JBQ1YxQixtQkFBbUIwQjtZQUNyQixPQUFPO2dCQUNMYixTQUFTYTtnQkFDVC9CLGdCQUFnQitCO1lBQ2xCO1FBQ0Y7SUFDRjtJQUNBLFNBQVNZO1FBQ1AsT0FBT25GLE9BQU9pRSxVQUFVLElBQUlqRSxPQUFPaUUsVUFBVSxDQUFDbUIsT0FBTyxJQUFJcEYsT0FBT2lFLFVBQVUsQ0FBQ21CLE9BQU8sQ0FBQ3RELE1BQU07SUFDM0Y7SUFDQSxTQUFTdUQ7UUFDUCxPQUFPRixtQkFBbUJuRixPQUFPOEQsTUFBTSxDQUFDRyxVQUFVLENBQUNxQixTQUFTO0lBQzlEO0lBQ0EsU0FBU0M7UUFDUCxNQUFNekIsU0FBUzlELE9BQU84RCxNQUFNLENBQUMzRCxJQUFJO1FBQ2pDLElBQUksQ0FBQ2dGLGlCQUFpQjtRQUN0Qm5GLE9BQU9pRSxVQUFVLENBQUNtQixPQUFPLENBQUMxQyxPQUFPLENBQUM4QyxDQUFBQTtZQUNoQyxJQUFJeEYsT0FBTzhELE1BQU0sQ0FBQ0csVUFBVSxDQUFDcUIsU0FBUyxFQUFFO2dCQUN0QzlDLGdCQUFnQmdEO2dCQUNoQixJQUFJLENBQUN4RixPQUFPOEQsTUFBTSxDQUFDRyxVQUFVLENBQUN3QixZQUFZLEVBQUU7b0JBQzFDM0MsVUFBVTBDLFVBQVU7b0JBQ3BCcEMsV0FBV29DLFVBQVUxQixPQUFPcEQsdUJBQXVCLENBQUM2QixPQUFPLENBQUMsaUJBQWlCN0Msb0RBQVlBLENBQUM4RixZQUFZO2dCQUN4RztZQUNGO1lBQ0EsSUFBSUEsU0FBU3JCLE9BQU8sQ0FBQzVFLGtFQUFpQkEsQ0FBQ1MsT0FBTzhELE1BQU0sQ0FBQ0csVUFBVSxDQUFDeUIsaUJBQWlCLElBQUk7Z0JBQ25GRixTQUFTNUMsWUFBWSxDQUFDLGdCQUFnQjtZQUN4QyxPQUFPO2dCQUNMNEMsU0FBU0csZUFBZSxDQUFDO1lBQzNCO1FBQ0Y7SUFDRjtJQUNBLE1BQU1DLFlBQVksQ0FBQ25ELElBQUlvRCxXQUFXakU7UUFDaENZLGdCQUFnQkM7UUFDaEIsSUFBSUEsR0FBR3FELE9BQU8sS0FBSyxVQUFVO1lBQzNCaEQsVUFBVUwsSUFBSTtZQUNkQSxHQUFHc0QsZ0JBQWdCLENBQUMsV0FBV3BDO1FBQ2pDO1FBQ0FQLFdBQVdYLElBQUliO1FBQ2ZzQixjQUFjVCxJQUFJb0Q7SUFDcEI7SUFDQSxNQUFNRyxvQkFBb0JwQyxDQUFBQTtRQUN4QixJQUFJckMsc0JBQXNCQSx1QkFBdUJxQyxFQUFFSSxNQUFNLElBQUksQ0FBQ3pDLG1CQUFtQjJDLFFBQVEsQ0FBQ04sRUFBRUksTUFBTSxHQUFHO1lBQ25HMUMsc0JBQXNCO1FBQ3hCO1FBQ0F0QixPQUFPRyxJQUFJLENBQUNpQixPQUFPLEdBQUc7SUFDeEI7SUFDQSxNQUFNNkUsa0JBQWtCO1FBQ3RCM0Usc0JBQXNCO1FBQ3RCNEUsc0JBQXNCO1lBQ3BCQSxzQkFBc0I7Z0JBQ3BCLElBQUksQ0FBQ2xHLE9BQU9tRyxTQUFTLEVBQUU7b0JBQ3JCbkcsT0FBT0csSUFBSSxDQUFDaUIsT0FBTyxHQUFHO2dCQUN4QjtZQUNGO1FBQ0Y7SUFDRjtJQUNBLE1BQU1nRixxQkFBcUJ4QyxDQUFBQTtRQUN6QnBDLDZCQUE2QixJQUFJQyxPQUFPQyxPQUFPO0lBQ2pEO0lBQ0EsTUFBTTJFLGNBQWN6QyxDQUFBQTtRQUNsQixJQUFJNUQsT0FBT0csSUFBSSxDQUFDaUIsT0FBTyxJQUFJLENBQUNwQixPQUFPOEQsTUFBTSxDQUFDM0QsSUFBSSxDQUFDZSxhQUFhLEVBQUU7UUFDOUQsSUFBSSxJQUFJTyxPQUFPQyxPQUFPLEtBQUtGLDZCQUE2QixLQUFLO1FBQzdELE1BQU04RSxVQUFVMUMsRUFBRUksTUFBTSxDQUFDdUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFdkcsT0FBTzhELE1BQU0sQ0FBQzBDLFVBQVUsQ0FBQyxjQUFjLENBQUM7UUFDN0UsSUFBSSxDQUFDRixXQUFXLENBQUN0RyxPQUFPeUcsTUFBTSxDQUFDL0IsUUFBUSxDQUFDNEIsVUFBVTtRQUNsRC9FLHFCQUFxQitFO1FBQ3JCLE1BQU1JLFdBQVcxRyxPQUFPeUcsTUFBTSxDQUFDRSxPQUFPLENBQUNMLGFBQWF0RyxPQUFPNEcsV0FBVztRQUN0RSxNQUFNQyxZQUFZN0csT0FBTzhELE1BQU0sQ0FBQ2dELG1CQUFtQixJQUFJOUcsT0FBTytHLGFBQWEsSUFBSS9HLE9BQU8rRyxhQUFhLENBQUNyQyxRQUFRLENBQUM0QjtRQUM3RyxJQUFJSSxZQUFZRyxXQUFXO1FBQzNCLElBQUlqRCxFQUFFb0Qsa0JBQWtCLElBQUlwRCxFQUFFb0Qsa0JBQWtCLENBQUNDLGdCQUFnQixFQUFFO1FBQ25FLElBQUlqSCxPQUFPa0gsWUFBWSxJQUFJO1lBQ3pCbEgsT0FBT3lDLEVBQUUsQ0FBQzBFLFVBQVUsR0FBRztRQUN6QixPQUFPO1lBQ0xuSCxPQUFPeUMsRUFBRSxDQUFDMkUsU0FBUyxHQUFHO1FBQ3hCO1FBQ0FsQixzQkFBc0I7WUFDcEIsSUFBSTVFLHFCQUFxQjtZQUN6QixJQUFJdEIsT0FBTzhELE1BQU0sQ0FBQ2MsSUFBSSxFQUFFO2dCQUN0QjVFLE9BQU9xSCxXQUFXLENBQUNySCxPQUFPc0gscUJBQXFCLENBQUNDLFNBQVNqQixRQUFRa0IsWUFBWSxDQUFDLDhCQUE4QjtZQUM5RyxPQUFPO2dCQUNMeEgsT0FBT3lILE9BQU8sQ0FBQ3pILE9BQU9zSCxxQkFBcUIsQ0FBQ3RILE9BQU95RyxNQUFNLENBQUNFLE9BQU8sQ0FBQ0wsV0FBVztZQUMvRTtZQUNBaEYsc0JBQXNCO1FBQ3hCO0lBQ0Y7SUFDQSxNQUFNb0csYUFBYTtRQUNqQixNQUFNNUQsU0FBUzlELE9BQU84RCxNQUFNLENBQUMzRCxJQUFJO1FBQ2pDLElBQUkyRCxPQUFPL0MsMEJBQTBCLEVBQUU7WUFDckNpQyxxQkFBcUJoRCxPQUFPeUcsTUFBTSxFQUFFM0MsT0FBTy9DLDBCQUEwQjtRQUN2RTtRQUNBLElBQUkrQyxPQUFPOUMsU0FBUyxFQUFFO1lBQ3BCOEIsVUFBVTlDLE9BQU95RyxNQUFNLEVBQUUzQyxPQUFPOUMsU0FBUztRQUMzQztRQUNBLE1BQU0yRyxlQUFlM0gsT0FBT3lHLE1BQU0sQ0FBQzNFLE1BQU07UUFDekMsSUFBSWdDLE9BQU9uRCxpQkFBaUIsRUFBRTtZQUM1QlgsT0FBT3lHLE1BQU0sQ0FBQy9ELE9BQU8sQ0FBQyxDQUFDNEQsU0FBU3NCO2dCQUM5QixNQUFNQyxhQUFhN0gsT0FBTzhELE1BQU0sQ0FBQ2MsSUFBSSxHQUFHMkMsU0FBU2pCLFFBQVFrQixZQUFZLENBQUMsNEJBQTRCLE1BQU1JO2dCQUN4RyxNQUFNRSxtQkFBbUJoRSxPQUFPbkQsaUJBQWlCLENBQUM0QixPQUFPLENBQUMsaUJBQWlCc0YsYUFBYSxHQUFHdEYsT0FBTyxDQUFDLHdCQUF3Qm9GO2dCQUMzSHZFLFdBQVdrRCxTQUFTd0I7WUFDdEI7UUFDRjtJQUNGO0lBQ0EsTUFBTUMsT0FBTztRQUNYLE1BQU1qRSxTQUFTOUQsT0FBTzhELE1BQU0sQ0FBQzNELElBQUk7UUFDakNILE9BQU95QyxFQUFFLENBQUN1RixNQUFNLENBQUMzRztRQUVqQixZQUFZO1FBQ1osTUFBTTRHLGNBQWNqSSxPQUFPeUMsRUFBRTtRQUM3QixJQUFJcUIsT0FBT2pELCtCQUErQixFQUFFO1lBQzFDbUMscUJBQXFCaUYsYUFBYW5FLE9BQU9qRCwrQkFBK0I7UUFDMUU7UUFDQSxJQUFJaUQsT0FBT2xELGdCQUFnQixFQUFFO1lBQzNCd0MsV0FBVzZFLGFBQWFuRSxPQUFPbEQsZ0JBQWdCO1FBQ2pEO1FBQ0EsSUFBSWtELE9BQU9oRCxhQUFhLEVBQUU7WUFDeEJnQyxVQUFVbUYsYUFBYW5FLE9BQU9oRCxhQUFhO1FBQzdDO1FBRUEsVUFBVTtRQUNWLE1BQU1vSCxZQUFZbEksT0FBT2tJLFNBQVM7UUFDbEMsTUFBTXJDLFlBQVkvQixPQUFPN0MsRUFBRSxJQUFJaUgsVUFBVVYsWUFBWSxDQUFDLFNBQVMsQ0FBQyxlQUFlLEVBQUV6RixnQkFBZ0IsSUFBSSxDQUFDO1FBQ3RHdUIsUUFBUTRFLFdBQVdyQztRQUNuQixJQUFJL0IsT0FBTzNDLGlCQUFpQixFQUFFO1lBQzVCLE1BQU1xQyxPQUFPeEQsT0FBTzhELE1BQU0sQ0FBQ3FFLFFBQVEsSUFBSW5JLE9BQU84RCxNQUFNLENBQUNxRSxRQUFRLENBQUMvSCxPQUFPLEdBQUcsUUFBUTtZQUNoRm1ELFVBQVUyRSxXQUFXMUU7UUFDdkI7UUFFQSxRQUFRO1FBQ1JrRTtRQUVBLGFBQWE7UUFDYixJQUFJLEVBQ0ZuRCxNQUFNLEVBQ05ELE1BQU0sRUFDUCxHQUFHdEUsT0FBT3FFLFVBQVUsR0FBR3JFLE9BQU9xRSxVQUFVLEdBQUcsQ0FBQztRQUM3Q0UsU0FBUzNFLG9EQUFpQkEsQ0FBQzJFO1FBQzNCRCxTQUFTMUUsb0RBQWlCQSxDQUFDMEU7UUFDM0IsSUFBSUMsUUFBUTtZQUNWQSxPQUFPN0IsT0FBTyxDQUFDRCxDQUFBQSxLQUFNbUQsVUFBVW5ELElBQUlvRCxXQUFXL0IsT0FBT3ZELGdCQUFnQjtRQUN2RTtRQUNBLElBQUkrRCxRQUFRO1lBQ1ZBLE9BQU81QixPQUFPLENBQUNELENBQUFBLEtBQU1tRCxVQUFVbkQsSUFBSW9ELFdBQVcvQixPQUFPeEQsZ0JBQWdCO1FBQ3ZFO1FBRUEsYUFBYTtRQUNiLElBQUkrRSwwQkFBMEI7WUFDNUIsTUFBTStDLGVBQWV4SSxvREFBaUJBLENBQUNJLE9BQU9pRSxVQUFVLENBQUN4QixFQUFFO1lBQzNEMkYsYUFBYTFGLE9BQU8sQ0FBQ0QsQ0FBQUE7Z0JBQ25CQSxHQUFHc0QsZ0JBQWdCLENBQUMsV0FBV3BDO1lBQ2pDO1FBQ0Y7UUFFQSxZQUFZO1FBQ1osTUFBTTBFLFdBQVdoSiw2REFBV0E7UUFDNUJnSixTQUFTdEMsZ0JBQWdCLENBQUMsb0JBQW9CSztRQUM5Q3BHLE9BQU95QyxFQUFFLENBQUNzRCxnQkFBZ0IsQ0FBQyxTQUFTTSxhQUFhO1FBQ2pEckcsT0FBT3lDLEVBQUUsQ0FBQ3NELGdCQUFnQixDQUFDLFNBQVNNLGFBQWE7UUFDakRyRyxPQUFPeUMsRUFBRSxDQUFDc0QsZ0JBQWdCLENBQUMsZUFBZUMsbUJBQW1CO1FBQzdEaEcsT0FBT3lDLEVBQUUsQ0FBQ3NELGdCQUFnQixDQUFDLGFBQWFFLGlCQUFpQjtJQUMzRDtJQUNBLFNBQVNxQztRQUNQLElBQUlqSCxZQUFZQSxXQUFXa0gsTUFBTTtRQUNqQyxJQUFJLEVBQ0ZoRSxNQUFNLEVBQ05ELE1BQU0sRUFDUCxHQUFHdEUsT0FBT3FFLFVBQVUsR0FBR3JFLE9BQU9xRSxVQUFVLEdBQUcsQ0FBQztRQUM3Q0UsU0FBUzNFLG9EQUFpQkEsQ0FBQzJFO1FBQzNCRCxTQUFTMUUsb0RBQWlCQSxDQUFDMEU7UUFDM0IsSUFBSUMsUUFBUTtZQUNWQSxPQUFPN0IsT0FBTyxDQUFDRCxDQUFBQSxLQUFNQSxHQUFHK0YsbUJBQW1CLENBQUMsV0FBVzdFO1FBQ3pEO1FBQ0EsSUFBSVcsUUFBUTtZQUNWQSxPQUFPNUIsT0FBTyxDQUFDRCxDQUFBQSxLQUFNQSxHQUFHK0YsbUJBQW1CLENBQUMsV0FBVzdFO1FBQ3pEO1FBRUEsYUFBYTtRQUNiLElBQUkwQiwwQkFBMEI7WUFDNUIsTUFBTStDLGVBQWV4SSxvREFBaUJBLENBQUNJLE9BQU9pRSxVQUFVLENBQUN4QixFQUFFO1lBQzNEMkYsYUFBYTFGLE9BQU8sQ0FBQ0QsQ0FBQUE7Z0JBQ25CQSxHQUFHK0YsbUJBQW1CLENBQUMsV0FBVzdFO1lBQ3BDO1FBQ0Y7UUFDQSxNQUFNMEUsV0FBV2hKLDZEQUFXQTtRQUM1QmdKLFNBQVNHLG1CQUFtQixDQUFDLG9CQUFvQnBDO1FBQ2pELFlBQVk7UUFDWixJQUFJcEcsT0FBT3lDLEVBQUUsSUFBSSxPQUFPekMsT0FBT3lDLEVBQUUsS0FBSyxVQUFVO1lBQzlDekMsT0FBT3lDLEVBQUUsQ0FBQytGLG1CQUFtQixDQUFDLFNBQVNuQyxhQUFhO1lBQ3BEckcsT0FBT3lDLEVBQUUsQ0FBQytGLG1CQUFtQixDQUFDLGVBQWV4QyxtQkFBbUI7WUFDaEVoRyxPQUFPeUMsRUFBRSxDQUFDK0YsbUJBQW1CLENBQUMsYUFBYXZDLGlCQUFpQjtRQUM5RDtJQUNGO0lBQ0EvRixHQUFHLGNBQWM7UUFDZm1CLGFBQWE3QixvREFBYUEsQ0FBQyxRQUFRUSxPQUFPOEQsTUFBTSxDQUFDM0QsSUFBSSxDQUFDRSxpQkFBaUI7UUFDdkVnQixXQUFXdUIsWUFBWSxDQUFDLGFBQWE7UUFDckN2QixXQUFXdUIsWUFBWSxDQUFDLGVBQWU7SUFDekM7SUFDQTFDLEdBQUcsYUFBYTtRQUNkLElBQUksQ0FBQ0YsT0FBTzhELE1BQU0sQ0FBQzNELElBQUksQ0FBQ0MsT0FBTyxFQUFFO1FBQ2pDMkg7SUFDRjtJQUNBN0gsR0FBRyxrRUFBa0U7UUFDbkUsSUFBSSxDQUFDRixPQUFPOEQsTUFBTSxDQUFDM0QsSUFBSSxDQUFDQyxPQUFPLEVBQUU7UUFDakNzSDtJQUNGO0lBQ0F4SCxHQUFHLHlDQUF5QztRQUMxQyxJQUFJLENBQUNGLE9BQU84RCxNQUFNLENBQUMzRCxJQUFJLENBQUNDLE9BQU8sRUFBRTtRQUNqQzZFO0lBQ0Y7SUFDQS9FLEdBQUcsb0JBQW9CO1FBQ3JCLElBQUksQ0FBQ0YsT0FBTzhELE1BQU0sQ0FBQzNELElBQUksQ0FBQ0MsT0FBTyxFQUFFO1FBQ2pDbUY7SUFDRjtJQUNBckYsR0FBRyxXQUFXO1FBQ1osSUFBSSxDQUFDRixPQUFPOEQsTUFBTSxDQUFDM0QsSUFBSSxDQUFDQyxPQUFPLEVBQUU7UUFDakNrSTtJQUNGO0FBQ0Y7QUFFMkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFyYnVja3MtdHVya2V5LWNsb25lLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL2ExMXkubWpzPzRjYzIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZyBhcyBnZXREb2N1bWVudCB9IGZyb20gJy4uL3NoYXJlZC9zc3Itd2luZG93LmVzbS5tanMnO1xuaW1wb3J0IHsgYyBhcyBjbGFzc2VzVG9TZWxlY3RvciB9IGZyb20gJy4uL3NoYXJlZC9jbGFzc2VzLXRvLXNlbGVjdG9yLm1qcyc7XG5pbXBvcnQgeyBjIGFzIGNyZWF0ZUVsZW1lbnQsIGogYXMgZWxlbWVudEluZGV4LCBtIGFzIG1ha2VFbGVtZW50c0FycmF5LCBzIGFzIHNldElubmVySFRNTCB9IGZyb20gJy4uL3NoYXJlZC91dGlscy5tanMnO1xuXG5mdW5jdGlvbiBBMTF5KHtcbiAgc3dpcGVyLFxuICBleHRlbmRQYXJhbXMsXG4gIG9uXG59KSB7XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgYTExeToge1xuICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgIG5vdGlmaWNhdGlvbkNsYXNzOiAnc3dpcGVyLW5vdGlmaWNhdGlvbicsXG4gICAgICBwcmV2U2xpZGVNZXNzYWdlOiAnUHJldmlvdXMgc2xpZGUnLFxuICAgICAgbmV4dFNsaWRlTWVzc2FnZTogJ05leHQgc2xpZGUnLFxuICAgICAgZmlyc3RTbGlkZU1lc3NhZ2U6ICdUaGlzIGlzIHRoZSBmaXJzdCBzbGlkZScsXG4gICAgICBsYXN0U2xpZGVNZXNzYWdlOiAnVGhpcyBpcyB0aGUgbGFzdCBzbGlkZScsXG4gICAgICBwYWdpbmF0aW9uQnVsbGV0TWVzc2FnZTogJ0dvIHRvIHNsaWRlIHt7aW5kZXh9fScsXG4gICAgICBzbGlkZUxhYmVsTWVzc2FnZTogJ3t7aW5kZXh9fSAvIHt7c2xpZGVzTGVuZ3RofX0nLFxuICAgICAgY29udGFpbmVyTWVzc2FnZTogbnVsbCxcbiAgICAgIGNvbnRhaW5lclJvbGVEZXNjcmlwdGlvbk1lc3NhZ2U6IG51bGwsXG4gICAgICBjb250YWluZXJSb2xlOiBudWxsLFxuICAgICAgaXRlbVJvbGVEZXNjcmlwdGlvbk1lc3NhZ2U6IG51bGwsXG4gICAgICBzbGlkZVJvbGU6ICdncm91cCcsXG4gICAgICBpZDogbnVsbCxcbiAgICAgIHNjcm9sbE9uRm9jdXM6IHRydWUsXG4gICAgICB3cmFwcGVyTGl2ZVJlZ2lvbjogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIHN3aXBlci5hMTF5ID0ge1xuICAgIGNsaWNrZWQ6IGZhbHNlXG4gIH07XG4gIGxldCBsaXZlUmVnaW9uID0gbnVsbDtcbiAgbGV0IHByZXZlbnRGb2N1c0hhbmRsZXI7XG4gIGxldCBmb2N1c1RhcmdldFNsaWRlRWw7XG4gIGxldCB2aXNpYmlsaXR5Q2hhbmdlZFRpbWVzdGFtcCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICBmdW5jdGlvbiBub3RpZnkobWVzc2FnZSkge1xuICAgIGNvbnN0IG5vdGlmaWNhdGlvbiA9IGxpdmVSZWdpb247XG4gICAgaWYgKG5vdGlmaWNhdGlvbi5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICBzZXRJbm5lckhUTUwobm90aWZpY2F0aW9uLCBtZXNzYWdlKTtcbiAgfVxuICBmdW5jdGlvbiBnZXRSYW5kb21OdW1iZXIoc2l6ZSA9IDE2KSB7XG4gICAgY29uc3QgcmFuZG9tQ2hhciA9ICgpID0+IE1hdGgucm91bmQoMTYgKiBNYXRoLnJhbmRvbSgpKS50b1N0cmluZygxNik7XG4gICAgcmV0dXJuICd4Jy5yZXBlYXQoc2l6ZSkucmVwbGFjZSgveC9nLCByYW5kb21DaGFyKTtcbiAgfVxuICBmdW5jdGlvbiBtYWtlRWxGb2N1c2FibGUoZWwpIHtcbiAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgIHN1YkVsLnNldEF0dHJpYnV0ZSgndGFiSW5kZXgnLCAnMCcpO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIG1ha2VFbE5vdEZvY3VzYWJsZShlbCkge1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgc3ViRWwuc2V0QXR0cmlidXRlKCd0YWJJbmRleCcsICctMScpO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGFkZEVsUm9sZShlbCwgcm9sZSkge1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgc3ViRWwuc2V0QXR0cmlidXRlKCdyb2xlJywgcm9sZSk7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gYWRkRWxSb2xlRGVzY3JpcHRpb24oZWwsIGRlc2NyaXB0aW9uKSB7XG4gICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICBzdWJFbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtcm9sZWRlc2NyaXB0aW9uJywgZGVzY3JpcHRpb24pO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGFkZEVsQ29udHJvbHMoZWwsIGNvbnRyb2xzKSB7XG4gICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICBzdWJFbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtY29udHJvbHMnLCBjb250cm9scyk7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gYWRkRWxMYWJlbChlbCwgbGFiZWwpIHtcbiAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgIHN1YkVsLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsIGxhYmVsKTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBhZGRFbElkKGVsLCBpZCkge1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgc3ViRWwuc2V0QXR0cmlidXRlKCdpZCcsIGlkKTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBhZGRFbExpdmUoZWwsIGxpdmUpIHtcbiAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgIHN1YkVsLnNldEF0dHJpYnV0ZSgnYXJpYS1saXZlJywgbGl2ZSk7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gZGlzYWJsZUVsKGVsKSB7XG4gICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICBzdWJFbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZGlzYWJsZWQnLCB0cnVlKTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBlbmFibGVFbChlbCkge1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgc3ViRWwuc2V0QXR0cmlidXRlKCdhcmlhLWRpc2FibGVkJywgZmFsc2UpO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIG9uRW50ZXJPclNwYWNlS2V5KGUpIHtcbiAgICBpZiAoZS5rZXlDb2RlICE9PSAxMyAmJiBlLmtleUNvZGUgIT09IDMyKSByZXR1cm47XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5hMTF5O1xuICAgIGNvbnN0IHRhcmdldEVsID0gZS50YXJnZXQ7XG4gICAgaWYgKHN3aXBlci5wYWdpbmF0aW9uICYmIHN3aXBlci5wYWdpbmF0aW9uLmVsICYmICh0YXJnZXRFbCA9PT0gc3dpcGVyLnBhZ2luYXRpb24uZWwgfHwgc3dpcGVyLnBhZ2luYXRpb24uZWwuY29udGFpbnMoZS50YXJnZXQpKSkge1xuICAgICAgaWYgKCFlLnRhcmdldC5tYXRjaGVzKGNsYXNzZXNUb1NlbGVjdG9yKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzcykpKSByZXR1cm47XG4gICAgfVxuICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiBzd2lwZXIubmF2aWdhdGlvbi5wcmV2RWwgJiYgc3dpcGVyLm5hdmlnYXRpb24ubmV4dEVsKSB7XG4gICAgICBjb25zdCBwcmV2RWxzID0gbWFrZUVsZW1lbnRzQXJyYXkoc3dpcGVyLm5hdmlnYXRpb24ucHJldkVsKTtcbiAgICAgIGNvbnN0IG5leHRFbHMgPSBtYWtlRWxlbWVudHNBcnJheShzd2lwZXIubmF2aWdhdGlvbi5uZXh0RWwpO1xuICAgICAgaWYgKG5leHRFbHMuaW5jbHVkZXModGFyZ2V0RWwpKSB7XG4gICAgICAgIGlmICghKHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLnBhcmFtcy5sb29wKSkge1xuICAgICAgICAgIHN3aXBlci5zbGlkZU5leHQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3dpcGVyLmlzRW5kKSB7XG4gICAgICAgICAgbm90aWZ5KHBhcmFtcy5sYXN0U2xpZGVNZXNzYWdlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBub3RpZnkocGFyYW1zLm5leHRTbGlkZU1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocHJldkVscy5pbmNsdWRlcyh0YXJnZXRFbCkpIHtcbiAgICAgICAgaWYgKCEoc3dpcGVyLmlzQmVnaW5uaW5nICYmICFzd2lwZXIucGFyYW1zLmxvb3ApKSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlUHJldigpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcpIHtcbiAgICAgICAgICBub3RpZnkocGFyYW1zLmZpcnN0U2xpZGVNZXNzYWdlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBub3RpZnkocGFyYW1zLnByZXZTbGlkZU1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbiAmJiB0YXJnZXRFbC5tYXRjaGVzKGNsYXNzZXNUb1NlbGVjdG9yKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzcykpKSB7XG4gICAgICB0YXJnZXRFbC5jbGljaygpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiB1cGRhdGVOYXZpZ2F0aW9uKCkge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3AgfHwgc3dpcGVyLnBhcmFtcy5yZXdpbmQgfHwgIXN3aXBlci5uYXZpZ2F0aW9uKSByZXR1cm47XG4gICAgY29uc3Qge1xuICAgICAgbmV4dEVsLFxuICAgICAgcHJldkVsXG4gICAgfSA9IHN3aXBlci5uYXZpZ2F0aW9uO1xuICAgIGlmIChwcmV2RWwpIHtcbiAgICAgIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcpIHtcbiAgICAgICAgZGlzYWJsZUVsKHByZXZFbCk7XG4gICAgICAgIG1ha2VFbE5vdEZvY3VzYWJsZShwcmV2RWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW5hYmxlRWwocHJldkVsKTtcbiAgICAgICAgbWFrZUVsRm9jdXNhYmxlKHByZXZFbCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChuZXh0RWwpIHtcbiAgICAgIGlmIChzd2lwZXIuaXNFbmQpIHtcbiAgICAgICAgZGlzYWJsZUVsKG5leHRFbCk7XG4gICAgICAgIG1ha2VFbE5vdEZvY3VzYWJsZShuZXh0RWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW5hYmxlRWwobmV4dEVsKTtcbiAgICAgICAgbWFrZUVsRm9jdXNhYmxlKG5leHRFbCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGhhc1BhZ2luYXRpb24oKSB7XG4gICAgcmV0dXJuIHN3aXBlci5wYWdpbmF0aW9uICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5sZW5ndGg7XG4gIH1cbiAgZnVuY3Rpb24gaGFzQ2xpY2thYmxlUGFnaW5hdGlvbigpIHtcbiAgICByZXR1cm4gaGFzUGFnaW5hdGlvbigpICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5jbGlja2FibGU7XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlUGFnaW5hdGlvbigpIHtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmExMXk7XG4gICAgaWYgKCFoYXNQYWdpbmF0aW9uKCkpIHJldHVybjtcbiAgICBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzLmZvckVhY2goYnVsbGV0RWwgPT4ge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5jbGlja2FibGUpIHtcbiAgICAgICAgbWFrZUVsRm9jdXNhYmxlKGJ1bGxldEVsKTtcbiAgICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24ucmVuZGVyQnVsbGV0KSB7XG4gICAgICAgICAgYWRkRWxSb2xlKGJ1bGxldEVsLCAnYnV0dG9uJyk7XG4gICAgICAgICAgYWRkRWxMYWJlbChidWxsZXRFbCwgcGFyYW1zLnBhZ2luYXRpb25CdWxsZXRNZXNzYWdlLnJlcGxhY2UoL1xce1xce2luZGV4XFx9XFx9LywgZWxlbWVudEluZGV4KGJ1bGxldEVsKSArIDEpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGJ1bGxldEVsLm1hdGNoZXMoY2xhc3Nlc1RvU2VsZWN0b3Ioc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmJ1bGxldEFjdGl2ZUNsYXNzKSkpIHtcbiAgICAgICAgYnVsbGV0RWwuc2V0QXR0cmlidXRlKCdhcmlhLWN1cnJlbnQnLCAndHJ1ZScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnVsbGV0RWwucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWN1cnJlbnQnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBjb25zdCBpbml0TmF2RWwgPSAoZWwsIHdyYXBwZXJJZCwgbWVzc2FnZSkgPT4ge1xuICAgIG1ha2VFbEZvY3VzYWJsZShlbCk7XG4gICAgaWYgKGVsLnRhZ05hbWUgIT09ICdCVVRUT04nKSB7XG4gICAgICBhZGRFbFJvbGUoZWwsICdidXR0b24nKTtcbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBvbkVudGVyT3JTcGFjZUtleSk7XG4gICAgfVxuICAgIGFkZEVsTGFiZWwoZWwsIG1lc3NhZ2UpO1xuICAgIGFkZEVsQ29udHJvbHMoZWwsIHdyYXBwZXJJZCk7XG4gIH07XG4gIGNvbnN0IGhhbmRsZVBvaW50ZXJEb3duID0gZSA9PiB7XG4gICAgaWYgKGZvY3VzVGFyZ2V0U2xpZGVFbCAmJiBmb2N1c1RhcmdldFNsaWRlRWwgIT09IGUudGFyZ2V0ICYmICFmb2N1c1RhcmdldFNsaWRlRWwuY29udGFpbnMoZS50YXJnZXQpKSB7XG4gICAgICBwcmV2ZW50Rm9jdXNIYW5kbGVyID0gdHJ1ZTtcbiAgICB9XG4gICAgc3dpcGVyLmExMXkuY2xpY2tlZCA9IHRydWU7XG4gIH07XG4gIGNvbnN0IGhhbmRsZVBvaW50ZXJVcCA9ICgpID0+IHtcbiAgICBwcmV2ZW50Rm9jdXNIYW5kbGVyID0gZmFsc2U7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgIGlmICghc3dpcGVyLmRlc3Ryb3llZCkge1xuICAgICAgICAgIHN3aXBlci5hMTF5LmNsaWNrZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG4gIGNvbnN0IG9uVmlzaWJpbGl0eUNoYW5nZSA9IGUgPT4ge1xuICAgIHZpc2liaWxpdHlDaGFuZ2VkVGltZXN0YW1wID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gIH07XG4gIGNvbnN0IGhhbmRsZUZvY3VzID0gZSA9PiB7XG4gICAgaWYgKHN3aXBlci5hMTF5LmNsaWNrZWQgfHwgIXN3aXBlci5wYXJhbXMuYTExeS5zY3JvbGxPbkZvY3VzKSByZXR1cm47XG4gICAgaWYgKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gdmlzaWJpbGl0eUNoYW5nZWRUaW1lc3RhbXAgPCAxMDApIHJldHVybjtcbiAgICBjb25zdCBzbGlkZUVsID0gZS50YXJnZXQuY2xvc2VzdChgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYCk7XG4gICAgaWYgKCFzbGlkZUVsIHx8ICFzd2lwZXIuc2xpZGVzLmluY2x1ZGVzKHNsaWRlRWwpKSByZXR1cm47XG4gICAgZm9jdXNUYXJnZXRTbGlkZUVsID0gc2xpZGVFbDtcbiAgICBjb25zdCBpc0FjdGl2ZSA9IHN3aXBlci5zbGlkZXMuaW5kZXhPZihzbGlkZUVsKSA9PT0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgIGNvbnN0IGlzVmlzaWJsZSA9IHN3aXBlci5wYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyAmJiBzd2lwZXIudmlzaWJsZVNsaWRlcyAmJiBzd2lwZXIudmlzaWJsZVNsaWRlcy5pbmNsdWRlcyhzbGlkZUVsKTtcbiAgICBpZiAoaXNBY3RpdmUgfHwgaXNWaXNpYmxlKSByZXR1cm47XG4gICAgaWYgKGUuc291cmNlQ2FwYWJpbGl0aWVzICYmIGUuc291cmNlQ2FwYWJpbGl0aWVzLmZpcmVzVG91Y2hFdmVudHMpIHJldHVybjtcbiAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICBzd2lwZXIuZWwuc2Nyb2xsTGVmdCA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5lbC5zY3JvbGxUb3AgPSAwO1xuICAgIH1cbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgaWYgKHByZXZlbnRGb2N1c0hhbmRsZXIpIHJldHVybjtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG9Mb29wKHN3aXBlci5nZXRTbGlkZUluZGV4V2hlbkdyaWQocGFyc2VJbnQoc2xpZGVFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykpKSwgMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuZ2V0U2xpZGVJbmRleFdoZW5HcmlkKHN3aXBlci5zbGlkZXMuaW5kZXhPZihzbGlkZUVsKSksIDApO1xuICAgICAgfVxuICAgICAgcHJldmVudEZvY3VzSGFuZGxlciA9IGZhbHNlO1xuICAgIH0pO1xuICB9O1xuICBjb25zdCBpbml0U2xpZGVzID0gKCkgPT4ge1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuYTExeTtcbiAgICBpZiAocGFyYW1zLml0ZW1Sb2xlRGVzY3JpcHRpb25NZXNzYWdlKSB7XG4gICAgICBhZGRFbFJvbGVEZXNjcmlwdGlvbihzd2lwZXIuc2xpZGVzLCBwYXJhbXMuaXRlbVJvbGVEZXNjcmlwdGlvbk1lc3NhZ2UpO1xuICAgIH1cbiAgICBpZiAocGFyYW1zLnNsaWRlUm9sZSkge1xuICAgICAgYWRkRWxSb2xlKHN3aXBlci5zbGlkZXMsIHBhcmFtcy5zbGlkZVJvbGUpO1xuICAgIH1cbiAgICBjb25zdCBzbGlkZXNMZW5ndGggPSBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgICBpZiAocGFyYW1zLnNsaWRlTGFiZWxNZXNzYWdlKSB7XG4gICAgICBzd2lwZXIuc2xpZGVzLmZvckVhY2goKHNsaWRlRWwsIGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHNsaWRlSW5kZXggPSBzd2lwZXIucGFyYW1zLmxvb3AgPyBwYXJzZUludChzbGlkZUVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSwgMTApIDogaW5kZXg7XG4gICAgICAgIGNvbnN0IGFyaWFMYWJlbE1lc3NhZ2UgPSBwYXJhbXMuc2xpZGVMYWJlbE1lc3NhZ2UucmVwbGFjZSgvXFx7XFx7aW5kZXhcXH1cXH0vLCBzbGlkZUluZGV4ICsgMSkucmVwbGFjZSgvXFx7XFx7c2xpZGVzTGVuZ3RoXFx9XFx9Lywgc2xpZGVzTGVuZ3RoKTtcbiAgICAgICAgYWRkRWxMYWJlbChzbGlkZUVsLCBhcmlhTGFiZWxNZXNzYWdlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgaW5pdCA9ICgpID0+IHtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmExMXk7XG4gICAgc3dpcGVyLmVsLmFwcGVuZChsaXZlUmVnaW9uKTtcblxuICAgIC8vIENvbnRhaW5lclxuICAgIGNvbnN0IGNvbnRhaW5lckVsID0gc3dpcGVyLmVsO1xuICAgIGlmIChwYXJhbXMuY29udGFpbmVyUm9sZURlc2NyaXB0aW9uTWVzc2FnZSkge1xuICAgICAgYWRkRWxSb2xlRGVzY3JpcHRpb24oY29udGFpbmVyRWwsIHBhcmFtcy5jb250YWluZXJSb2xlRGVzY3JpcHRpb25NZXNzYWdlKTtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy5jb250YWluZXJNZXNzYWdlKSB7XG4gICAgICBhZGRFbExhYmVsKGNvbnRhaW5lckVsLCBwYXJhbXMuY29udGFpbmVyTWVzc2FnZSk7XG4gICAgfVxuICAgIGlmIChwYXJhbXMuY29udGFpbmVyUm9sZSkge1xuICAgICAgYWRkRWxSb2xlKGNvbnRhaW5lckVsLCBwYXJhbXMuY29udGFpbmVyUm9sZSk7XG4gICAgfVxuXG4gICAgLy8gV3JhcHBlclxuICAgIGNvbnN0IHdyYXBwZXJFbCA9IHN3aXBlci53cmFwcGVyRWw7XG4gICAgY29uc3Qgd3JhcHBlcklkID0gcGFyYW1zLmlkIHx8IHdyYXBwZXJFbC5nZXRBdHRyaWJ1dGUoJ2lkJykgfHwgYHN3aXBlci13cmFwcGVyLSR7Z2V0UmFuZG9tTnVtYmVyKDE2KX1gO1xuICAgIGFkZEVsSWQod3JhcHBlckVsLCB3cmFwcGVySWQpO1xuICAgIGlmIChwYXJhbXMud3JhcHBlckxpdmVSZWdpb24pIHtcbiAgICAgIGNvbnN0IGxpdmUgPSBzd2lwZXIucGFyYW1zLmF1dG9wbGF5ICYmIHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZW5hYmxlZCA/ICdvZmYnIDogJ3BvbGl0ZSc7XG4gICAgICBhZGRFbExpdmUod3JhcHBlckVsLCBsaXZlKTtcbiAgICB9XG5cbiAgICAvLyBTbGlkZVxuICAgIGluaXRTbGlkZXMoKTtcblxuICAgIC8vIE5hdmlnYXRpb25cbiAgICBsZXQge1xuICAgICAgbmV4dEVsLFxuICAgICAgcHJldkVsXG4gICAgfSA9IHN3aXBlci5uYXZpZ2F0aW9uID8gc3dpcGVyLm5hdmlnYXRpb24gOiB7fTtcbiAgICBuZXh0RWwgPSBtYWtlRWxlbWVudHNBcnJheShuZXh0RWwpO1xuICAgIHByZXZFbCA9IG1ha2VFbGVtZW50c0FycmF5KHByZXZFbCk7XG4gICAgaWYgKG5leHRFbCkge1xuICAgICAgbmV4dEVsLmZvckVhY2goZWwgPT4gaW5pdE5hdkVsKGVsLCB3cmFwcGVySWQsIHBhcmFtcy5uZXh0U2xpZGVNZXNzYWdlKSk7XG4gICAgfVxuICAgIGlmIChwcmV2RWwpIHtcbiAgICAgIHByZXZFbC5mb3JFYWNoKGVsID0+IGluaXROYXZFbChlbCwgd3JhcHBlcklkLCBwYXJhbXMucHJldlNsaWRlTWVzc2FnZSkpO1xuICAgIH1cblxuICAgIC8vIFBhZ2luYXRpb25cbiAgICBpZiAoaGFzQ2xpY2thYmxlUGFnaW5hdGlvbigpKSB7XG4gICAgICBjb25zdCBwYWdpbmF0aW9uRWwgPSBtYWtlRWxlbWVudHNBcnJheShzd2lwZXIucGFnaW5hdGlvbi5lbCk7XG4gICAgICBwYWdpbmF0aW9uRWwuZm9yRWFjaChlbCA9PiB7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBvbkVudGVyT3JTcGFjZUtleSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBUYWIgZm9jdXNcbiAgICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIG9uVmlzaWJpbGl0eUNoYW5nZSk7XG4gICAgc3dpcGVyLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgaGFuZGxlRm9jdXMsIHRydWUpO1xuICAgIHN3aXBlci5lbC5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIGhhbmRsZUZvY3VzLCB0cnVlKTtcbiAgICBzd2lwZXIuZWwuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gICAgc3dpcGVyLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJ1cCcsIGhhbmRsZVBvaW50ZXJVcCwgdHJ1ZSk7XG4gIH07XG4gIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgaWYgKGxpdmVSZWdpb24pIGxpdmVSZWdpb24ucmVtb3ZlKCk7XG4gICAgbGV0IHtcbiAgICAgIG5leHRFbCxcbiAgICAgIHByZXZFbFxuICAgIH0gPSBzd2lwZXIubmF2aWdhdGlvbiA/IHN3aXBlci5uYXZpZ2F0aW9uIDoge307XG4gICAgbmV4dEVsID0gbWFrZUVsZW1lbnRzQXJyYXkobmV4dEVsKTtcbiAgICBwcmV2RWwgPSBtYWtlRWxlbWVudHNBcnJheShwcmV2RWwpO1xuICAgIGlmIChuZXh0RWwpIHtcbiAgICAgIG5leHRFbC5mb3JFYWNoKGVsID0+IGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBvbkVudGVyT3JTcGFjZUtleSkpO1xuICAgIH1cbiAgICBpZiAocHJldkVsKSB7XG4gICAgICBwcmV2RWwuZm9yRWFjaChlbCA9PiBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgb25FbnRlck9yU3BhY2VLZXkpKTtcbiAgICB9XG5cbiAgICAvLyBQYWdpbmF0aW9uXG4gICAgaWYgKGhhc0NsaWNrYWJsZVBhZ2luYXRpb24oKSkge1xuICAgICAgY29uc3QgcGFnaW5hdGlvbkVsID0gbWFrZUVsZW1lbnRzQXJyYXkoc3dpcGVyLnBhZ2luYXRpb24uZWwpO1xuICAgICAgcGFnaW5hdGlvbkVsLmZvckVhY2goZWwgPT4ge1xuICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgb25FbnRlck9yU3BhY2VLZXkpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgb25WaXNpYmlsaXR5Q2hhbmdlKTtcbiAgICAvLyBUYWIgZm9jdXNcbiAgICBpZiAoc3dpcGVyLmVsICYmIHR5cGVvZiBzd2lwZXIuZWwgIT09ICdzdHJpbmcnKSB7XG4gICAgICBzd2lwZXIuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBoYW5kbGVGb2N1cywgdHJ1ZSk7XG4gICAgICBzd2lwZXIuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gICAgICBzd2lwZXIuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcnVwJywgaGFuZGxlUG9pbnRlclVwLCB0cnVlKTtcbiAgICB9XG4gIH1cbiAgb24oJ2JlZm9yZUluaXQnLCAoKSA9PiB7XG4gICAgbGl2ZVJlZ2lvbiA9IGNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCBzd2lwZXIucGFyYW1zLmExMXkubm90aWZpY2F0aW9uQ2xhc3MpO1xuICAgIGxpdmVSZWdpb24uc2V0QXR0cmlidXRlKCdhcmlhLWxpdmUnLCAnYXNzZXJ0aXZlJyk7XG4gICAgbGl2ZVJlZ2lvbi5zZXRBdHRyaWJ1dGUoJ2FyaWEtYXRvbWljJywgJ3RydWUnKTtcbiAgfSk7XG4gIG9uKCdhZnRlckluaXQnLCAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLmExMXkuZW5hYmxlZCkgcmV0dXJuO1xuICAgIGluaXQoKTtcbiAgfSk7XG4gIG9uKCdzbGlkZXNMZW5ndGhDaGFuZ2Ugc25hcEdyaWRMZW5ndGhDaGFuZ2Ugc2xpZGVzR3JpZExlbmd0aENoYW5nZScsICgpID0+IHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuYTExeS5lbmFibGVkKSByZXR1cm47XG4gICAgaW5pdFNsaWRlcygpO1xuICB9KTtcbiAgb24oJ2Zyb21FZGdlIHRvRWRnZSBhZnRlckluaXQgbG9jayB1bmxvY2snLCAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLmExMXkuZW5hYmxlZCkgcmV0dXJuO1xuICAgIHVwZGF0ZU5hdmlnYXRpb24oKTtcbiAgfSk7XG4gIG9uKCdwYWdpbmF0aW9uVXBkYXRlJywgKCkgPT4ge1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5hMTF5LmVuYWJsZWQpIHJldHVybjtcbiAgICB1cGRhdGVQYWdpbmF0aW9uKCk7XG4gIH0pO1xuICBvbignZGVzdHJveScsICgpID0+IHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuYTExeS5lbmFibGVkKSByZXR1cm47XG4gICAgZGVzdHJveSgpO1xuICB9KTtcbn1cblxuZXhwb3J0IHsgQTExeSBhcyBkZWZhdWx0IH07XG4iXSwibmFtZXMiOlsiZyIsImdldERvY3VtZW50IiwiYyIsImNsYXNzZXNUb1NlbGVjdG9yIiwiY3JlYXRlRWxlbWVudCIsImoiLCJlbGVtZW50SW5kZXgiLCJtIiwibWFrZUVsZW1lbnRzQXJyYXkiLCJzIiwic2V0SW5uZXJIVE1MIiwiQTExeSIsInN3aXBlciIsImV4dGVuZFBhcmFtcyIsIm9uIiwiYTExeSIsImVuYWJsZWQiLCJub3RpZmljYXRpb25DbGFzcyIsInByZXZTbGlkZU1lc3NhZ2UiLCJuZXh0U2xpZGVNZXNzYWdlIiwiZmlyc3RTbGlkZU1lc3NhZ2UiLCJsYXN0U2xpZGVNZXNzYWdlIiwicGFnaW5hdGlvbkJ1bGxldE1lc3NhZ2UiLCJzbGlkZUxhYmVsTWVzc2FnZSIsImNvbnRhaW5lck1lc3NhZ2UiLCJjb250YWluZXJSb2xlRGVzY3JpcHRpb25NZXNzYWdlIiwiY29udGFpbmVyUm9sZSIsIml0ZW1Sb2xlRGVzY3JpcHRpb25NZXNzYWdlIiwic2xpZGVSb2xlIiwiaWQiLCJzY3JvbGxPbkZvY3VzIiwid3JhcHBlckxpdmVSZWdpb24iLCJjbGlja2VkIiwibGl2ZVJlZ2lvbiIsInByZXZlbnRGb2N1c0hhbmRsZXIiLCJmb2N1c1RhcmdldFNsaWRlRWwiLCJ2aXNpYmlsaXR5Q2hhbmdlZFRpbWVzdGFtcCIsIkRhdGUiLCJnZXRUaW1lIiwibm90aWZ5IiwibWVzc2FnZSIsIm5vdGlmaWNhdGlvbiIsImxlbmd0aCIsImdldFJhbmRvbU51bWJlciIsInNpemUiLCJyYW5kb21DaGFyIiwiTWF0aCIsInJvdW5kIiwicmFuZG9tIiwidG9TdHJpbmciLCJyZXBlYXQiLCJyZXBsYWNlIiwibWFrZUVsRm9jdXNhYmxlIiwiZWwiLCJmb3JFYWNoIiwic3ViRWwiLCJzZXRBdHRyaWJ1dGUiLCJtYWtlRWxOb3RGb2N1c2FibGUiLCJhZGRFbFJvbGUiLCJyb2xlIiwiYWRkRWxSb2xlRGVzY3JpcHRpb24iLCJkZXNjcmlwdGlvbiIsImFkZEVsQ29udHJvbHMiLCJjb250cm9scyIsImFkZEVsTGFiZWwiLCJsYWJlbCIsImFkZEVsSWQiLCJhZGRFbExpdmUiLCJsaXZlIiwiZGlzYWJsZUVsIiwiZW5hYmxlRWwiLCJvbkVudGVyT3JTcGFjZUtleSIsImUiLCJrZXlDb2RlIiwicGFyYW1zIiwidGFyZ2V0RWwiLCJ0YXJnZXQiLCJwYWdpbmF0aW9uIiwiY29udGFpbnMiLCJtYXRjaGVzIiwiYnVsbGV0Q2xhc3MiLCJuYXZpZ2F0aW9uIiwicHJldkVsIiwibmV4dEVsIiwicHJldkVscyIsIm5leHRFbHMiLCJpbmNsdWRlcyIsImlzRW5kIiwibG9vcCIsInNsaWRlTmV4dCIsImlzQmVnaW5uaW5nIiwic2xpZGVQcmV2IiwiY2xpY2siLCJ1cGRhdGVOYXZpZ2F0aW9uIiwicmV3aW5kIiwiaGFzUGFnaW5hdGlvbiIsImJ1bGxldHMiLCJoYXNDbGlja2FibGVQYWdpbmF0aW9uIiwiY2xpY2thYmxlIiwidXBkYXRlUGFnaW5hdGlvbiIsImJ1bGxldEVsIiwicmVuZGVyQnVsbGV0IiwiYnVsbGV0QWN0aXZlQ2xhc3MiLCJyZW1vdmVBdHRyaWJ1dGUiLCJpbml0TmF2RWwiLCJ3cmFwcGVySWQiLCJ0YWdOYW1lIiwiYWRkRXZlbnRMaXN0ZW5lciIsImhhbmRsZVBvaW50ZXJEb3duIiwiaGFuZGxlUG9pbnRlclVwIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZGVzdHJveWVkIiwib25WaXNpYmlsaXR5Q2hhbmdlIiwiaGFuZGxlRm9jdXMiLCJzbGlkZUVsIiwiY2xvc2VzdCIsInNsaWRlQ2xhc3MiLCJzbGlkZXMiLCJpc0FjdGl2ZSIsImluZGV4T2YiLCJhY3RpdmVJbmRleCIsImlzVmlzaWJsZSIsIndhdGNoU2xpZGVzUHJvZ3Jlc3MiLCJ2aXNpYmxlU2xpZGVzIiwic291cmNlQ2FwYWJpbGl0aWVzIiwiZmlyZXNUb3VjaEV2ZW50cyIsImlzSG9yaXpvbnRhbCIsInNjcm9sbExlZnQiLCJzY3JvbGxUb3AiLCJzbGlkZVRvTG9vcCIsImdldFNsaWRlSW5kZXhXaGVuR3JpZCIsInBhcnNlSW50IiwiZ2V0QXR0cmlidXRlIiwic2xpZGVUbyIsImluaXRTbGlkZXMiLCJzbGlkZXNMZW5ndGgiLCJpbmRleCIsInNsaWRlSW5kZXgiLCJhcmlhTGFiZWxNZXNzYWdlIiwiaW5pdCIsImFwcGVuZCIsImNvbnRhaW5lckVsIiwid3JhcHBlckVsIiwiYXV0b3BsYXkiLCJwYWdpbmF0aW9uRWwiLCJkb2N1bWVudCIsImRlc3Ryb3kiLCJyZW1vdmUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/a11y.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/autoplay.mjs":
/*!**************************************************!*\
  !*** ./node_modules/swiper/modules/autoplay.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Autoplay)\n/* harmony export */ });\n/* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/ssr-window.esm.mjs */ \"(ssr)/./node_modules/swiper/shared/ssr-window.esm.mjs\");\n\n/* eslint no-underscore-dangle: \"off\" */ /* eslint no-use-before-define: \"off\" */ function Autoplay({ swiper, extendParams, on, emit, params }) {\n    swiper.autoplay = {\n        running: false,\n        paused: false,\n        timeLeft: 0\n    };\n    extendParams({\n        autoplay: {\n            enabled: false,\n            delay: 3000,\n            waitForTransition: true,\n            disableOnInteraction: false,\n            stopOnLastSlide: false,\n            reverseDirection: false,\n            pauseOnMouseEnter: false\n        }\n    });\n    let timeout;\n    let raf;\n    let autoplayDelayTotal = params && params.autoplay ? params.autoplay.delay : 3000;\n    let autoplayDelayCurrent = params && params.autoplay ? params.autoplay.delay : 3000;\n    let autoplayTimeLeft;\n    let autoplayStartTime = new Date().getTime();\n    let wasPaused;\n    let isTouched;\n    let pausedByTouch;\n    let touchStartTimeout;\n    let slideChanged;\n    let pausedByInteraction;\n    let pausedByPointerEnter;\n    function onTransitionEnd(e) {\n        if (!swiper || swiper.destroyed || !swiper.wrapperEl) return;\n        if (e.target !== swiper.wrapperEl) return;\n        swiper.wrapperEl.removeEventListener(\"transitionend\", onTransitionEnd);\n        if (pausedByPointerEnter || e.detail && e.detail.bySwiperTouchMove) {\n            return;\n        }\n        resume();\n    }\n    const calcTimeLeft = ()=>{\n        if (swiper.destroyed || !swiper.autoplay.running) return;\n        if (swiper.autoplay.paused) {\n            wasPaused = true;\n        } else if (wasPaused) {\n            autoplayDelayCurrent = autoplayTimeLeft;\n            wasPaused = false;\n        }\n        const timeLeft = swiper.autoplay.paused ? autoplayTimeLeft : autoplayStartTime + autoplayDelayCurrent - new Date().getTime();\n        swiper.autoplay.timeLeft = timeLeft;\n        emit(\"autoplayTimeLeft\", timeLeft, timeLeft / autoplayDelayTotal);\n        raf = requestAnimationFrame(()=>{\n            calcTimeLeft();\n        });\n    };\n    const getSlideDelay = ()=>{\n        let activeSlideEl;\n        if (swiper.virtual && swiper.params.virtual.enabled) {\n            activeSlideEl = swiper.slides.find((slideEl)=>slideEl.classList.contains(\"swiper-slide-active\"));\n        } else {\n            activeSlideEl = swiper.slides[swiper.activeIndex];\n        }\n        if (!activeSlideEl) return undefined;\n        const currentSlideDelay = parseInt(activeSlideEl.getAttribute(\"data-swiper-autoplay\"), 10);\n        return currentSlideDelay;\n    };\n    const run = (delayForce)=>{\n        if (swiper.destroyed || !swiper.autoplay.running) return;\n        cancelAnimationFrame(raf);\n        calcTimeLeft();\n        let delay = typeof delayForce === \"undefined\" ? swiper.params.autoplay.delay : delayForce;\n        autoplayDelayTotal = swiper.params.autoplay.delay;\n        autoplayDelayCurrent = swiper.params.autoplay.delay;\n        const currentSlideDelay = getSlideDelay();\n        if (!Number.isNaN(currentSlideDelay) && currentSlideDelay > 0 && typeof delayForce === \"undefined\") {\n            delay = currentSlideDelay;\n            autoplayDelayTotal = currentSlideDelay;\n            autoplayDelayCurrent = currentSlideDelay;\n        }\n        autoplayTimeLeft = delay;\n        const speed = swiper.params.speed;\n        const proceed = ()=>{\n            if (!swiper || swiper.destroyed) return;\n            if (swiper.params.autoplay.reverseDirection) {\n                if (!swiper.isBeginning || swiper.params.loop || swiper.params.rewind) {\n                    swiper.slidePrev(speed, true, true);\n                    emit(\"autoplay\");\n                } else if (!swiper.params.autoplay.stopOnLastSlide) {\n                    swiper.slideTo(swiper.slides.length - 1, speed, true, true);\n                    emit(\"autoplay\");\n                }\n            } else {\n                if (!swiper.isEnd || swiper.params.loop || swiper.params.rewind) {\n                    swiper.slideNext(speed, true, true);\n                    emit(\"autoplay\");\n                } else if (!swiper.params.autoplay.stopOnLastSlide) {\n                    swiper.slideTo(0, speed, true, true);\n                    emit(\"autoplay\");\n                }\n            }\n            if (swiper.params.cssMode) {\n                autoplayStartTime = new Date().getTime();\n                requestAnimationFrame(()=>{\n                    run();\n                });\n            }\n        };\n        if (delay > 0) {\n            clearTimeout(timeout);\n            timeout = setTimeout(()=>{\n                proceed();\n            }, delay);\n        } else {\n            requestAnimationFrame(()=>{\n                proceed();\n            });\n        }\n        // eslint-disable-next-line\n        return delay;\n    };\n    const start = ()=>{\n        autoplayStartTime = new Date().getTime();\n        swiper.autoplay.running = true;\n        run();\n        emit(\"autoplayStart\");\n    };\n    const stop = ()=>{\n        swiper.autoplay.running = false;\n        clearTimeout(timeout);\n        cancelAnimationFrame(raf);\n        emit(\"autoplayStop\");\n    };\n    const pause = (internal, reset)=>{\n        if (swiper.destroyed || !swiper.autoplay.running) return;\n        clearTimeout(timeout);\n        if (!internal) {\n            pausedByInteraction = true;\n        }\n        const proceed = ()=>{\n            emit(\"autoplayPause\");\n            if (swiper.params.autoplay.waitForTransition) {\n                swiper.wrapperEl.addEventListener(\"transitionend\", onTransitionEnd);\n            } else {\n                resume();\n            }\n        };\n        swiper.autoplay.paused = true;\n        if (reset) {\n            if (slideChanged) {\n                autoplayTimeLeft = swiper.params.autoplay.delay;\n            }\n            slideChanged = false;\n            proceed();\n            return;\n        }\n        const delay = autoplayTimeLeft || swiper.params.autoplay.delay;\n        autoplayTimeLeft = delay - (new Date().getTime() - autoplayStartTime);\n        if (swiper.isEnd && autoplayTimeLeft < 0 && !swiper.params.loop) return;\n        if (autoplayTimeLeft < 0) autoplayTimeLeft = 0;\n        proceed();\n    };\n    const resume = ()=>{\n        if (swiper.isEnd && autoplayTimeLeft < 0 && !swiper.params.loop || swiper.destroyed || !swiper.autoplay.running) return;\n        autoplayStartTime = new Date().getTime();\n        if (pausedByInteraction) {\n            pausedByInteraction = false;\n            run(autoplayTimeLeft);\n        } else {\n            run();\n        }\n        swiper.autoplay.paused = false;\n        emit(\"autoplayResume\");\n    };\n    const onVisibilityChange = ()=>{\n        if (swiper.destroyed || !swiper.autoplay.running) return;\n        const document = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n        if (document.visibilityState === \"hidden\") {\n            pausedByInteraction = true;\n            pause(true);\n        }\n        if (document.visibilityState === \"visible\") {\n            resume();\n        }\n    };\n    const onPointerEnter = (e)=>{\n        if (e.pointerType !== \"mouse\") return;\n        pausedByInteraction = true;\n        pausedByPointerEnter = true;\n        if (swiper.animating || swiper.autoplay.paused) return;\n        pause(true);\n    };\n    const onPointerLeave = (e)=>{\n        if (e.pointerType !== \"mouse\") return;\n        pausedByPointerEnter = false;\n        if (swiper.autoplay.paused) {\n            resume();\n        }\n    };\n    const attachMouseEvents = ()=>{\n        if (swiper.params.autoplay.pauseOnMouseEnter) {\n            swiper.el.addEventListener(\"pointerenter\", onPointerEnter);\n            swiper.el.addEventListener(\"pointerleave\", onPointerLeave);\n        }\n    };\n    const detachMouseEvents = ()=>{\n        if (swiper.el && typeof swiper.el !== \"string\") {\n            swiper.el.removeEventListener(\"pointerenter\", onPointerEnter);\n            swiper.el.removeEventListener(\"pointerleave\", onPointerLeave);\n        }\n    };\n    const attachDocumentEvents = ()=>{\n        const document = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n        document.addEventListener(\"visibilitychange\", onVisibilityChange);\n    };\n    const detachDocumentEvents = ()=>{\n        const document = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n        document.removeEventListener(\"visibilitychange\", onVisibilityChange);\n    };\n    on(\"init\", ()=>{\n        if (swiper.params.autoplay.enabled) {\n            attachMouseEvents();\n            attachDocumentEvents();\n            start();\n        }\n    });\n    on(\"destroy\", ()=>{\n        detachMouseEvents();\n        detachDocumentEvents();\n        if (swiper.autoplay.running) {\n            stop();\n        }\n    });\n    on(\"_freeModeStaticRelease\", ()=>{\n        if (pausedByTouch || pausedByInteraction) {\n            resume();\n        }\n    });\n    on(\"_freeModeNoMomentumRelease\", ()=>{\n        if (!swiper.params.autoplay.disableOnInteraction) {\n            pause(true, true);\n        } else {\n            stop();\n        }\n    });\n    on(\"beforeTransitionStart\", (_s, speed, internal)=>{\n        if (swiper.destroyed || !swiper.autoplay.running) return;\n        if (internal || !swiper.params.autoplay.disableOnInteraction) {\n            pause(true, true);\n        } else {\n            stop();\n        }\n    });\n    on(\"sliderFirstMove\", ()=>{\n        if (swiper.destroyed || !swiper.autoplay.running) return;\n        if (swiper.params.autoplay.disableOnInteraction) {\n            stop();\n            return;\n        }\n        isTouched = true;\n        pausedByTouch = false;\n        pausedByInteraction = false;\n        touchStartTimeout = setTimeout(()=>{\n            pausedByInteraction = true;\n            pausedByTouch = true;\n            pause(true);\n        }, 200);\n    });\n    on(\"touchEnd\", ()=>{\n        if (swiper.destroyed || !swiper.autoplay.running || !isTouched) return;\n        clearTimeout(touchStartTimeout);\n        clearTimeout(timeout);\n        if (swiper.params.autoplay.disableOnInteraction) {\n            pausedByTouch = false;\n            isTouched = false;\n            return;\n        }\n        if (pausedByTouch && swiper.params.cssMode) resume();\n        pausedByTouch = false;\n        isTouched = false;\n    });\n    on(\"slideChange\", ()=>{\n        if (swiper.destroyed || !swiper.autoplay.running) return;\n        slideChanged = true;\n    });\n    Object.assign(swiper.autoplay, {\n        start,\n        stop,\n        pause,\n        resume\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/autoplay.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/controller.mjs":
/*!****************************************************!*\
  !*** ./node_modules/swiper/modules/controller.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Controller)\n/* harmony export */ });\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\n/* eslint no-bitwise: [\"error\", { \"allow\": [\">>\"] }] */ function Controller({ swiper, extendParams, on }) {\n    extendParams({\n        controller: {\n            control: undefined,\n            inverse: false,\n            by: \"slide\" // or 'container'\n        }\n    });\n    swiper.controller = {\n        control: undefined\n    };\n    function LinearSpline(x, y) {\n        const binarySearch = function search() {\n            let maxIndex;\n            let minIndex;\n            let guess;\n            return (array, val)=>{\n                minIndex = -1;\n                maxIndex = array.length;\n                while(maxIndex - minIndex > 1){\n                    guess = maxIndex + minIndex >> 1;\n                    if (array[guess] <= val) {\n                        minIndex = guess;\n                    } else {\n                        maxIndex = guess;\n                    }\n                }\n                return maxIndex;\n            };\n        }();\n        this.x = x;\n        this.y = y;\n        this.lastIndex = x.length - 1;\n        // Given an x value (x2), return the expected y2 value:\n        // (x1,y1) is the known point before given value,\n        // (x3,y3) is the known point after given value.\n        let i1;\n        let i3;\n        this.interpolate = function interpolate(x2) {\n            if (!x2) return 0;\n            // Get the indexes of x1 and x3 (the array indexes before and after given x2):\n            i3 = binarySearch(this.x, x2);\n            i1 = i3 - 1;\n            // We have our indexes i1 & i3, so we can calculate already:\n            // y2 := ((x2−x1) × (y3−y1)) ÷ (x3−x1) + y1\n            return (x2 - this.x[i1]) * (this.y[i3] - this.y[i1]) / (this.x[i3] - this.x[i1]) + this.y[i1];\n        };\n        return this;\n    }\n    function getInterpolateFunction(c) {\n        swiper.controller.spline = swiper.params.loop ? new LinearSpline(swiper.slidesGrid, c.slidesGrid) : new LinearSpline(swiper.snapGrid, c.snapGrid);\n    }\n    function setTranslate(_t, byController) {\n        const controlled = swiper.controller.control;\n        let multiplier;\n        let controlledTranslate;\n        const Swiper = swiper.constructor;\n        function setControlledTranslate(c) {\n            if (c.destroyed) return;\n            // this will create an Interpolate function based on the snapGrids\n            // x is the Grid of the scrolled scroller and y will be the controlled scroller\n            // it makes sense to create this only once and recall it for the interpolation\n            // the function does a lot of value caching for performance\n            const translate = swiper.rtlTranslate ? -swiper.translate : swiper.translate;\n            if (swiper.params.controller.by === \"slide\") {\n                getInterpolateFunction(c);\n                // i am not sure why the values have to be multiplicated this way, tried to invert the snapGrid\n                // but it did not work out\n                controlledTranslate = -swiper.controller.spline.interpolate(-translate);\n            }\n            if (!controlledTranslate || swiper.params.controller.by === \"container\") {\n                multiplier = (c.maxTranslate() - c.minTranslate()) / (swiper.maxTranslate() - swiper.minTranslate());\n                if (Number.isNaN(multiplier) || !Number.isFinite(multiplier)) {\n                    multiplier = 1;\n                }\n                controlledTranslate = (translate - swiper.minTranslate()) * multiplier + c.minTranslate();\n            }\n            if (swiper.params.controller.inverse) {\n                controlledTranslate = c.maxTranslate() - controlledTranslate;\n            }\n            c.updateProgress(controlledTranslate);\n            c.setTranslate(controlledTranslate, swiper);\n            c.updateActiveIndex();\n            c.updateSlidesClasses();\n        }\n        if (Array.isArray(controlled)) {\n            for(let i = 0; i < controlled.length; i += 1){\n                if (controlled[i] !== byController && controlled[i] instanceof Swiper) {\n                    setControlledTranslate(controlled[i]);\n                }\n            }\n        } else if (controlled instanceof Swiper && byController !== controlled) {\n            setControlledTranslate(controlled);\n        }\n    }\n    function setTransition(duration, byController) {\n        const Swiper = swiper.constructor;\n        const controlled = swiper.controller.control;\n        let i;\n        function setControlledTransition(c) {\n            if (c.destroyed) return;\n            c.setTransition(duration, swiper);\n            if (duration !== 0) {\n                c.transitionStart();\n                if (c.params.autoHeight) {\n                    (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.n)(()=>{\n                        c.updateAutoHeight();\n                    });\n                }\n                (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(c.wrapperEl, ()=>{\n                    if (!controlled) return;\n                    c.transitionEnd();\n                });\n            }\n        }\n        if (Array.isArray(controlled)) {\n            for(i = 0; i < controlled.length; i += 1){\n                if (controlled[i] !== byController && controlled[i] instanceof Swiper) {\n                    setControlledTransition(controlled[i]);\n                }\n            }\n        } else if (controlled instanceof Swiper && byController !== controlled) {\n            setControlledTransition(controlled);\n        }\n    }\n    function removeSpline() {\n        if (!swiper.controller.control) return;\n        if (swiper.controller.spline) {\n            swiper.controller.spline = undefined;\n            delete swiper.controller.spline;\n        }\n    }\n    on(\"beforeInit\", ()=>{\n        if (false) {}\n        swiper.controller.control = swiper.params.controller.control;\n    });\n    on(\"update\", ()=>{\n        removeSpline();\n    });\n    on(\"resize\", ()=>{\n        removeSpline();\n    });\n    on(\"observerUpdate\", ()=>{\n        removeSpline();\n    });\n    on(\"setTranslate\", (_s, translate, byController)=>{\n        if (!swiper.controller.control || swiper.controller.control.destroyed) return;\n        swiper.controller.setTranslate(translate, byController);\n    });\n    on(\"setTransition\", (_s, duration, byController)=>{\n        if (!swiper.controller.control || swiper.controller.control.destroyed) return;\n        swiper.controller.setTransition(duration, byController);\n    });\n    Object.assign(swiper.controller, {\n        setTranslate,\n        setTransition\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/controller.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/effect-cards.mjs":
/*!******************************************************!*\
  !*** ./node_modules/swiper/modules/effect-cards.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ EffectCards)\n/* harmony export */ });\n/* harmony import */ var _shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/create-shadow.mjs */ \"(ssr)/./node_modules/swiper/shared/create-shadow.mjs\");\n/* harmony import */ var _shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/effect-init.mjs */ \"(ssr)/./node_modules/swiper/shared/effect-init.mjs\");\n/* harmony import */ var _shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/effect-target.mjs */ \"(ssr)/./node_modules/swiper/shared/effect-target.mjs\");\n/* harmony import */ var _shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/effect-virtual-transition-end.mjs */ \"(ssr)/./node_modules/swiper/shared/effect-virtual-transition-end.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\n\n\n\n\nfunction EffectCards({ swiper, extendParams, on }) {\n    extendParams({\n        cardsEffect: {\n            slideShadows: true,\n            rotate: true,\n            perSlideRotate: 2,\n            perSlideOffset: 8\n        }\n    });\n    const setTranslate = ()=>{\n        const { slides, activeIndex, rtlTranslate: rtl } = swiper;\n        const params = swiper.params.cardsEffect;\n        const { startTranslate, isTouched } = swiper.touchEventsData;\n        const currentTranslate = rtl ? -swiper.translate : swiper.translate;\n        for(let i = 0; i < slides.length; i += 1){\n            const slideEl = slides[i];\n            const slideProgress = slideEl.progress;\n            const progress = Math.min(Math.max(slideProgress, -4), 4);\n            let offset = slideEl.swiperSlideOffset;\n            if (swiper.params.centeredSlides && !swiper.params.cssMode) {\n                swiper.wrapperEl.style.transform = `translateX(${swiper.minTranslate()}px)`;\n            }\n            if (swiper.params.centeredSlides && swiper.params.cssMode) {\n                offset -= slides[0].swiperSlideOffset;\n            }\n            let tX = swiper.params.cssMode ? -offset - swiper.translate : -offset;\n            let tY = 0;\n            const tZ = -100 * Math.abs(progress);\n            let scale = 1;\n            let rotate = -params.perSlideRotate * progress;\n            let tXAdd = params.perSlideOffset - Math.abs(progress) * 0.75;\n            const slideIndex = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.from + i : i;\n            const isSwipeToNext = (slideIndex === activeIndex || slideIndex === activeIndex - 1) && progress > 0 && progress < 1 && (isTouched || swiper.params.cssMode) && currentTranslate < startTranslate;\n            const isSwipeToPrev = (slideIndex === activeIndex || slideIndex === activeIndex + 1) && progress < 0 && progress > -1 && (isTouched || swiper.params.cssMode) && currentTranslate > startTranslate;\n            if (isSwipeToNext || isSwipeToPrev) {\n                const subProgress = (1 - Math.abs((Math.abs(progress) - 0.5) / 0.5)) ** 0.5;\n                rotate += -28 * progress * subProgress;\n                scale += -0.5 * subProgress;\n                tXAdd += 96 * subProgress;\n                tY = `${(params.rotate || swiper.isHorizontal() ? -25 : 0) * subProgress * Math.abs(progress)}%`;\n            }\n            if (progress < 0) {\n                // next\n                tX = `calc(${tX}px ${rtl ? \"-\" : \"+\"} (${tXAdd * Math.abs(progress)}%))`;\n            } else if (progress > 0) {\n                // prev\n                tX = `calc(${tX}px ${rtl ? \"-\" : \"+\"} (-${tXAdd * Math.abs(progress)}%))`;\n            } else {\n                tX = `${tX}px`;\n            }\n            if (!swiper.isHorizontal()) {\n                const prevY = tY;\n                tY = tX;\n                tX = prevY;\n            }\n            const scaleString = progress < 0 ? `${1 + (1 - scale) * progress}` : `${1 - (1 - scale) * progress}`;\n            /* eslint-disable */ const transform = `\n        translate3d(${tX}, ${tY}, ${tZ}px)\n        rotateZ(${params.rotate ? rtl ? -rotate : rotate : 0}deg)\n        scale(${scaleString})\n      `;\n            /* eslint-enable */ if (params.slideShadows) {\n                // Set shadows\n                let shadowEl = slideEl.querySelector(\".swiper-slide-shadow\");\n                if (!shadowEl) {\n                    shadowEl = (0,_shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(\"cards\", slideEl);\n                }\n                if (shadowEl) shadowEl.style.opacity = Math.min(Math.max((Math.abs(progress) - 0.5) / 0.5, 0), 1);\n            }\n            slideEl.style.zIndex = -Math.abs(Math.round(slideProgress)) + slides.length;\n            const targetEl = (0,_shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(params, slideEl);\n            targetEl.style.transform = transform;\n        }\n    };\n    const setTransition = (duration)=>{\n        const transformElements = swiper.slides.map((slideEl)=>(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.g)(slideEl));\n        transformElements.forEach((el)=>{\n            el.style.transitionDuration = `${duration}ms`;\n            el.querySelectorAll(\".swiper-slide-shadow\").forEach((shadowEl)=>{\n                shadowEl.style.transitionDuration = `${duration}ms`;\n            });\n        });\n        (0,_shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_3__.e)({\n            swiper,\n            duration,\n            transformElements\n        });\n    };\n    (0,_shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__.e)({\n        effect: \"cards\",\n        swiper,\n        on,\n        setTranslate,\n        setTransition,\n        perspective: ()=>true,\n        overwriteParams: ()=>({\n                _loopSwapReset: false,\n                watchSlidesProgress: true,\n                loopAdditionalSlides: swiper.params.cardsEffect.rotate ? 3 : 2,\n                centeredSlides: true,\n                virtualTranslate: !swiper.params.cssMode\n            })\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/effect-cards.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/effect-coverflow.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/swiper/modules/effect-coverflow.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ EffectCoverflow)\n/* harmony export */ });\n/* harmony import */ var _shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/create-shadow.mjs */ \"(ssr)/./node_modules/swiper/shared/create-shadow.mjs\");\n/* harmony import */ var _shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/effect-init.mjs */ \"(ssr)/./node_modules/swiper/shared/effect-init.mjs\");\n/* harmony import */ var _shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/effect-target.mjs */ \"(ssr)/./node_modules/swiper/shared/effect-target.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\n\n\n\nfunction EffectCoverflow({ swiper, extendParams, on }) {\n    extendParams({\n        coverflowEffect: {\n            rotate: 50,\n            stretch: 0,\n            depth: 100,\n            scale: 1,\n            modifier: 1,\n            slideShadows: true\n        }\n    });\n    const setTranslate = ()=>{\n        const { width: swiperWidth, height: swiperHeight, slides, slidesSizesGrid } = swiper;\n        const params = swiper.params.coverflowEffect;\n        const isHorizontal = swiper.isHorizontal();\n        const transform = swiper.translate;\n        const center = isHorizontal ? -transform + swiperWidth / 2 : -transform + swiperHeight / 2;\n        const rotate = isHorizontal ? params.rotate : -params.rotate;\n        const translate = params.depth;\n        const r = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(swiper);\n        // Each slide offset from center\n        for(let i = 0, length = slides.length; i < length; i += 1){\n            const slideEl = slides[i];\n            const slideSize = slidesSizesGrid[i];\n            const slideOffset = slideEl.swiperSlideOffset;\n            const centerOffset = (center - slideOffset - slideSize / 2) / slideSize;\n            const offsetMultiplier = typeof params.modifier === \"function\" ? params.modifier(centerOffset) : centerOffset * params.modifier;\n            let rotateY = isHorizontal ? rotate * offsetMultiplier : 0;\n            let rotateX = isHorizontal ? 0 : rotate * offsetMultiplier;\n            // var rotateZ = 0\n            let translateZ = -translate * Math.abs(offsetMultiplier);\n            let stretch = params.stretch;\n            // Allow percentage to make a relative stretch for responsive sliders\n            if (typeof stretch === \"string\" && stretch.indexOf(\"%\") !== -1) {\n                stretch = parseFloat(params.stretch) / 100 * slideSize;\n            }\n            let translateY = isHorizontal ? 0 : stretch * offsetMultiplier;\n            let translateX = isHorizontal ? stretch * offsetMultiplier : 0;\n            let scale = 1 - (1 - params.scale) * Math.abs(offsetMultiplier);\n            // Fix for ultra small values\n            if (Math.abs(translateX) < 0.001) translateX = 0;\n            if (Math.abs(translateY) < 0.001) translateY = 0;\n            if (Math.abs(translateZ) < 0.001) translateZ = 0;\n            if (Math.abs(rotateY) < 0.001) rotateY = 0;\n            if (Math.abs(rotateX) < 0.001) rotateX = 0;\n            if (Math.abs(scale) < 0.001) scale = 0;\n            const slideTransform = `translate3d(${translateX}px,${translateY}px,${translateZ}px)  rotateX(${r(rotateX)}deg) rotateY(${r(rotateY)}deg) scale(${scale})`;\n            const targetEl = (0,_shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(params, slideEl);\n            targetEl.style.transform = slideTransform;\n            slideEl.style.zIndex = -Math.abs(Math.round(offsetMultiplier)) + 1;\n            if (params.slideShadows) {\n                // Set shadows\n                let shadowBeforeEl = isHorizontal ? slideEl.querySelector(\".swiper-slide-shadow-left\") : slideEl.querySelector(\".swiper-slide-shadow-top\");\n                let shadowAfterEl = isHorizontal ? slideEl.querySelector(\".swiper-slide-shadow-right\") : slideEl.querySelector(\".swiper-slide-shadow-bottom\");\n                if (!shadowBeforeEl) {\n                    shadowBeforeEl = (0,_shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(\"coverflow\", slideEl, isHorizontal ? \"left\" : \"top\");\n                }\n                if (!shadowAfterEl) {\n                    shadowAfterEl = (0,_shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(\"coverflow\", slideEl, isHorizontal ? \"right\" : \"bottom\");\n                }\n                if (shadowBeforeEl) shadowBeforeEl.style.opacity = offsetMultiplier > 0 ? offsetMultiplier : 0;\n                if (shadowAfterEl) shadowAfterEl.style.opacity = -offsetMultiplier > 0 ? -offsetMultiplier : 0;\n            }\n        }\n    };\n    const setTransition = (duration)=>{\n        const transformElements = swiper.slides.map((slideEl)=>(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_3__.g)(slideEl));\n        transformElements.forEach((el)=>{\n            el.style.transitionDuration = `${duration}ms`;\n            el.querySelectorAll(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").forEach((shadowEl)=>{\n                shadowEl.style.transitionDuration = `${duration}ms`;\n            });\n        });\n    };\n    (0,_shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__.e)({\n        effect: \"coverflow\",\n        swiper,\n        on,\n        setTranslate,\n        setTransition,\n        perspective: ()=>true,\n        overwriteParams: ()=>({\n                watchSlidesProgress: true\n            })\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvZWZmZWN0LWNvdmVyZmxvdy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBZ0U7QUFDSjtBQUNJO0FBQ2tCO0FBRWxGLFNBQVNTLGdCQUFnQixFQUN2QkMsTUFBTSxFQUNOQyxZQUFZLEVBQ1pDLEVBQUUsRUFDSDtJQUNDRCxhQUFhO1FBQ1hFLGlCQUFpQjtZQUNmQyxRQUFRO1lBQ1JDLFNBQVM7WUFDVEMsT0FBTztZQUNQQyxPQUFPO1lBQ1BDLFVBQVU7WUFDVkMsY0FBYztRQUNoQjtJQUNGO0lBQ0EsTUFBTUMsZUFBZTtRQUNuQixNQUFNLEVBQ0pDLE9BQU9DLFdBQVcsRUFDbEJDLFFBQVFDLFlBQVksRUFDcEJDLE1BQU0sRUFDTkMsZUFBZSxFQUNoQixHQUFHaEI7UUFDSixNQUFNaUIsU0FBU2pCLE9BQU9pQixNQUFNLENBQUNkLGVBQWU7UUFDNUMsTUFBTWUsZUFBZWxCLE9BQU9rQixZQUFZO1FBQ3hDLE1BQU1DLFlBQVluQixPQUFPb0IsU0FBUztRQUNsQyxNQUFNQyxTQUFTSCxlQUFlLENBQUNDLFlBQVlQLGNBQWMsSUFBSSxDQUFDTyxZQUFZTCxlQUFlO1FBQ3pGLE1BQU1WLFNBQVNjLGVBQWVELE9BQU9iLE1BQU0sR0FBRyxDQUFDYSxPQUFPYixNQUFNO1FBQzVELE1BQU1nQixZQUFZSCxPQUFPWCxLQUFLO1FBQzlCLE1BQU1nQixJQUFJeEIsb0RBQVlBLENBQUNFO1FBQ3ZCLGdDQUFnQztRQUNoQyxJQUFLLElBQUl1QixJQUFJLEdBQUdDLFNBQVNULE9BQU9TLE1BQU0sRUFBRUQsSUFBSUMsUUFBUUQsS0FBSyxFQUFHO1lBQzFELE1BQU1FLFVBQVVWLE1BQU0sQ0FBQ1EsRUFBRTtZQUN6QixNQUFNRyxZQUFZVixlQUFlLENBQUNPLEVBQUU7WUFDcEMsTUFBTUksY0FBY0YsUUFBUUcsaUJBQWlCO1lBQzdDLE1BQU1DLGVBQWUsQ0FBQ1IsU0FBU00sY0FBY0QsWUFBWSxLQUFLQTtZQUM5RCxNQUFNSSxtQkFBbUIsT0FBT2IsT0FBT1QsUUFBUSxLQUFLLGFBQWFTLE9BQU9ULFFBQVEsQ0FBQ3FCLGdCQUFnQkEsZUFBZVosT0FBT1QsUUFBUTtZQUMvSCxJQUFJdUIsVUFBVWIsZUFBZWQsU0FBUzBCLG1CQUFtQjtZQUN6RCxJQUFJRSxVQUFVZCxlQUFlLElBQUlkLFNBQVMwQjtZQUMxQyxrQkFBa0I7WUFDbEIsSUFBSUcsYUFBYSxDQUFDYixZQUFZYyxLQUFLQyxHQUFHLENBQUNMO1lBQ3ZDLElBQUl6QixVQUFVWSxPQUFPWixPQUFPO1lBQzVCLHFFQUFxRTtZQUNyRSxJQUFJLE9BQU9BLFlBQVksWUFBWUEsUUFBUStCLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRztnQkFDOUQvQixVQUFVZ0MsV0FBV3BCLE9BQU9aLE9BQU8sSUFBSSxNQUFNcUI7WUFDL0M7WUFDQSxJQUFJWSxhQUFhcEIsZUFBZSxJQUFJYixVQUFVeUI7WUFDOUMsSUFBSVMsYUFBYXJCLGVBQWViLFVBQVV5QixtQkFBbUI7WUFDN0QsSUFBSXZCLFFBQVEsSUFBSSxDQUFDLElBQUlVLE9BQU9WLEtBQUssSUFBSTJCLEtBQUtDLEdBQUcsQ0FBQ0w7WUFFOUMsNkJBQTZCO1lBQzdCLElBQUlJLEtBQUtDLEdBQUcsQ0FBQ0ksY0FBYyxPQUFPQSxhQUFhO1lBQy9DLElBQUlMLEtBQUtDLEdBQUcsQ0FBQ0csY0FBYyxPQUFPQSxhQUFhO1lBQy9DLElBQUlKLEtBQUtDLEdBQUcsQ0FBQ0YsY0FBYyxPQUFPQSxhQUFhO1lBQy9DLElBQUlDLEtBQUtDLEdBQUcsQ0FBQ0osV0FBVyxPQUFPQSxVQUFVO1lBQ3pDLElBQUlHLEtBQUtDLEdBQUcsQ0FBQ0gsV0FBVyxPQUFPQSxVQUFVO1lBQ3pDLElBQUlFLEtBQUtDLEdBQUcsQ0FBQzVCLFNBQVMsT0FBT0EsUUFBUTtZQUNyQyxNQUFNaUMsaUJBQWlCLENBQUMsWUFBWSxFQUFFRCxXQUFXLEdBQUcsRUFBRUQsV0FBVyxHQUFHLEVBQUVMLFdBQVcsYUFBYSxFQUFFWCxFQUFFVSxTQUFTLGFBQWEsRUFBRVYsRUFBRVMsU0FBUyxXQUFXLEVBQUV4QixNQUFNLENBQUMsQ0FBQztZQUMxSixNQUFNa0MsV0FBVy9DLDREQUFZQSxDQUFDdUIsUUFBUVE7WUFDdENnQixTQUFTQyxLQUFLLENBQUN2QixTQUFTLEdBQUdxQjtZQUMzQmYsUUFBUWlCLEtBQUssQ0FBQ0MsTUFBTSxHQUFHLENBQUNULEtBQUtDLEdBQUcsQ0FBQ0QsS0FBS1UsS0FBSyxDQUFDZCxxQkFBcUI7WUFDakUsSUFBSWIsT0FBT1IsWUFBWSxFQUFFO2dCQUN2QixjQUFjO2dCQUNkLElBQUlvQyxpQkFBaUIzQixlQUFlTyxRQUFRcUIsYUFBYSxDQUFDLCtCQUErQnJCLFFBQVFxQixhQUFhLENBQUM7Z0JBQy9HLElBQUlDLGdCQUFnQjdCLGVBQWVPLFFBQVFxQixhQUFhLENBQUMsZ0NBQWdDckIsUUFBUXFCLGFBQWEsQ0FBQztnQkFDL0csSUFBSSxDQUFDRCxnQkFBZ0I7b0JBQ25CQSxpQkFBaUJ0RCw0REFBWUEsQ0FBQyxhQUFha0MsU0FBU1AsZUFBZSxTQUFTO2dCQUM5RTtnQkFDQSxJQUFJLENBQUM2QixlQUFlO29CQUNsQkEsZ0JBQWdCeEQsNERBQVlBLENBQUMsYUFBYWtDLFNBQVNQLGVBQWUsVUFBVTtnQkFDOUU7Z0JBQ0EsSUFBSTJCLGdCQUFnQkEsZUFBZUgsS0FBSyxDQUFDTSxPQUFPLEdBQUdsQixtQkFBbUIsSUFBSUEsbUJBQW1CO2dCQUM3RixJQUFJaUIsZUFBZUEsY0FBY0wsS0FBSyxDQUFDTSxPQUFPLEdBQUcsQ0FBQ2xCLG1CQUFtQixJQUFJLENBQUNBLG1CQUFtQjtZQUMvRjtRQUNGO0lBQ0Y7SUFDQSxNQUFNbUIsZ0JBQWdCQyxDQUFBQTtRQUNwQixNQUFNQyxvQkFBb0JuRCxPQUFPZSxNQUFNLENBQUNxQyxHQUFHLENBQUMzQixDQUFBQSxVQUFXN0Isb0RBQW1CQSxDQUFDNkI7UUFDM0UwQixrQkFBa0JFLE9BQU8sQ0FBQ0MsQ0FBQUE7WUFDeEJBLEdBQUdaLEtBQUssQ0FBQ2Esa0JBQWtCLEdBQUcsQ0FBQyxFQUFFTCxTQUFTLEVBQUUsQ0FBQztZQUM3Q0ksR0FBR0UsZ0JBQWdCLENBQUMsZ0hBQWdISCxPQUFPLENBQUNJLENBQUFBO2dCQUMxSUEsU0FBU2YsS0FBSyxDQUFDYSxrQkFBa0IsR0FBRyxDQUFDLEVBQUVMLFNBQVMsRUFBRSxDQUFDO1lBQ3JEO1FBQ0Y7SUFDRjtJQUNBekQsMERBQVVBLENBQUM7UUFDVGlFLFFBQVE7UUFDUjFEO1FBQ0FFO1FBQ0FRO1FBQ0F1QztRQUNBVSxhQUFhLElBQU07UUFDbkJDLGlCQUFpQixJQUFPO2dCQUN0QkMscUJBQXFCO1lBQ3ZCO0lBQ0Y7QUFDRjtBQUVzQyIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJidWNrcy10dXJrZXktY2xvbmUvLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvZWZmZWN0LWNvdmVyZmxvdy5tanM/NjAxMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjIGFzIGNyZWF0ZVNoYWRvdyB9IGZyb20gJy4uL3NoYXJlZC9jcmVhdGUtc2hhZG93Lm1qcyc7XG5pbXBvcnQgeyBlIGFzIGVmZmVjdEluaXQgfSBmcm9tICcuLi9zaGFyZWQvZWZmZWN0LWluaXQubWpzJztcbmltcG9ydCB7IGUgYXMgZWZmZWN0VGFyZ2V0IH0gZnJvbSAnLi4vc2hhcmVkL2VmZmVjdC10YXJnZXQubWpzJztcbmltcG9ydCB7IGcgYXMgZ2V0U2xpZGVUcmFuc2Zvcm1FbCwgYSBhcyBnZXRSb3RhdGVGaXggfSBmcm9tICcuLi9zaGFyZWQvdXRpbHMubWpzJztcblxuZnVuY3Rpb24gRWZmZWN0Q292ZXJmbG93KHtcbiAgc3dpcGVyLFxuICBleHRlbmRQYXJhbXMsXG4gIG9uXG59KSB7XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgY292ZXJmbG93RWZmZWN0OiB7XG4gICAgICByb3RhdGU6IDUwLFxuICAgICAgc3RyZXRjaDogMCxcbiAgICAgIGRlcHRoOiAxMDAsXG4gICAgICBzY2FsZTogMSxcbiAgICAgIG1vZGlmaWVyOiAxLFxuICAgICAgc2xpZGVTaGFkb3dzOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgY29uc3Qgc2V0VHJhbnNsYXRlID0gKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHdpZHRoOiBzd2lwZXJXaWR0aCxcbiAgICAgIGhlaWdodDogc3dpcGVySGVpZ2h0LFxuICAgICAgc2xpZGVzLFxuICAgICAgc2xpZGVzU2l6ZXNHcmlkXG4gICAgfSA9IHN3aXBlcjtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmNvdmVyZmxvd0VmZmVjdDtcbiAgICBjb25zdCBpc0hvcml6b250YWwgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCk7XG4gICAgY29uc3QgdHJhbnNmb3JtID0gc3dpcGVyLnRyYW5zbGF0ZTtcbiAgICBjb25zdCBjZW50ZXIgPSBpc0hvcml6b250YWwgPyAtdHJhbnNmb3JtICsgc3dpcGVyV2lkdGggLyAyIDogLXRyYW5zZm9ybSArIHN3aXBlckhlaWdodCAvIDI7XG4gICAgY29uc3Qgcm90YXRlID0gaXNIb3Jpem9udGFsID8gcGFyYW1zLnJvdGF0ZSA6IC1wYXJhbXMucm90YXRlO1xuICAgIGNvbnN0IHRyYW5zbGF0ZSA9IHBhcmFtcy5kZXB0aDtcbiAgICBjb25zdCByID0gZ2V0Um90YXRlRml4KHN3aXBlcik7XG4gICAgLy8gRWFjaCBzbGlkZSBvZmZzZXQgZnJvbSBjZW50ZXJcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuZ3RoID0gc2xpZGVzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBzbGlkZUVsID0gc2xpZGVzW2ldO1xuICAgICAgY29uc3Qgc2xpZGVTaXplID0gc2xpZGVzU2l6ZXNHcmlkW2ldO1xuICAgICAgY29uc3Qgc2xpZGVPZmZzZXQgPSBzbGlkZUVsLnN3aXBlclNsaWRlT2Zmc2V0O1xuICAgICAgY29uc3QgY2VudGVyT2Zmc2V0ID0gKGNlbnRlciAtIHNsaWRlT2Zmc2V0IC0gc2xpZGVTaXplIC8gMikgLyBzbGlkZVNpemU7XG4gICAgICBjb25zdCBvZmZzZXRNdWx0aXBsaWVyID0gdHlwZW9mIHBhcmFtcy5tb2RpZmllciA9PT0gJ2Z1bmN0aW9uJyA/IHBhcmFtcy5tb2RpZmllcihjZW50ZXJPZmZzZXQpIDogY2VudGVyT2Zmc2V0ICogcGFyYW1zLm1vZGlmaWVyO1xuICAgICAgbGV0IHJvdGF0ZVkgPSBpc0hvcml6b250YWwgPyByb3RhdGUgKiBvZmZzZXRNdWx0aXBsaWVyIDogMDtcbiAgICAgIGxldCByb3RhdGVYID0gaXNIb3Jpem9udGFsID8gMCA6IHJvdGF0ZSAqIG9mZnNldE11bHRpcGxpZXI7XG4gICAgICAvLyB2YXIgcm90YXRlWiA9IDBcbiAgICAgIGxldCB0cmFuc2xhdGVaID0gLXRyYW5zbGF0ZSAqIE1hdGguYWJzKG9mZnNldE11bHRpcGxpZXIpO1xuICAgICAgbGV0IHN0cmV0Y2ggPSBwYXJhbXMuc3RyZXRjaDtcbiAgICAgIC8vIEFsbG93IHBlcmNlbnRhZ2UgdG8gbWFrZSBhIHJlbGF0aXZlIHN0cmV0Y2ggZm9yIHJlc3BvbnNpdmUgc2xpZGVyc1xuICAgICAgaWYgKHR5cGVvZiBzdHJldGNoID09PSAnc3RyaW5nJyAmJiBzdHJldGNoLmluZGV4T2YoJyUnKSAhPT0gLTEpIHtcbiAgICAgICAgc3RyZXRjaCA9IHBhcnNlRmxvYXQocGFyYW1zLnN0cmV0Y2gpIC8gMTAwICogc2xpZGVTaXplO1xuICAgICAgfVxuICAgICAgbGV0IHRyYW5zbGF0ZVkgPSBpc0hvcml6b250YWwgPyAwIDogc3RyZXRjaCAqIG9mZnNldE11bHRpcGxpZXI7XG4gICAgICBsZXQgdHJhbnNsYXRlWCA9IGlzSG9yaXpvbnRhbCA/IHN0cmV0Y2ggKiBvZmZzZXRNdWx0aXBsaWVyIDogMDtcbiAgICAgIGxldCBzY2FsZSA9IDEgLSAoMSAtIHBhcmFtcy5zY2FsZSkgKiBNYXRoLmFicyhvZmZzZXRNdWx0aXBsaWVyKTtcblxuICAgICAgLy8gRml4IGZvciB1bHRyYSBzbWFsbCB2YWx1ZXNcbiAgICAgIGlmIChNYXRoLmFicyh0cmFuc2xhdGVYKSA8IDAuMDAxKSB0cmFuc2xhdGVYID0gMDtcbiAgICAgIGlmIChNYXRoLmFicyh0cmFuc2xhdGVZKSA8IDAuMDAxKSB0cmFuc2xhdGVZID0gMDtcbiAgICAgIGlmIChNYXRoLmFicyh0cmFuc2xhdGVaKSA8IDAuMDAxKSB0cmFuc2xhdGVaID0gMDtcbiAgICAgIGlmIChNYXRoLmFicyhyb3RhdGVZKSA8IDAuMDAxKSByb3RhdGVZID0gMDtcbiAgICAgIGlmIChNYXRoLmFicyhyb3RhdGVYKSA8IDAuMDAxKSByb3RhdGVYID0gMDtcbiAgICAgIGlmIChNYXRoLmFicyhzY2FsZSkgPCAwLjAwMSkgc2NhbGUgPSAwO1xuICAgICAgY29uc3Qgc2xpZGVUcmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoJHt0cmFuc2xhdGVYfXB4LCR7dHJhbnNsYXRlWX1weCwke3RyYW5zbGF0ZVp9cHgpICByb3RhdGVYKCR7cihyb3RhdGVYKX1kZWcpIHJvdGF0ZVkoJHtyKHJvdGF0ZVkpfWRlZykgc2NhbGUoJHtzY2FsZX0pYDtcbiAgICAgIGNvbnN0IHRhcmdldEVsID0gZWZmZWN0VGFyZ2V0KHBhcmFtcywgc2xpZGVFbCk7XG4gICAgICB0YXJnZXRFbC5zdHlsZS50cmFuc2Zvcm0gPSBzbGlkZVRyYW5zZm9ybTtcbiAgICAgIHNsaWRlRWwuc3R5bGUuekluZGV4ID0gLU1hdGguYWJzKE1hdGgucm91bmQob2Zmc2V0TXVsdGlwbGllcikpICsgMTtcbiAgICAgIGlmIChwYXJhbXMuc2xpZGVTaGFkb3dzKSB7XG4gICAgICAgIC8vIFNldCBzaGFkb3dzXG4gICAgICAgIGxldCBzaGFkb3dCZWZvcmVFbCA9IGlzSG9yaXpvbnRhbCA/IHNsaWRlRWwucXVlcnlTZWxlY3RvcignLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpIDogc2xpZGVFbC5xdWVyeVNlbGVjdG9yKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AnKTtcbiAgICAgICAgbGV0IHNoYWRvd0FmdGVyRWwgPSBpc0hvcml6b250YWwgPyBzbGlkZUVsLnF1ZXJ5U2VsZWN0b3IoJy5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0JykgOiBzbGlkZUVsLnF1ZXJ5U2VsZWN0b3IoJy5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbScpO1xuICAgICAgICBpZiAoIXNoYWRvd0JlZm9yZUVsKSB7XG4gICAgICAgICAgc2hhZG93QmVmb3JlRWwgPSBjcmVhdGVTaGFkb3coJ2NvdmVyZmxvdycsIHNsaWRlRWwsIGlzSG9yaXpvbnRhbCA/ICdsZWZ0JyA6ICd0b3AnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXNoYWRvd0FmdGVyRWwpIHtcbiAgICAgICAgICBzaGFkb3dBZnRlckVsID0gY3JlYXRlU2hhZG93KCdjb3ZlcmZsb3cnLCBzbGlkZUVsLCBpc0hvcml6b250YWwgPyAncmlnaHQnIDogJ2JvdHRvbScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaGFkb3dCZWZvcmVFbCkgc2hhZG93QmVmb3JlRWwuc3R5bGUub3BhY2l0eSA9IG9mZnNldE11bHRpcGxpZXIgPiAwID8gb2Zmc2V0TXVsdGlwbGllciA6IDA7XG4gICAgICAgIGlmIChzaGFkb3dBZnRlckVsKSBzaGFkb3dBZnRlckVsLnN0eWxlLm9wYWNpdHkgPSAtb2Zmc2V0TXVsdGlwbGllciA+IDAgPyAtb2Zmc2V0TXVsdGlwbGllciA6IDA7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBjb25zdCBzZXRUcmFuc2l0aW9uID0gZHVyYXRpb24gPT4ge1xuICAgIGNvbnN0IHRyYW5zZm9ybUVsZW1lbnRzID0gc3dpcGVyLnNsaWRlcy5tYXAoc2xpZGVFbCA9PiBnZXRTbGlkZVRyYW5zZm9ybUVsKHNsaWRlRWwpKTtcbiAgICB0cmFuc2Zvcm1FbGVtZW50cy5mb3JFYWNoKGVsID0+IHtcbiAgICAgIGVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke2R1cmF0aW9ufW1zYDtcbiAgICAgIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQsIC5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbSwgLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpLmZvckVhY2goc2hhZG93RWwgPT4ge1xuICAgICAgICBzaGFkb3dFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBgJHtkdXJhdGlvbn1tc2A7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcbiAgZWZmZWN0SW5pdCh7XG4gICAgZWZmZWN0OiAnY292ZXJmbG93JyxcbiAgICBzd2lwZXIsXG4gICAgb24sXG4gICAgc2V0VHJhbnNsYXRlLFxuICAgIHNldFRyYW5zaXRpb24sXG4gICAgcGVyc3BlY3RpdmU6ICgpID0+IHRydWUsXG4gICAgb3ZlcndyaXRlUGFyYW1zOiAoKSA9PiAoe1xuICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZVxuICAgIH0pXG4gIH0pO1xufVxuXG5leHBvcnQgeyBFZmZlY3RDb3ZlcmZsb3cgYXMgZGVmYXVsdCB9O1xuIl0sIm5hbWVzIjpbImMiLCJjcmVhdGVTaGFkb3ciLCJlIiwiZWZmZWN0SW5pdCIsImVmZmVjdFRhcmdldCIsImciLCJnZXRTbGlkZVRyYW5zZm9ybUVsIiwiYSIsImdldFJvdGF0ZUZpeCIsIkVmZmVjdENvdmVyZmxvdyIsInN3aXBlciIsImV4dGVuZFBhcmFtcyIsIm9uIiwiY292ZXJmbG93RWZmZWN0Iiwicm90YXRlIiwic3RyZXRjaCIsImRlcHRoIiwic2NhbGUiLCJtb2RpZmllciIsInNsaWRlU2hhZG93cyIsInNldFRyYW5zbGF0ZSIsIndpZHRoIiwic3dpcGVyV2lkdGgiLCJoZWlnaHQiLCJzd2lwZXJIZWlnaHQiLCJzbGlkZXMiLCJzbGlkZXNTaXplc0dyaWQiLCJwYXJhbXMiLCJpc0hvcml6b250YWwiLCJ0cmFuc2Zvcm0iLCJ0cmFuc2xhdGUiLCJjZW50ZXIiLCJyIiwiaSIsImxlbmd0aCIsInNsaWRlRWwiLCJzbGlkZVNpemUiLCJzbGlkZU9mZnNldCIsInN3aXBlclNsaWRlT2Zmc2V0IiwiY2VudGVyT2Zmc2V0Iiwib2Zmc2V0TXVsdGlwbGllciIsInJvdGF0ZVkiLCJyb3RhdGVYIiwidHJhbnNsYXRlWiIsIk1hdGgiLCJhYnMiLCJpbmRleE9mIiwicGFyc2VGbG9hdCIsInRyYW5zbGF0ZVkiLCJ0cmFuc2xhdGVYIiwic2xpZGVUcmFuc2Zvcm0iLCJ0YXJnZXRFbCIsInN0eWxlIiwiekluZGV4Iiwicm91bmQiLCJzaGFkb3dCZWZvcmVFbCIsInF1ZXJ5U2VsZWN0b3IiLCJzaGFkb3dBZnRlckVsIiwib3BhY2l0eSIsInNldFRyYW5zaXRpb24iLCJkdXJhdGlvbiIsInRyYW5zZm9ybUVsZW1lbnRzIiwibWFwIiwiZm9yRWFjaCIsImVsIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwicXVlcnlTZWxlY3RvckFsbCIsInNoYWRvd0VsIiwiZWZmZWN0IiwicGVyc3BlY3RpdmUiLCJvdmVyd3JpdGVQYXJhbXMiLCJ3YXRjaFNsaWRlc1Byb2dyZXNzIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/effect-coverflow.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/effect-creative.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/swiper/modules/effect-creative.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ EffectCreative)\n/* harmony export */ });\n/* harmony import */ var _shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/create-shadow.mjs */ \"(ssr)/./node_modules/swiper/shared/create-shadow.mjs\");\n/* harmony import */ var _shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/effect-init.mjs */ \"(ssr)/./node_modules/swiper/shared/effect-init.mjs\");\n/* harmony import */ var _shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/effect-target.mjs */ \"(ssr)/./node_modules/swiper/shared/effect-target.mjs\");\n/* harmony import */ var _shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/effect-virtual-transition-end.mjs */ \"(ssr)/./node_modules/swiper/shared/effect-virtual-transition-end.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\n\n\n\n\nfunction EffectCreative({ swiper, extendParams, on }) {\n    extendParams({\n        creativeEffect: {\n            limitProgress: 1,\n            shadowPerProgress: false,\n            progressMultiplier: 1,\n            perspective: true,\n            prev: {\n                translate: [\n                    0,\n                    0,\n                    0\n                ],\n                rotate: [\n                    0,\n                    0,\n                    0\n                ],\n                opacity: 1,\n                scale: 1\n            },\n            next: {\n                translate: [\n                    0,\n                    0,\n                    0\n                ],\n                rotate: [\n                    0,\n                    0,\n                    0\n                ],\n                opacity: 1,\n                scale: 1\n            }\n        }\n    });\n    const getTranslateValue = (value)=>{\n        if (typeof value === \"string\") return value;\n        return `${value}px`;\n    };\n    const setTranslate = ()=>{\n        const { slides, wrapperEl, slidesSizesGrid } = swiper;\n        const params = swiper.params.creativeEffect;\n        const { progressMultiplier: multiplier } = params;\n        const isCenteredSlides = swiper.params.centeredSlides;\n        const rotateFix = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.a)(swiper);\n        if (isCenteredSlides) {\n            const margin = slidesSizesGrid[0] / 2 - swiper.params.slidesOffsetBefore || 0;\n            wrapperEl.style.transform = `translateX(calc(50% - ${margin}px))`;\n        }\n        for(let i = 0; i < slides.length; i += 1){\n            const slideEl = slides[i];\n            const slideProgress = slideEl.progress;\n            const progress = Math.min(Math.max(slideEl.progress, -params.limitProgress), params.limitProgress);\n            let originalProgress = progress;\n            if (!isCenteredSlides) {\n                originalProgress = Math.min(Math.max(slideEl.originalProgress, -params.limitProgress), params.limitProgress);\n            }\n            const offset = slideEl.swiperSlideOffset;\n            const t = [\n                swiper.params.cssMode ? -offset - swiper.translate : -offset,\n                0,\n                0\n            ];\n            const r = [\n                0,\n                0,\n                0\n            ];\n            let custom = false;\n            if (!swiper.isHorizontal()) {\n                t[1] = t[0];\n                t[0] = 0;\n            }\n            let data = {\n                translate: [\n                    0,\n                    0,\n                    0\n                ],\n                rotate: [\n                    0,\n                    0,\n                    0\n                ],\n                scale: 1,\n                opacity: 1\n            };\n            if (progress < 0) {\n                data = params.next;\n                custom = true;\n            } else if (progress > 0) {\n                data = params.prev;\n                custom = true;\n            }\n            // set translate\n            t.forEach((value, index)=>{\n                t[index] = `calc(${value}px + (${getTranslateValue(data.translate[index])} * ${Math.abs(progress * multiplier)}))`;\n            });\n            // set rotates\n            r.forEach((value, index)=>{\n                let val = data.rotate[index] * Math.abs(progress * multiplier);\n                r[index] = val;\n            });\n            slideEl.style.zIndex = -Math.abs(Math.round(slideProgress)) + slides.length;\n            const translateString = t.join(\", \");\n            const rotateString = `rotateX(${rotateFix(r[0])}deg) rotateY(${rotateFix(r[1])}deg) rotateZ(${rotateFix(r[2])}deg)`;\n            const scaleString = originalProgress < 0 ? `scale(${1 + (1 - data.scale) * originalProgress * multiplier})` : `scale(${1 - (1 - data.scale) * originalProgress * multiplier})`;\n            const opacityString = originalProgress < 0 ? 1 + (1 - data.opacity) * originalProgress * multiplier : 1 - (1 - data.opacity) * originalProgress * multiplier;\n            const transform = `translate3d(${translateString}) ${rotateString} ${scaleString}`;\n            // Set shadows\n            if (custom && data.shadow || !custom) {\n                let shadowEl = slideEl.querySelector(\".swiper-slide-shadow\");\n                if (!shadowEl && data.shadow) {\n                    shadowEl = (0,_shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(\"creative\", slideEl);\n                }\n                if (shadowEl) {\n                    const shadowOpacity = params.shadowPerProgress ? progress * (1 / params.limitProgress) : progress;\n                    shadowEl.style.opacity = Math.min(Math.max(Math.abs(shadowOpacity), 0), 1);\n                }\n            }\n            const targetEl = (0,_shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(params, slideEl);\n            targetEl.style.transform = transform;\n            targetEl.style.opacity = opacityString;\n            if (data.origin) {\n                targetEl.style.transformOrigin = data.origin;\n            }\n        }\n    };\n    const setTransition = (duration)=>{\n        const transformElements = swiper.slides.map((slideEl)=>(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.g)(slideEl));\n        transformElements.forEach((el)=>{\n            el.style.transitionDuration = `${duration}ms`;\n            el.querySelectorAll(\".swiper-slide-shadow\").forEach((shadowEl)=>{\n                shadowEl.style.transitionDuration = `${duration}ms`;\n            });\n        });\n        (0,_shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_3__.e)({\n            swiper,\n            duration,\n            transformElements,\n            allSlides: true\n        });\n    };\n    (0,_shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__.e)({\n        effect: \"creative\",\n        swiper,\n        on,\n        setTranslate,\n        setTransition,\n        perspective: ()=>swiper.params.creativeEffect.perspective,\n        overwriteParams: ()=>({\n                watchSlidesProgress: true,\n                virtualTranslate: !swiper.params.cssMode\n            })\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/effect-creative.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/effect-cube.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/swiper/modules/effect-cube.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ EffectCube)\n/* harmony export */ });\n/* harmony import */ var _shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/effect-init.mjs */ \"(ssr)/./node_modules/swiper/shared/effect-init.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\n\nfunction EffectCube({ swiper, extendParams, on }) {\n    extendParams({\n        cubeEffect: {\n            slideShadows: true,\n            shadow: true,\n            shadowOffset: 20,\n            shadowScale: 0.94\n        }\n    });\n    const createSlideShadows = (slideEl, progress, isHorizontal)=>{\n        let shadowBefore = isHorizontal ? slideEl.querySelector(\".swiper-slide-shadow-left\") : slideEl.querySelector(\".swiper-slide-shadow-top\");\n        let shadowAfter = isHorizontal ? slideEl.querySelector(\".swiper-slide-shadow-right\") : slideEl.querySelector(\".swiper-slide-shadow-bottom\");\n        if (!shadowBefore) {\n            shadowBefore = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(\"div\", `swiper-slide-shadow-cube swiper-slide-shadow-${isHorizontal ? \"left\" : \"top\"}`.split(\" \"));\n            slideEl.append(shadowBefore);\n        }\n        if (!shadowAfter) {\n            shadowAfter = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(\"div\", `swiper-slide-shadow-cube swiper-slide-shadow-${isHorizontal ? \"right\" : \"bottom\"}`.split(\" \"));\n            slideEl.append(shadowAfter);\n        }\n        if (shadowBefore) shadowBefore.style.opacity = Math.max(-progress, 0);\n        if (shadowAfter) shadowAfter.style.opacity = Math.max(progress, 0);\n    };\n    const recreateShadows = ()=>{\n        // create new ones\n        const isHorizontal = swiper.isHorizontal();\n        swiper.slides.forEach((slideEl)=>{\n            const progress = Math.max(Math.min(slideEl.progress, 1), -1);\n            createSlideShadows(slideEl, progress, isHorizontal);\n        });\n    };\n    const setTranslate = ()=>{\n        const { el, wrapperEl, slides, width: swiperWidth, height: swiperHeight, rtlTranslate: rtl, size: swiperSize, browser } = swiper;\n        const r = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(swiper);\n        const params = swiper.params.cubeEffect;\n        const isHorizontal = swiper.isHorizontal();\n        const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n        let wrapperRotate = 0;\n        let cubeShadowEl;\n        if (params.shadow) {\n            if (isHorizontal) {\n                cubeShadowEl = swiper.wrapperEl.querySelector(\".swiper-cube-shadow\");\n                if (!cubeShadowEl) {\n                    cubeShadowEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(\"div\", \"swiper-cube-shadow\");\n                    swiper.wrapperEl.append(cubeShadowEl);\n                }\n                cubeShadowEl.style.height = `${swiperWidth}px`;\n            } else {\n                cubeShadowEl = el.querySelector(\".swiper-cube-shadow\");\n                if (!cubeShadowEl) {\n                    cubeShadowEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(\"div\", \"swiper-cube-shadow\");\n                    el.append(cubeShadowEl);\n                }\n            }\n        }\n        for(let i = 0; i < slides.length; i += 1){\n            const slideEl = slides[i];\n            let slideIndex = i;\n            if (isVirtual) {\n                slideIndex = parseInt(slideEl.getAttribute(\"data-swiper-slide-index\"), 10);\n            }\n            let slideAngle = slideIndex * 90;\n            let round = Math.floor(slideAngle / 360);\n            if (rtl) {\n                slideAngle = -slideAngle;\n                round = Math.floor(-slideAngle / 360);\n            }\n            const progress = Math.max(Math.min(slideEl.progress, 1), -1);\n            let tx = 0;\n            let ty = 0;\n            let tz = 0;\n            if (slideIndex % 4 === 0) {\n                tx = -round * 4 * swiperSize;\n                tz = 0;\n            } else if ((slideIndex - 1) % 4 === 0) {\n                tx = 0;\n                tz = -round * 4 * swiperSize;\n            } else if ((slideIndex - 2) % 4 === 0) {\n                tx = swiperSize + round * 4 * swiperSize;\n                tz = swiperSize;\n            } else if ((slideIndex - 3) % 4 === 0) {\n                tx = -swiperSize;\n                tz = 3 * swiperSize + swiperSize * 4 * round;\n            }\n            if (rtl) {\n                tx = -tx;\n            }\n            if (!isHorizontal) {\n                ty = tx;\n                tx = 0;\n            }\n            const transform = `rotateX(${r(isHorizontal ? 0 : -slideAngle)}deg) rotateY(${r(isHorizontal ? slideAngle : 0)}deg) translate3d(${tx}px, ${ty}px, ${tz}px)`;\n            if (progress <= 1 && progress > -1) {\n                wrapperRotate = slideIndex * 90 + progress * 90;\n                if (rtl) wrapperRotate = -slideIndex * 90 - progress * 90;\n            }\n            slideEl.style.transform = transform;\n            if (params.slideShadows) {\n                createSlideShadows(slideEl, progress, isHorizontal);\n            }\n        }\n        wrapperEl.style.transformOrigin = `50% 50% -${swiperSize / 2}px`;\n        wrapperEl.style[\"-webkit-transform-origin\"] = `50% 50% -${swiperSize / 2}px`;\n        if (params.shadow) {\n            if (isHorizontal) {\n                cubeShadowEl.style.transform = `translate3d(0px, ${swiperWidth / 2 + params.shadowOffset}px, ${-swiperWidth / 2}px) rotateX(89.99deg) rotateZ(0deg) scale(${params.shadowScale})`;\n            } else {\n                const shadowAngle = Math.abs(wrapperRotate) - Math.floor(Math.abs(wrapperRotate) / 90) * 90;\n                const multiplier = 1.5 - (Math.sin(shadowAngle * 2 * Math.PI / 360) / 2 + Math.cos(shadowAngle * 2 * Math.PI / 360) / 2);\n                const scale1 = params.shadowScale;\n                const scale2 = params.shadowScale / multiplier;\n                const offset = params.shadowOffset;\n                cubeShadowEl.style.transform = `scale3d(${scale1}, 1, ${scale2}) translate3d(0px, ${swiperHeight / 2 + offset}px, ${-swiperHeight / 2 / scale2}px) rotateX(-89.99deg)`;\n            }\n        }\n        const zFactor = (browser.isSafari || browser.isWebView) && browser.needPerspectiveFix ? -swiperSize / 2 : 0;\n        wrapperEl.style.transform = `translate3d(0px,0,${zFactor}px) rotateX(${r(swiper.isHorizontal() ? 0 : wrapperRotate)}deg) rotateY(${r(swiper.isHorizontal() ? -wrapperRotate : 0)}deg)`;\n        wrapperEl.style.setProperty(\"--swiper-cube-translate-z\", `${zFactor}px`);\n    };\n    const setTransition = (duration)=>{\n        const { el, slides } = swiper;\n        slides.forEach((slideEl)=>{\n            slideEl.style.transitionDuration = `${duration}ms`;\n            slideEl.querySelectorAll(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").forEach((subEl)=>{\n                subEl.style.transitionDuration = `${duration}ms`;\n            });\n        });\n        if (swiper.params.cubeEffect.shadow && !swiper.isHorizontal()) {\n            const shadowEl = el.querySelector(\".swiper-cube-shadow\");\n            if (shadowEl) shadowEl.style.transitionDuration = `${duration}ms`;\n        }\n    };\n    (0,_shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_0__.e)({\n        effect: \"cube\",\n        swiper,\n        on,\n        setTranslate,\n        setTransition,\n        recreateShadows,\n        getEffectParams: ()=>swiper.params.cubeEffect,\n        perspective: ()=>true,\n        overwriteParams: ()=>({\n                slidesPerView: 1,\n                slidesPerGroup: 1,\n                watchSlidesProgress: true,\n                resistanceRatio: 0,\n                spaceBetween: 0,\n                centeredSlides: false,\n                virtualTranslate: true\n            })\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/effect-cube.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/effect-fade.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/swiper/modules/effect-fade.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ EffectFade)\n/* harmony export */ });\n/* harmony import */ var _shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/effect-init.mjs */ \"(ssr)/./node_modules/swiper/shared/effect-init.mjs\");\n/* harmony import */ var _shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/effect-target.mjs */ \"(ssr)/./node_modules/swiper/shared/effect-target.mjs\");\n/* harmony import */ var _shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/effect-virtual-transition-end.mjs */ \"(ssr)/./node_modules/swiper/shared/effect-virtual-transition-end.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\n\n\n\nfunction EffectFade({ swiper, extendParams, on }) {\n    extendParams({\n        fadeEffect: {\n            crossFade: false\n        }\n    });\n    const setTranslate = ()=>{\n        const { slides } = swiper;\n        const params = swiper.params.fadeEffect;\n        for(let i = 0; i < slides.length; i += 1){\n            const slideEl = swiper.slides[i];\n            const offset = slideEl.swiperSlideOffset;\n            let tx = -offset;\n            if (!swiper.params.virtualTranslate) tx -= swiper.translate;\n            let ty = 0;\n            if (!swiper.isHorizontal()) {\n                ty = tx;\n                tx = 0;\n            }\n            const slideOpacity = swiper.params.fadeEffect.crossFade ? Math.max(1 - Math.abs(slideEl.progress), 0) : 1 + Math.min(Math.max(slideEl.progress, -1), 0);\n            const targetEl = (0,_shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(params, slideEl);\n            targetEl.style.opacity = slideOpacity;\n            targetEl.style.transform = `translate3d(${tx}px, ${ty}px, 0px)`;\n        }\n    };\n    const setTransition = (duration)=>{\n        const transformElements = swiper.slides.map((slideEl)=>(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_3__.g)(slideEl));\n        transformElements.forEach((el)=>{\n            el.style.transitionDuration = `${duration}ms`;\n        });\n        (0,_shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_2__.e)({\n            swiper,\n            duration,\n            transformElements,\n            allSlides: true\n        });\n    };\n    (0,_shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_0__.e)({\n        effect: \"fade\",\n        swiper,\n        on,\n        setTranslate,\n        setTransition,\n        overwriteParams: ()=>({\n                slidesPerView: 1,\n                slidesPerGroup: 1,\n                watchSlidesProgress: true,\n                spaceBetween: 0,\n                virtualTranslate: !swiper.params.cssMode\n            })\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvZWZmZWN0LWZhZGUubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTREO0FBQ0k7QUFDOEI7QUFDL0I7QUFFL0QsU0FBU00sV0FBVyxFQUNsQkMsTUFBTSxFQUNOQyxZQUFZLEVBQ1pDLEVBQUUsRUFDSDtJQUNDRCxhQUFhO1FBQ1hFLFlBQVk7WUFDVkMsV0FBVztRQUNiO0lBQ0Y7SUFDQSxNQUFNQyxlQUFlO1FBQ25CLE1BQU0sRUFDSkMsTUFBTSxFQUNQLEdBQUdOO1FBQ0osTUFBTU8sU0FBU1AsT0FBT08sTUFBTSxDQUFDSixVQUFVO1FBQ3ZDLElBQUssSUFBSUssSUFBSSxHQUFHQSxJQUFJRixPQUFPRyxNQUFNLEVBQUVELEtBQUssRUFBRztZQUN6QyxNQUFNRSxVQUFVVixPQUFPTSxNQUFNLENBQUNFLEVBQUU7WUFDaEMsTUFBTUcsU0FBU0QsUUFBUUUsaUJBQWlCO1lBQ3hDLElBQUlDLEtBQUssQ0FBQ0Y7WUFDVixJQUFJLENBQUNYLE9BQU9PLE1BQU0sQ0FBQ08sZ0JBQWdCLEVBQUVELE1BQU1iLE9BQU9lLFNBQVM7WUFDM0QsSUFBSUMsS0FBSztZQUNULElBQUksQ0FBQ2hCLE9BQU9pQixZQUFZLElBQUk7Z0JBQzFCRCxLQUFLSDtnQkFDTEEsS0FBSztZQUNQO1lBQ0EsTUFBTUssZUFBZWxCLE9BQU9PLE1BQU0sQ0FBQ0osVUFBVSxDQUFDQyxTQUFTLEdBQUdlLEtBQUtDLEdBQUcsQ0FBQyxJQUFJRCxLQUFLRSxHQUFHLENBQUNYLFFBQVFZLFFBQVEsR0FBRyxLQUFLLElBQUlILEtBQUtJLEdBQUcsQ0FBQ0osS0FBS0MsR0FBRyxDQUFDVixRQUFRWSxRQUFRLEVBQUUsQ0FBQyxJQUFJO1lBQ3JKLE1BQU1FLFdBQVc3Qiw0REFBWUEsQ0FBQ1ksUUFBUUc7WUFDdENjLFNBQVNDLEtBQUssQ0FBQ0MsT0FBTyxHQUFHUjtZQUN6Qk0sU0FBU0MsS0FBSyxDQUFDRSxTQUFTLEdBQUcsQ0FBQyxZQUFZLEVBQUVkLEdBQUcsSUFBSSxFQUFFRyxHQUFHLFFBQVEsQ0FBQztRQUNqRTtJQUNGO0lBQ0EsTUFBTVksZ0JBQWdCQyxDQUFBQTtRQUNwQixNQUFNQyxvQkFBb0I5QixPQUFPTSxNQUFNLENBQUN5QixHQUFHLENBQUNyQixDQUFBQSxVQUFXWixvREFBbUJBLENBQUNZO1FBQzNFb0Isa0JBQWtCRSxPQUFPLENBQUNDLENBQUFBO1lBQ3hCQSxHQUFHUixLQUFLLENBQUNTLGtCQUFrQixHQUFHLENBQUMsRUFBRUwsU0FBUyxFQUFFLENBQUM7UUFDL0M7UUFDQWpDLDRFQUEwQkEsQ0FBQztZQUN6Qkk7WUFDQTZCO1lBQ0FDO1lBQ0FLLFdBQVc7UUFDYjtJQUNGO0lBQ0F6QywwREFBVUEsQ0FBQztRQUNUMEMsUUFBUTtRQUNScEM7UUFDQUU7UUFDQUc7UUFDQXVCO1FBQ0FTLGlCQUFpQixJQUFPO2dCQUN0QkMsZUFBZTtnQkFDZkMsZ0JBQWdCO2dCQUNoQkMscUJBQXFCO2dCQUNyQkMsY0FBYztnQkFDZDNCLGtCQUFrQixDQUFDZCxPQUFPTyxNQUFNLENBQUNtQyxPQUFPO1lBQzFDO0lBQ0Y7QUFDRjtBQUVpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJidWNrcy10dXJrZXktY2xvbmUvLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvZWZmZWN0LWZhZGUubWpzP2JkY2IiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZSBhcyBlZmZlY3RJbml0IH0gZnJvbSAnLi4vc2hhcmVkL2VmZmVjdC1pbml0Lm1qcyc7XG5pbXBvcnQgeyBlIGFzIGVmZmVjdFRhcmdldCB9IGZyb20gJy4uL3NoYXJlZC9lZmZlY3QtdGFyZ2V0Lm1qcyc7XG5pbXBvcnQgeyBlIGFzIGVmZmVjdFZpcnR1YWxUcmFuc2l0aW9uRW5kIH0gZnJvbSAnLi4vc2hhcmVkL2VmZmVjdC12aXJ0dWFsLXRyYW5zaXRpb24tZW5kLm1qcyc7XG5pbXBvcnQgeyBnIGFzIGdldFNsaWRlVHJhbnNmb3JtRWwgfSBmcm9tICcuLi9zaGFyZWQvdXRpbHMubWpzJztcblxuZnVuY3Rpb24gRWZmZWN0RmFkZSh7XG4gIHN3aXBlcixcbiAgZXh0ZW5kUGFyYW1zLFxuICBvblxufSkge1xuICBleHRlbmRQYXJhbXMoe1xuICAgIGZhZGVFZmZlY3Q6IHtcbiAgICAgIGNyb3NzRmFkZTogZmFsc2VcbiAgICB9XG4gIH0pO1xuICBjb25zdCBzZXRUcmFuc2xhdGUgPSAoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgc2xpZGVzXG4gICAgfSA9IHN3aXBlcjtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmZhZGVFZmZlY3Q7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IHNsaWRlRWwgPSBzd2lwZXIuc2xpZGVzW2ldO1xuICAgICAgY29uc3Qgb2Zmc2V0ID0gc2xpZGVFbC5zd2lwZXJTbGlkZU9mZnNldDtcbiAgICAgIGxldCB0eCA9IC1vZmZzZXQ7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMudmlydHVhbFRyYW5zbGF0ZSkgdHggLT0gc3dpcGVyLnRyYW5zbGF0ZTtcbiAgICAgIGxldCB0eSA9IDA7XG4gICAgICBpZiAoIXN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgICB0eSA9IHR4O1xuICAgICAgICB0eCA9IDA7XG4gICAgICB9XG4gICAgICBjb25zdCBzbGlkZU9wYWNpdHkgPSBzd2lwZXIucGFyYW1zLmZhZGVFZmZlY3QuY3Jvc3NGYWRlID8gTWF0aC5tYXgoMSAtIE1hdGguYWJzKHNsaWRlRWwucHJvZ3Jlc3MpLCAwKSA6IDEgKyBNYXRoLm1pbihNYXRoLm1heChzbGlkZUVsLnByb2dyZXNzLCAtMSksIDApO1xuICAgICAgY29uc3QgdGFyZ2V0RWwgPSBlZmZlY3RUYXJnZXQocGFyYW1zLCBzbGlkZUVsKTtcbiAgICAgIHRhcmdldEVsLnN0eWxlLm9wYWNpdHkgPSBzbGlkZU9wYWNpdHk7XG4gICAgICB0YXJnZXRFbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoJHt0eH1weCwgJHt0eX1weCwgMHB4KWA7XG4gICAgfVxuICB9O1xuICBjb25zdCBzZXRUcmFuc2l0aW9uID0gZHVyYXRpb24gPT4ge1xuICAgIGNvbnN0IHRyYW5zZm9ybUVsZW1lbnRzID0gc3dpcGVyLnNsaWRlcy5tYXAoc2xpZGVFbCA9PiBnZXRTbGlkZVRyYW5zZm9ybUVsKHNsaWRlRWwpKTtcbiAgICB0cmFuc2Zvcm1FbGVtZW50cy5mb3JFYWNoKGVsID0+IHtcbiAgICAgIGVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke2R1cmF0aW9ufW1zYDtcbiAgICB9KTtcbiAgICBlZmZlY3RWaXJ0dWFsVHJhbnNpdGlvbkVuZCh7XG4gICAgICBzd2lwZXIsXG4gICAgICBkdXJhdGlvbixcbiAgICAgIHRyYW5zZm9ybUVsZW1lbnRzLFxuICAgICAgYWxsU2xpZGVzOiB0cnVlXG4gICAgfSk7XG4gIH07XG4gIGVmZmVjdEluaXQoe1xuICAgIGVmZmVjdDogJ2ZhZGUnLFxuICAgIHN3aXBlcixcbiAgICBvbixcbiAgICBzZXRUcmFuc2xhdGUsXG4gICAgc2V0VHJhbnNpdGlvbixcbiAgICBvdmVyd3JpdGVQYXJhbXM6ICgpID0+ICh7XG4gICAgICBzbGlkZXNQZXJWaWV3OiAxLFxuICAgICAgc2xpZGVzUGVyR3JvdXA6IDEsXG4gICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxuICAgICAgc3BhY2VCZXR3ZWVuOiAwLFxuICAgICAgdmlydHVhbFRyYW5zbGF0ZTogIXN3aXBlci5wYXJhbXMuY3NzTW9kZVxuICAgIH0pXG4gIH0pO1xufVxuXG5leHBvcnQgeyBFZmZlY3RGYWRlIGFzIGRlZmF1bHQgfTtcbiJdLCJuYW1lcyI6WyJlIiwiZWZmZWN0SW5pdCIsImVmZmVjdFRhcmdldCIsImVmZmVjdFZpcnR1YWxUcmFuc2l0aW9uRW5kIiwiZyIsImdldFNsaWRlVHJhbnNmb3JtRWwiLCJFZmZlY3RGYWRlIiwic3dpcGVyIiwiZXh0ZW5kUGFyYW1zIiwib24iLCJmYWRlRWZmZWN0IiwiY3Jvc3NGYWRlIiwic2V0VHJhbnNsYXRlIiwic2xpZGVzIiwicGFyYW1zIiwiaSIsImxlbmd0aCIsInNsaWRlRWwiLCJvZmZzZXQiLCJzd2lwZXJTbGlkZU9mZnNldCIsInR4IiwidmlydHVhbFRyYW5zbGF0ZSIsInRyYW5zbGF0ZSIsInR5IiwiaXNIb3Jpem9udGFsIiwic2xpZGVPcGFjaXR5IiwiTWF0aCIsIm1heCIsImFicyIsInByb2dyZXNzIiwibWluIiwidGFyZ2V0RWwiLCJzdHlsZSIsIm9wYWNpdHkiLCJ0cmFuc2Zvcm0iLCJzZXRUcmFuc2l0aW9uIiwiZHVyYXRpb24iLCJ0cmFuc2Zvcm1FbGVtZW50cyIsIm1hcCIsImZvckVhY2giLCJlbCIsInRyYW5zaXRpb25EdXJhdGlvbiIsImFsbFNsaWRlcyIsImVmZmVjdCIsIm92ZXJ3cml0ZVBhcmFtcyIsInNsaWRlc1BlclZpZXciLCJzbGlkZXNQZXJHcm91cCIsIndhdGNoU2xpZGVzUHJvZ3Jlc3MiLCJzcGFjZUJldHdlZW4iLCJjc3NNb2RlIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/effect-fade.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/effect-flip.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/swiper/modules/effect-flip.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ EffectFlip)\n/* harmony export */ });\n/* harmony import */ var _shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/create-shadow.mjs */ \"(ssr)/./node_modules/swiper/shared/create-shadow.mjs\");\n/* harmony import */ var _shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/effect-init.mjs */ \"(ssr)/./node_modules/swiper/shared/effect-init.mjs\");\n/* harmony import */ var _shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/effect-target.mjs */ \"(ssr)/./node_modules/swiper/shared/effect-target.mjs\");\n/* harmony import */ var _shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/effect-virtual-transition-end.mjs */ \"(ssr)/./node_modules/swiper/shared/effect-virtual-transition-end.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\n\n\n\n\nfunction EffectFlip({ swiper, extendParams, on }) {\n    extendParams({\n        flipEffect: {\n            slideShadows: true,\n            limitRotation: true\n        }\n    });\n    const createSlideShadows = (slideEl, progress)=>{\n        let shadowBefore = swiper.isHorizontal() ? slideEl.querySelector(\".swiper-slide-shadow-left\") : slideEl.querySelector(\".swiper-slide-shadow-top\");\n        let shadowAfter = swiper.isHorizontal() ? slideEl.querySelector(\".swiper-slide-shadow-right\") : slideEl.querySelector(\".swiper-slide-shadow-bottom\");\n        if (!shadowBefore) {\n            shadowBefore = (0,_shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(\"flip\", slideEl, swiper.isHorizontal() ? \"left\" : \"top\");\n        }\n        if (!shadowAfter) {\n            shadowAfter = (0,_shared_create_shadow_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(\"flip\", slideEl, swiper.isHorizontal() ? \"right\" : \"bottom\");\n        }\n        if (shadowBefore) shadowBefore.style.opacity = Math.max(-progress, 0);\n        if (shadowAfter) shadowAfter.style.opacity = Math.max(progress, 0);\n    };\n    const recreateShadows = ()=>{\n        // Set shadows\n        swiper.params.flipEffect;\n        swiper.slides.forEach((slideEl)=>{\n            let progress = slideEl.progress;\n            if (swiper.params.flipEffect.limitRotation) {\n                progress = Math.max(Math.min(slideEl.progress, 1), -1);\n            }\n            createSlideShadows(slideEl, progress);\n        });\n    };\n    const setTranslate = ()=>{\n        const { slides, rtlTranslate: rtl } = swiper;\n        const params = swiper.params.flipEffect;\n        const rotateFix = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.a)(swiper);\n        for(let i = 0; i < slides.length; i += 1){\n            const slideEl = slides[i];\n            let progress = slideEl.progress;\n            if (swiper.params.flipEffect.limitRotation) {\n                progress = Math.max(Math.min(slideEl.progress, 1), -1);\n            }\n            const offset = slideEl.swiperSlideOffset;\n            const rotate = -180 * progress;\n            let rotateY = rotate;\n            let rotateX = 0;\n            let tx = swiper.params.cssMode ? -offset - swiper.translate : -offset;\n            let ty = 0;\n            if (!swiper.isHorizontal()) {\n                ty = tx;\n                tx = 0;\n                rotateX = -rotateY;\n                rotateY = 0;\n            } else if (rtl) {\n                rotateY = -rotateY;\n            }\n            slideEl.style.zIndex = -Math.abs(Math.round(progress)) + slides.length;\n            if (params.slideShadows) {\n                createSlideShadows(slideEl, progress);\n            }\n            const transform = `translate3d(${tx}px, ${ty}px, 0px) rotateX(${rotateFix(rotateX)}deg) rotateY(${rotateFix(rotateY)}deg)`;\n            const targetEl = (0,_shared_effect_target_mjs__WEBPACK_IMPORTED_MODULE_2__.e)(params, slideEl);\n            targetEl.style.transform = transform;\n        }\n    };\n    const setTransition = (duration)=>{\n        const transformElements = swiper.slides.map((slideEl)=>(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_4__.g)(slideEl));\n        transformElements.forEach((el)=>{\n            el.style.transitionDuration = `${duration}ms`;\n            el.querySelectorAll(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").forEach((shadowEl)=>{\n                shadowEl.style.transitionDuration = `${duration}ms`;\n            });\n        });\n        (0,_shared_effect_virtual_transition_end_mjs__WEBPACK_IMPORTED_MODULE_3__.e)({\n            swiper,\n            duration,\n            transformElements\n        });\n    };\n    (0,_shared_effect_init_mjs__WEBPACK_IMPORTED_MODULE_1__.e)({\n        effect: \"flip\",\n        swiper,\n        on,\n        setTranslate,\n        setTransition,\n        recreateShadows,\n        getEffectParams: ()=>swiper.params.flipEffect,\n        perspective: ()=>true,\n        overwriteParams: ()=>({\n                slidesPerView: 1,\n                slidesPerGroup: 1,\n                watchSlidesProgress: true,\n                spaceBetween: 0,\n                virtualTranslate: !swiper.params.cssMode\n            })\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/effect-flip.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/free-mode.mjs":
/*!***************************************************!*\
  !*** ./node_modules/swiper/modules/free-mode.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ freeMode)\n/* harmony export */ });\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\nfunction freeMode({ swiper, extendParams, emit, once }) {\n    extendParams({\n        freeMode: {\n            enabled: false,\n            momentum: true,\n            momentumRatio: 1,\n            momentumBounce: true,\n            momentumBounceRatio: 1,\n            momentumVelocityRatio: 1,\n            sticky: false,\n            minimumVelocity: 0.02\n        }\n    });\n    function onTouchStart() {\n        if (swiper.params.cssMode) return;\n        const translate = swiper.getTranslate();\n        swiper.setTranslate(translate);\n        swiper.setTransition(0);\n        swiper.touchEventsData.velocities.length = 0;\n        swiper.freeMode.onTouchEnd({\n            currentPos: swiper.rtl ? swiper.translate : -swiper.translate\n        });\n    }\n    function onTouchMove() {\n        if (swiper.params.cssMode) return;\n        const { touchEventsData: data, touches } = swiper;\n        // Velocity\n        if (data.velocities.length === 0) {\n            data.velocities.push({\n                position: touches[swiper.isHorizontal() ? \"startX\" : \"startY\"],\n                time: data.touchStartTime\n            });\n        }\n        data.velocities.push({\n            position: touches[swiper.isHorizontal() ? \"currentX\" : \"currentY\"],\n            time: (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.h)()\n        });\n    }\n    function onTouchEnd({ currentPos }) {\n        if (swiper.params.cssMode) return;\n        const { params, wrapperEl, rtlTranslate: rtl, snapGrid, touchEventsData: data } = swiper;\n        // Time diff\n        const touchEndTime = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.h)();\n        const timeDiff = touchEndTime - data.touchStartTime;\n        if (currentPos < -swiper.minTranslate()) {\n            swiper.slideTo(swiper.activeIndex);\n            return;\n        }\n        if (currentPos > -swiper.maxTranslate()) {\n            if (swiper.slides.length < snapGrid.length) {\n                swiper.slideTo(snapGrid.length - 1);\n            } else {\n                swiper.slideTo(swiper.slides.length - 1);\n            }\n            return;\n        }\n        if (params.freeMode.momentum) {\n            if (data.velocities.length > 1) {\n                const lastMoveEvent = data.velocities.pop();\n                const velocityEvent = data.velocities.pop();\n                const distance = lastMoveEvent.position - velocityEvent.position;\n                const time = lastMoveEvent.time - velocityEvent.time;\n                swiper.velocity = distance / time;\n                swiper.velocity /= 2;\n                if (Math.abs(swiper.velocity) < params.freeMode.minimumVelocity) {\n                    swiper.velocity = 0;\n                }\n                // this implies that the user stopped moving a finger then released.\n                // There would be no events with distance zero, so the last event is stale.\n                if (time > 150 || (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.h)() - lastMoveEvent.time > 300) {\n                    swiper.velocity = 0;\n                }\n            } else {\n                swiper.velocity = 0;\n            }\n            swiper.velocity *= params.freeMode.momentumVelocityRatio;\n            data.velocities.length = 0;\n            let momentumDuration = 1000 * params.freeMode.momentumRatio;\n            const momentumDistance = swiper.velocity * momentumDuration;\n            let newPosition = swiper.translate + momentumDistance;\n            if (rtl) newPosition = -newPosition;\n            let doBounce = false;\n            let afterBouncePosition;\n            const bounceAmount = Math.abs(swiper.velocity) * 20 * params.freeMode.momentumBounceRatio;\n            let needsLoopFix;\n            if (newPosition < swiper.maxTranslate()) {\n                if (params.freeMode.momentumBounce) {\n                    if (newPosition + swiper.maxTranslate() < -bounceAmount) {\n                        newPosition = swiper.maxTranslate() - bounceAmount;\n                    }\n                    afterBouncePosition = swiper.maxTranslate();\n                    doBounce = true;\n                    data.allowMomentumBounce = true;\n                } else {\n                    newPosition = swiper.maxTranslate();\n                }\n                if (params.loop && params.centeredSlides) needsLoopFix = true;\n            } else if (newPosition > swiper.minTranslate()) {\n                if (params.freeMode.momentumBounce) {\n                    if (newPosition - swiper.minTranslate() > bounceAmount) {\n                        newPosition = swiper.minTranslate() + bounceAmount;\n                    }\n                    afterBouncePosition = swiper.minTranslate();\n                    doBounce = true;\n                    data.allowMomentumBounce = true;\n                } else {\n                    newPosition = swiper.minTranslate();\n                }\n                if (params.loop && params.centeredSlides) needsLoopFix = true;\n            } else if (params.freeMode.sticky) {\n                let nextSlide;\n                for(let j = 0; j < snapGrid.length; j += 1){\n                    if (snapGrid[j] > -newPosition) {\n                        nextSlide = j;\n                        break;\n                    }\n                }\n                if (Math.abs(snapGrid[nextSlide] - newPosition) < Math.abs(snapGrid[nextSlide - 1] - newPosition) || swiper.swipeDirection === \"next\") {\n                    newPosition = snapGrid[nextSlide];\n                } else {\n                    newPosition = snapGrid[nextSlide - 1];\n                }\n                newPosition = -newPosition;\n            }\n            if (needsLoopFix) {\n                once(\"transitionEnd\", ()=>{\n                    swiper.loopFix();\n                });\n            }\n            // Fix duration\n            if (swiper.velocity !== 0) {\n                if (rtl) {\n                    momentumDuration = Math.abs((-newPosition - swiper.translate) / swiper.velocity);\n                } else {\n                    momentumDuration = Math.abs((newPosition - swiper.translate) / swiper.velocity);\n                }\n                if (params.freeMode.sticky) {\n                    // If freeMode.sticky is active and the user ends a swipe with a slow-velocity\n                    // event, then durations can be 20+ seconds to slide one (or zero!) slides.\n                    // It's easy to see this when simulating touch with mouse events. To fix this,\n                    // limit single-slide swipes to the default slide duration. This also has the\n                    // nice side effect of matching slide speed if the user stopped moving before\n                    // lifting finger or mouse vs. moving slowly before lifting the finger/mouse.\n                    // For faster swipes, also apply limits (albeit higher ones).\n                    const moveDistance = Math.abs((rtl ? -newPosition : newPosition) - swiper.translate);\n                    const currentSlideSize = swiper.slidesSizesGrid[swiper.activeIndex];\n                    if (moveDistance < currentSlideSize) {\n                        momentumDuration = params.speed;\n                    } else if (moveDistance < 2 * currentSlideSize) {\n                        momentumDuration = params.speed * 1.5;\n                    } else {\n                        momentumDuration = params.speed * 2.5;\n                    }\n                }\n            } else if (params.freeMode.sticky) {\n                swiper.slideToClosest();\n                return;\n            }\n            if (params.freeMode.momentumBounce && doBounce) {\n                swiper.updateProgress(afterBouncePosition);\n                swiper.setTransition(momentumDuration);\n                swiper.setTranslate(newPosition);\n                swiper.transitionStart(true, swiper.swipeDirection);\n                swiper.animating = true;\n                (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(wrapperEl, ()=>{\n                    if (!swiper || swiper.destroyed || !data.allowMomentumBounce) return;\n                    emit(\"momentumBounce\");\n                    swiper.setTransition(params.speed);\n                    setTimeout(()=>{\n                        swiper.setTranslate(afterBouncePosition);\n                        (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(wrapperEl, ()=>{\n                            if (!swiper || swiper.destroyed) return;\n                            swiper.transitionEnd();\n                        });\n                    }, 0);\n                });\n            } else if (swiper.velocity) {\n                emit(\"_freeModeNoMomentumRelease\");\n                swiper.updateProgress(newPosition);\n                swiper.setTransition(momentumDuration);\n                swiper.setTranslate(newPosition);\n                swiper.transitionStart(true, swiper.swipeDirection);\n                if (!swiper.animating) {\n                    swiper.animating = true;\n                    (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(wrapperEl, ()=>{\n                        if (!swiper || swiper.destroyed) return;\n                        swiper.transitionEnd();\n                    });\n                }\n            } else {\n                swiper.updateProgress(newPosition);\n            }\n            swiper.updateActiveIndex();\n            swiper.updateSlidesClasses();\n        } else if (params.freeMode.sticky) {\n            swiper.slideToClosest();\n            return;\n        } else if (params.freeMode) {\n            emit(\"_freeModeNoMomentumRelease\");\n        }\n        if (!params.freeMode.momentum || timeDiff >= params.longSwipesMs) {\n            emit(\"_freeModeStaticRelease\");\n            swiper.updateProgress();\n            swiper.updateActiveIndex();\n            swiper.updateSlidesClasses();\n        }\n    }\n    Object.assign(swiper, {\n        freeMode: {\n            onTouchStart,\n            onTouchMove,\n            onTouchEnd\n        }\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/free-mode.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/grid.mjs":
/*!**********************************************!*\
  !*** ./node_modules/swiper/modules/grid.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Grid)\n/* harmony export */ });\nfunction Grid({ swiper, extendParams, on }) {\n    extendParams({\n        grid: {\n            rows: 1,\n            fill: \"column\"\n        }\n    });\n    let slidesNumberEvenToRows;\n    let slidesPerRow;\n    let numFullColumns;\n    let wasMultiRow;\n    const getSpaceBetween = ()=>{\n        let spaceBetween = swiper.params.spaceBetween;\n        if (typeof spaceBetween === \"string\" && spaceBetween.indexOf(\"%\") >= 0) {\n            spaceBetween = parseFloat(spaceBetween.replace(\"%\", \"\")) / 100 * swiper.size;\n        } else if (typeof spaceBetween === \"string\") {\n            spaceBetween = parseFloat(spaceBetween);\n        }\n        return spaceBetween;\n    };\n    const initSlides = (slides)=>{\n        const { slidesPerView } = swiper.params;\n        const { rows, fill } = swiper.params.grid;\n        const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : slides.length;\n        numFullColumns = Math.floor(slidesLength / rows);\n        if (Math.floor(slidesLength / rows) === slidesLength / rows) {\n            slidesNumberEvenToRows = slidesLength;\n        } else {\n            slidesNumberEvenToRows = Math.ceil(slidesLength / rows) * rows;\n        }\n        if (slidesPerView !== \"auto\" && fill === \"row\") {\n            slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, slidesPerView * rows);\n        }\n        slidesPerRow = slidesNumberEvenToRows / rows;\n    };\n    const unsetSlides = ()=>{\n        if (swiper.slides) {\n            swiper.slides.forEach((slide)=>{\n                if (slide.swiperSlideGridSet) {\n                    slide.style.height = \"\";\n                    slide.style[swiper.getDirectionLabel(\"margin-top\")] = \"\";\n                }\n            });\n        }\n    };\n    const updateSlide = (i, slide, slides)=>{\n        const { slidesPerGroup } = swiper.params;\n        const spaceBetween = getSpaceBetween();\n        const { rows, fill } = swiper.params.grid;\n        const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : slides.length;\n        // Set slides order\n        let newSlideOrderIndex;\n        let column;\n        let row;\n        if (fill === \"row\" && slidesPerGroup > 1) {\n            const groupIndex = Math.floor(i / (slidesPerGroup * rows));\n            const slideIndexInGroup = i - rows * slidesPerGroup * groupIndex;\n            const columnsInGroup = groupIndex === 0 ? slidesPerGroup : Math.min(Math.ceil((slidesLength - groupIndex * rows * slidesPerGroup) / rows), slidesPerGroup);\n            row = Math.floor(slideIndexInGroup / columnsInGroup);\n            column = slideIndexInGroup - row * columnsInGroup + groupIndex * slidesPerGroup;\n            newSlideOrderIndex = column + row * slidesNumberEvenToRows / rows;\n            slide.style.order = newSlideOrderIndex;\n        } else if (fill === \"column\") {\n            column = Math.floor(i / rows);\n            row = i - column * rows;\n            if (column > numFullColumns || column === numFullColumns && row === rows - 1) {\n                row += 1;\n                if (row >= rows) {\n                    row = 0;\n                    column += 1;\n                }\n            }\n        } else {\n            row = Math.floor(i / slidesPerRow);\n            column = i - row * slidesPerRow;\n        }\n        slide.row = row;\n        slide.column = column;\n        slide.style.height = `calc((100% - ${(rows - 1) * spaceBetween}px) / ${rows})`;\n        slide.style[swiper.getDirectionLabel(\"margin-top\")] = row !== 0 ? spaceBetween && `${spaceBetween}px` : \"\";\n        slide.swiperSlideGridSet = true;\n    };\n    const updateWrapperSize = (slideSize, snapGrid)=>{\n        const { centeredSlides, roundLengths } = swiper.params;\n        const spaceBetween = getSpaceBetween();\n        const { rows } = swiper.params.grid;\n        swiper.virtualSize = (slideSize + spaceBetween) * slidesNumberEvenToRows;\n        swiper.virtualSize = Math.ceil(swiper.virtualSize / rows) - spaceBetween;\n        if (!swiper.params.cssMode) {\n            swiper.wrapperEl.style[swiper.getDirectionLabel(\"width\")] = `${swiper.virtualSize + spaceBetween}px`;\n        }\n        if (centeredSlides) {\n            const newSlidesGrid = [];\n            for(let i = 0; i < snapGrid.length; i += 1){\n                let slidesGridItem = snapGrid[i];\n                if (roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n                if (snapGrid[i] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);\n            }\n            snapGrid.splice(0, snapGrid.length);\n            snapGrid.push(...newSlidesGrid);\n        }\n    };\n    const onInit = ()=>{\n        wasMultiRow = swiper.params.grid && swiper.params.grid.rows > 1;\n    };\n    const onUpdate = ()=>{\n        const { params, el } = swiper;\n        const isMultiRow = params.grid && params.grid.rows > 1;\n        if (wasMultiRow && !isMultiRow) {\n            el.classList.remove(`${params.containerModifierClass}grid`, `${params.containerModifierClass}grid-column`);\n            numFullColumns = 1;\n            swiper.emitContainerClasses();\n        } else if (!wasMultiRow && isMultiRow) {\n            el.classList.add(`${params.containerModifierClass}grid`);\n            if (params.grid.fill === \"column\") {\n                el.classList.add(`${params.containerModifierClass}grid-column`);\n            }\n            swiper.emitContainerClasses();\n        }\n        wasMultiRow = isMultiRow;\n    };\n    on(\"init\", onInit);\n    on(\"update\", onUpdate);\n    swiper.grid = {\n        initSlides,\n        unsetSlides,\n        updateSlide,\n        updateWrapperSize\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvZ3JpZC5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLFNBQVNBLEtBQUssRUFDWkMsTUFBTSxFQUNOQyxZQUFZLEVBQ1pDLEVBQUUsRUFDSDtJQUNDRCxhQUFhO1FBQ1hFLE1BQU07WUFDSkMsTUFBTTtZQUNOQyxNQUFNO1FBQ1I7SUFDRjtJQUNBLElBQUlDO0lBQ0osSUFBSUM7SUFDSixJQUFJQztJQUNKLElBQUlDO0lBQ0osTUFBTUMsa0JBQWtCO1FBQ3RCLElBQUlDLGVBQWVYLE9BQU9ZLE1BQU0sQ0FBQ0QsWUFBWTtRQUM3QyxJQUFJLE9BQU9BLGlCQUFpQixZQUFZQSxhQUFhRSxPQUFPLENBQUMsUUFBUSxHQUFHO1lBQ3RFRixlQUFlRyxXQUFXSCxhQUFhSSxPQUFPLENBQUMsS0FBSyxPQUFPLE1BQU1mLE9BQU9nQixJQUFJO1FBQzlFLE9BQU8sSUFBSSxPQUFPTCxpQkFBaUIsVUFBVTtZQUMzQ0EsZUFBZUcsV0FBV0g7UUFDNUI7UUFDQSxPQUFPQTtJQUNUO0lBQ0EsTUFBTU0sYUFBYUMsQ0FBQUE7UUFDakIsTUFBTSxFQUNKQyxhQUFhLEVBQ2QsR0FBR25CLE9BQU9ZLE1BQU07UUFDakIsTUFBTSxFQUNKUixJQUFJLEVBQ0pDLElBQUksRUFDTCxHQUFHTCxPQUFPWSxNQUFNLENBQUNULElBQUk7UUFDdEIsTUFBTWlCLGVBQWVwQixPQUFPcUIsT0FBTyxJQUFJckIsT0FBT1ksTUFBTSxDQUFDUyxPQUFPLENBQUNDLE9BQU8sR0FBR3RCLE9BQU9xQixPQUFPLENBQUNILE1BQU0sQ0FBQ0ssTUFBTSxHQUFHTCxPQUFPSyxNQUFNO1FBQ25IZixpQkFBaUJnQixLQUFLQyxLQUFLLENBQUNMLGVBQWVoQjtRQUMzQyxJQUFJb0IsS0FBS0MsS0FBSyxDQUFDTCxlQUFlaEIsVUFBVWdCLGVBQWVoQixNQUFNO1lBQzNERSx5QkFBeUJjO1FBQzNCLE9BQU87WUFDTGQseUJBQXlCa0IsS0FBS0UsSUFBSSxDQUFDTixlQUFlaEIsUUFBUUE7UUFDNUQ7UUFDQSxJQUFJZSxrQkFBa0IsVUFBVWQsU0FBUyxPQUFPO1lBQzlDQyx5QkFBeUJrQixLQUFLRyxHQUFHLENBQUNyQix3QkFBd0JhLGdCQUFnQmY7UUFDNUU7UUFDQUcsZUFBZUQseUJBQXlCRjtJQUMxQztJQUNBLE1BQU13QixjQUFjO1FBQ2xCLElBQUk1QixPQUFPa0IsTUFBTSxFQUFFO1lBQ2pCbEIsT0FBT2tCLE1BQU0sQ0FBQ1csT0FBTyxDQUFDQyxDQUFBQTtnQkFDcEIsSUFBSUEsTUFBTUMsa0JBQWtCLEVBQUU7b0JBQzVCRCxNQUFNRSxLQUFLLENBQUNDLE1BQU0sR0FBRztvQkFDckJILE1BQU1FLEtBQUssQ0FBQ2hDLE9BQU9rQyxpQkFBaUIsQ0FBQyxjQUFjLEdBQUc7Z0JBQ3hEO1lBQ0Y7UUFDRjtJQUNGO0lBQ0EsTUFBTUMsY0FBYyxDQUFDQyxHQUFHTixPQUFPWjtRQUM3QixNQUFNLEVBQ0ptQixjQUFjLEVBQ2YsR0FBR3JDLE9BQU9ZLE1BQU07UUFDakIsTUFBTUQsZUFBZUQ7UUFDckIsTUFBTSxFQUNKTixJQUFJLEVBQ0pDLElBQUksRUFDTCxHQUFHTCxPQUFPWSxNQUFNLENBQUNULElBQUk7UUFDdEIsTUFBTWlCLGVBQWVwQixPQUFPcUIsT0FBTyxJQUFJckIsT0FBT1ksTUFBTSxDQUFDUyxPQUFPLENBQUNDLE9BQU8sR0FBR3RCLE9BQU9xQixPQUFPLENBQUNILE1BQU0sQ0FBQ0ssTUFBTSxHQUFHTCxPQUFPSyxNQUFNO1FBQ25ILG1CQUFtQjtRQUNuQixJQUFJZTtRQUNKLElBQUlDO1FBQ0osSUFBSUM7UUFDSixJQUFJbkMsU0FBUyxTQUFTZ0MsaUJBQWlCLEdBQUc7WUFDeEMsTUFBTUksYUFBYWpCLEtBQUtDLEtBQUssQ0FBQ1csSUFBS0MsQ0FBQUEsaUJBQWlCakMsSUFBRztZQUN2RCxNQUFNc0Msb0JBQW9CTixJQUFJaEMsT0FBT2lDLGlCQUFpQkk7WUFDdEQsTUFBTUUsaUJBQWlCRixlQUFlLElBQUlKLGlCQUFpQmIsS0FBS29CLEdBQUcsQ0FBQ3BCLEtBQUtFLElBQUksQ0FBQyxDQUFDTixlQUFlcUIsYUFBYXJDLE9BQU9pQyxjQUFhLElBQUtqQyxPQUFPaUM7WUFDM0lHLE1BQU1oQixLQUFLQyxLQUFLLENBQUNpQixvQkFBb0JDO1lBQ3JDSixTQUFTRyxvQkFBb0JGLE1BQU1HLGlCQUFpQkYsYUFBYUo7WUFDakVDLHFCQUFxQkMsU0FBU0MsTUFBTWxDLHlCQUF5QkY7WUFDN0QwQixNQUFNRSxLQUFLLENBQUNhLEtBQUssR0FBR1A7UUFDdEIsT0FBTyxJQUFJakMsU0FBUyxVQUFVO1lBQzVCa0MsU0FBU2YsS0FBS0MsS0FBSyxDQUFDVyxJQUFJaEM7WUFDeEJvQyxNQUFNSixJQUFJRyxTQUFTbkM7WUFDbkIsSUFBSW1DLFNBQVMvQixrQkFBa0IrQixXQUFXL0Isa0JBQWtCZ0MsUUFBUXBDLE9BQU8sR0FBRztnQkFDNUVvQyxPQUFPO2dCQUNQLElBQUlBLE9BQU9wQyxNQUFNO29CQUNmb0MsTUFBTTtvQkFDTkQsVUFBVTtnQkFDWjtZQUNGO1FBQ0YsT0FBTztZQUNMQyxNQUFNaEIsS0FBS0MsS0FBSyxDQUFDVyxJQUFJN0I7WUFDckJnQyxTQUFTSCxJQUFJSSxNQUFNakM7UUFDckI7UUFDQXVCLE1BQU1VLEdBQUcsR0FBR0E7UUFDWlYsTUFBTVMsTUFBTSxHQUFHQTtRQUNmVCxNQUFNRSxLQUFLLENBQUNDLE1BQU0sR0FBRyxDQUFDLGFBQWEsRUFBRSxDQUFDN0IsT0FBTyxLQUFLTyxhQUFhLE1BQU0sRUFBRVAsS0FBSyxDQUFDLENBQUM7UUFDOUUwQixNQUFNRSxLQUFLLENBQUNoQyxPQUFPa0MsaUJBQWlCLENBQUMsY0FBYyxHQUFHTSxRQUFRLElBQUk3QixnQkFBZ0IsQ0FBQyxFQUFFQSxhQUFhLEVBQUUsQ0FBQyxHQUFHO1FBQ3hHbUIsTUFBTUMsa0JBQWtCLEdBQUc7SUFDN0I7SUFDQSxNQUFNZSxvQkFBb0IsQ0FBQ0MsV0FBV0M7UUFDcEMsTUFBTSxFQUNKQyxjQUFjLEVBQ2RDLFlBQVksRUFDYixHQUFHbEQsT0FBT1ksTUFBTTtRQUNqQixNQUFNRCxlQUFlRDtRQUNyQixNQUFNLEVBQ0pOLElBQUksRUFDTCxHQUFHSixPQUFPWSxNQUFNLENBQUNULElBQUk7UUFDdEJILE9BQU9tRCxXQUFXLEdBQUcsQ0FBQ0osWUFBWXBDLFlBQVcsSUFBS0w7UUFDbEROLE9BQU9tRCxXQUFXLEdBQUczQixLQUFLRSxJQUFJLENBQUMxQixPQUFPbUQsV0FBVyxHQUFHL0MsUUFBUU87UUFDNUQsSUFBSSxDQUFDWCxPQUFPWSxNQUFNLENBQUN3QyxPQUFPLEVBQUU7WUFDMUJwRCxPQUFPcUQsU0FBUyxDQUFDckIsS0FBSyxDQUFDaEMsT0FBT2tDLGlCQUFpQixDQUFDLFNBQVMsR0FBRyxDQUFDLEVBQUVsQyxPQUFPbUQsV0FBVyxHQUFHeEMsYUFBYSxFQUFFLENBQUM7UUFDdEc7UUFDQSxJQUFJc0MsZ0JBQWdCO1lBQ2xCLE1BQU1LLGdCQUFnQixFQUFFO1lBQ3hCLElBQUssSUFBSWxCLElBQUksR0FBR0EsSUFBSVksU0FBU3pCLE1BQU0sRUFBRWEsS0FBSyxFQUFHO2dCQUMzQyxJQUFJbUIsaUJBQWlCUCxRQUFRLENBQUNaLEVBQUU7Z0JBQ2hDLElBQUljLGNBQWNLLGlCQUFpQi9CLEtBQUtDLEtBQUssQ0FBQzhCO2dCQUM5QyxJQUFJUCxRQUFRLENBQUNaLEVBQUUsR0FBR3BDLE9BQU9tRCxXQUFXLEdBQUdILFFBQVEsQ0FBQyxFQUFFLEVBQUVNLGNBQWNFLElBQUksQ0FBQ0Q7WUFDekU7WUFDQVAsU0FBU1MsTUFBTSxDQUFDLEdBQUdULFNBQVN6QixNQUFNO1lBQ2xDeUIsU0FBU1EsSUFBSSxJQUFJRjtRQUNuQjtJQUNGO0lBQ0EsTUFBTUksU0FBUztRQUNiakQsY0FBY1QsT0FBT1ksTUFBTSxDQUFDVCxJQUFJLElBQUlILE9BQU9ZLE1BQU0sQ0FBQ1QsSUFBSSxDQUFDQyxJQUFJLEdBQUc7SUFDaEU7SUFDQSxNQUFNdUQsV0FBVztRQUNmLE1BQU0sRUFDSi9DLE1BQU0sRUFDTmdELEVBQUUsRUFDSCxHQUFHNUQ7UUFDSixNQUFNNkQsYUFBYWpELE9BQU9ULElBQUksSUFBSVMsT0FBT1QsSUFBSSxDQUFDQyxJQUFJLEdBQUc7UUFDckQsSUFBSUssZUFBZSxDQUFDb0QsWUFBWTtZQUM5QkQsR0FBR0UsU0FBUyxDQUFDQyxNQUFNLENBQUMsQ0FBQyxFQUFFbkQsT0FBT29ELHNCQUFzQixDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRXBELE9BQU9vRCxzQkFBc0IsQ0FBQyxXQUFXLENBQUM7WUFDekd4RCxpQkFBaUI7WUFDakJSLE9BQU9pRSxvQkFBb0I7UUFDN0IsT0FBTyxJQUFJLENBQUN4RCxlQUFlb0QsWUFBWTtZQUNyQ0QsR0FBR0UsU0FBUyxDQUFDSSxHQUFHLENBQUMsQ0FBQyxFQUFFdEQsT0FBT29ELHNCQUFzQixDQUFDLElBQUksQ0FBQztZQUN2RCxJQUFJcEQsT0FBT1QsSUFBSSxDQUFDRSxJQUFJLEtBQUssVUFBVTtnQkFDakN1RCxHQUFHRSxTQUFTLENBQUNJLEdBQUcsQ0FBQyxDQUFDLEVBQUV0RCxPQUFPb0Qsc0JBQXNCLENBQUMsV0FBVyxDQUFDO1lBQ2hFO1lBQ0FoRSxPQUFPaUUsb0JBQW9CO1FBQzdCO1FBQ0F4RCxjQUFjb0Q7SUFDaEI7SUFDQTNELEdBQUcsUUFBUXdEO0lBQ1h4RCxHQUFHLFVBQVV5RDtJQUNiM0QsT0FBT0csSUFBSSxHQUFHO1FBQ1pjO1FBQ0FXO1FBQ0FPO1FBQ0FXO0lBQ0Y7QUFDRjtBQUUyQiIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJidWNrcy10dXJrZXktY2xvbmUvLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvZ3JpZC5tanM/ZjRjYSJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBHcmlkKHtcbiAgc3dpcGVyLFxuICBleHRlbmRQYXJhbXMsXG4gIG9uXG59KSB7XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgZ3JpZDoge1xuICAgICAgcm93czogMSxcbiAgICAgIGZpbGw6ICdjb2x1bW4nXG4gICAgfVxuICB9KTtcbiAgbGV0IHNsaWRlc051bWJlckV2ZW5Ub1Jvd3M7XG4gIGxldCBzbGlkZXNQZXJSb3c7XG4gIGxldCBudW1GdWxsQ29sdW1ucztcbiAgbGV0IHdhc011bHRpUm93O1xuICBjb25zdCBnZXRTcGFjZUJldHdlZW4gPSAoKSA9PiB7XG4gICAgbGV0IHNwYWNlQmV0d2VlbiA9IHN3aXBlci5wYXJhbXMuc3BhY2VCZXR3ZWVuO1xuICAgIGlmICh0eXBlb2Ygc3BhY2VCZXR3ZWVuID09PSAnc3RyaW5nJyAmJiBzcGFjZUJldHdlZW4uaW5kZXhPZignJScpID49IDApIHtcbiAgICAgIHNwYWNlQmV0d2VlbiA9IHBhcnNlRmxvYXQoc3BhY2VCZXR3ZWVuLnJlcGxhY2UoJyUnLCAnJykpIC8gMTAwICogc3dpcGVyLnNpemU7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygc3BhY2VCZXR3ZWVuID09PSAnc3RyaW5nJykge1xuICAgICAgc3BhY2VCZXR3ZWVuID0gcGFyc2VGbG9hdChzcGFjZUJldHdlZW4pO1xuICAgIH1cbiAgICByZXR1cm4gc3BhY2VCZXR3ZWVuO1xuICB9O1xuICBjb25zdCBpbml0U2xpZGVzID0gc2xpZGVzID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBzbGlkZXNQZXJWaWV3XG4gICAgfSA9IHN3aXBlci5wYXJhbXM7XG4gICAgY29uc3Qge1xuICAgICAgcm93cyxcbiAgICAgIGZpbGxcbiAgICB9ID0gc3dpcGVyLnBhcmFtcy5ncmlkO1xuICAgIGNvbnN0IHNsaWRlc0xlbmd0aCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHNsaWRlcy5sZW5ndGg7XG4gICAgbnVtRnVsbENvbHVtbnMgPSBNYXRoLmZsb29yKHNsaWRlc0xlbmd0aCAvIHJvd3MpO1xuICAgIGlmIChNYXRoLmZsb29yKHNsaWRlc0xlbmd0aCAvIHJvd3MpID09PSBzbGlkZXNMZW5ndGggLyByb3dzKSB7XG4gICAgICBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzID0gc2xpZGVzTGVuZ3RoO1xuICAgIH0gZWxzZSB7XG4gICAgICBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzID0gTWF0aC5jZWlsKHNsaWRlc0xlbmd0aCAvIHJvd3MpICogcm93cztcbiAgICB9XG4gICAgaWYgKHNsaWRlc1BlclZpZXcgIT09ICdhdXRvJyAmJiBmaWxsID09PSAncm93Jykge1xuICAgICAgc2xpZGVzTnVtYmVyRXZlblRvUm93cyA9IE1hdGgubWF4KHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MsIHNsaWRlc1BlclZpZXcgKiByb3dzKTtcbiAgICB9XG4gICAgc2xpZGVzUGVyUm93ID0gc2xpZGVzTnVtYmVyRXZlblRvUm93cyAvIHJvd3M7XG4gIH07XG4gIGNvbnN0IHVuc2V0U2xpZGVzID0gKCkgPT4ge1xuICAgIGlmIChzd2lwZXIuc2xpZGVzKSB7XG4gICAgICBzd2lwZXIuc2xpZGVzLmZvckVhY2goc2xpZGUgPT4ge1xuICAgICAgICBpZiAoc2xpZGUuc3dpcGVyU2xpZGVHcmlkU2V0KSB7XG4gICAgICAgICAgc2xpZGUuc3R5bGUuaGVpZ2h0ID0gJyc7XG4gICAgICAgICAgc2xpZGUuc3R5bGVbc3dpcGVyLmdldERpcmVjdGlvbkxhYmVsKCdtYXJnaW4tdG9wJyldID0gJyc7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgdXBkYXRlU2xpZGUgPSAoaSwgc2xpZGUsIHNsaWRlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHNsaWRlc1Blckdyb3VwXG4gICAgfSA9IHN3aXBlci5wYXJhbXM7XG4gICAgY29uc3Qgc3BhY2VCZXR3ZWVuID0gZ2V0U3BhY2VCZXR3ZWVuKCk7XG4gICAgY29uc3Qge1xuICAgICAgcm93cyxcbiAgICAgIGZpbGxcbiAgICB9ID0gc3dpcGVyLnBhcmFtcy5ncmlkO1xuICAgIGNvbnN0IHNsaWRlc0xlbmd0aCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHNsaWRlcy5sZW5ndGg7XG4gICAgLy8gU2V0IHNsaWRlcyBvcmRlclxuICAgIGxldCBuZXdTbGlkZU9yZGVySW5kZXg7XG4gICAgbGV0IGNvbHVtbjtcbiAgICBsZXQgcm93O1xuICAgIGlmIChmaWxsID09PSAncm93JyAmJiBzbGlkZXNQZXJHcm91cCA+IDEpIHtcbiAgICAgIGNvbnN0IGdyb3VwSW5kZXggPSBNYXRoLmZsb29yKGkgLyAoc2xpZGVzUGVyR3JvdXAgKiByb3dzKSk7XG4gICAgICBjb25zdCBzbGlkZUluZGV4SW5Hcm91cCA9IGkgLSByb3dzICogc2xpZGVzUGVyR3JvdXAgKiBncm91cEluZGV4O1xuICAgICAgY29uc3QgY29sdW1uc0luR3JvdXAgPSBncm91cEluZGV4ID09PSAwID8gc2xpZGVzUGVyR3JvdXAgOiBNYXRoLm1pbihNYXRoLmNlaWwoKHNsaWRlc0xlbmd0aCAtIGdyb3VwSW5kZXggKiByb3dzICogc2xpZGVzUGVyR3JvdXApIC8gcm93cyksIHNsaWRlc1Blckdyb3VwKTtcbiAgICAgIHJvdyA9IE1hdGguZmxvb3Ioc2xpZGVJbmRleEluR3JvdXAgLyBjb2x1bW5zSW5Hcm91cCk7XG4gICAgICBjb2x1bW4gPSBzbGlkZUluZGV4SW5Hcm91cCAtIHJvdyAqIGNvbHVtbnNJbkdyb3VwICsgZ3JvdXBJbmRleCAqIHNsaWRlc1Blckdyb3VwO1xuICAgICAgbmV3U2xpZGVPcmRlckluZGV4ID0gY29sdW1uICsgcm93ICogc2xpZGVzTnVtYmVyRXZlblRvUm93cyAvIHJvd3M7XG4gICAgICBzbGlkZS5zdHlsZS5vcmRlciA9IG5ld1NsaWRlT3JkZXJJbmRleDtcbiAgICB9IGVsc2UgaWYgKGZpbGwgPT09ICdjb2x1bW4nKSB7XG4gICAgICBjb2x1bW4gPSBNYXRoLmZsb29yKGkgLyByb3dzKTtcbiAgICAgIHJvdyA9IGkgLSBjb2x1bW4gKiByb3dzO1xuICAgICAgaWYgKGNvbHVtbiA+IG51bUZ1bGxDb2x1bW5zIHx8IGNvbHVtbiA9PT0gbnVtRnVsbENvbHVtbnMgJiYgcm93ID09PSByb3dzIC0gMSkge1xuICAgICAgICByb3cgKz0gMTtcbiAgICAgICAgaWYgKHJvdyA+PSByb3dzKSB7XG4gICAgICAgICAgcm93ID0gMDtcbiAgICAgICAgICBjb2x1bW4gKz0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByb3cgPSBNYXRoLmZsb29yKGkgLyBzbGlkZXNQZXJSb3cpO1xuICAgICAgY29sdW1uID0gaSAtIHJvdyAqIHNsaWRlc1BlclJvdztcbiAgICB9XG4gICAgc2xpZGUucm93ID0gcm93O1xuICAgIHNsaWRlLmNvbHVtbiA9IGNvbHVtbjtcbiAgICBzbGlkZS5zdHlsZS5oZWlnaHQgPSBgY2FsYygoMTAwJSAtICR7KHJvd3MgLSAxKSAqIHNwYWNlQmV0d2Vlbn1weCkgLyAke3Jvd3N9KWA7XG4gICAgc2xpZGUuc3R5bGVbc3dpcGVyLmdldERpcmVjdGlvbkxhYmVsKCdtYXJnaW4tdG9wJyldID0gcm93ICE9PSAwID8gc3BhY2VCZXR3ZWVuICYmIGAke3NwYWNlQmV0d2Vlbn1weGAgOiAnJztcbiAgICBzbGlkZS5zd2lwZXJTbGlkZUdyaWRTZXQgPSB0cnVlO1xuICB9O1xuICBjb25zdCB1cGRhdGVXcmFwcGVyU2l6ZSA9IChzbGlkZVNpemUsIHNuYXBHcmlkKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgY2VudGVyZWRTbGlkZXMsXG4gICAgICByb3VuZExlbmd0aHNcbiAgICB9ID0gc3dpcGVyLnBhcmFtcztcbiAgICBjb25zdCBzcGFjZUJldHdlZW4gPSBnZXRTcGFjZUJldHdlZW4oKTtcbiAgICBjb25zdCB7XG4gICAgICByb3dzXG4gICAgfSA9IHN3aXBlci5wYXJhbXMuZ3JpZDtcbiAgICBzd2lwZXIudmlydHVhbFNpemUgPSAoc2xpZGVTaXplICsgc3BhY2VCZXR3ZWVuKSAqIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3M7XG4gICAgc3dpcGVyLnZpcnR1YWxTaXplID0gTWF0aC5jZWlsKHN3aXBlci52aXJ0dWFsU2l6ZSAvIHJvd3MpIC0gc3BhY2VCZXR3ZWVuO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlW3N3aXBlci5nZXREaXJlY3Rpb25MYWJlbCgnd2lkdGgnKV0gPSBgJHtzd2lwZXIudmlydHVhbFNpemUgKyBzcGFjZUJldHdlZW59cHhgO1xuICAgIH1cbiAgICBpZiAoY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIGNvbnN0IG5ld1NsaWRlc0dyaWQgPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc25hcEdyaWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgbGV0IHNsaWRlc0dyaWRJdGVtID0gc25hcEdyaWRbaV07XG4gICAgICAgIGlmIChyb3VuZExlbmd0aHMpIHNsaWRlc0dyaWRJdGVtID0gTWF0aC5mbG9vcihzbGlkZXNHcmlkSXRlbSk7XG4gICAgICAgIGlmIChzbmFwR3JpZFtpXSA8IHN3aXBlci52aXJ0dWFsU2l6ZSArIHNuYXBHcmlkWzBdKSBuZXdTbGlkZXNHcmlkLnB1c2goc2xpZGVzR3JpZEl0ZW0pO1xuICAgICAgfVxuICAgICAgc25hcEdyaWQuc3BsaWNlKDAsIHNuYXBHcmlkLmxlbmd0aCk7XG4gICAgICBzbmFwR3JpZC5wdXNoKC4uLm5ld1NsaWRlc0dyaWQpO1xuICAgIH1cbiAgfTtcbiAgY29uc3Qgb25Jbml0ID0gKCkgPT4ge1xuICAgIHdhc011bHRpUm93ID0gc3dpcGVyLnBhcmFtcy5ncmlkICYmIHN3aXBlci5wYXJhbXMuZ3JpZC5yb3dzID4gMTtcbiAgfTtcbiAgY29uc3Qgb25VcGRhdGUgPSAoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgcGFyYW1zLFxuICAgICAgZWxcbiAgICB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IGlzTXVsdGlSb3cgPSBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMTtcbiAgICBpZiAod2FzTXVsdGlSb3cgJiYgIWlzTXVsdGlSb3cpIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoYCR7cGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9Z3JpZGAsIGAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWdyaWQtY29sdW1uYCk7XG4gICAgICBudW1GdWxsQ29sdW1ucyA9IDE7XG4gICAgICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbiAgICB9IGVsc2UgaWYgKCF3YXNNdWx0aVJvdyAmJiBpc011bHRpUm93KSB7XG4gICAgICBlbC5jbGFzc0xpc3QuYWRkKGAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWdyaWRgKTtcbiAgICAgIGlmIChwYXJhbXMuZ3JpZC5maWxsID09PSAnY29sdW1uJykge1xuICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKGAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWdyaWQtY29sdW1uYCk7XG4gICAgICB9XG4gICAgICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbiAgICB9XG4gICAgd2FzTXVsdGlSb3cgPSBpc011bHRpUm93O1xuICB9O1xuICBvbignaW5pdCcsIG9uSW5pdCk7XG4gIG9uKCd1cGRhdGUnLCBvblVwZGF0ZSk7XG4gIHN3aXBlci5ncmlkID0ge1xuICAgIGluaXRTbGlkZXMsXG4gICAgdW5zZXRTbGlkZXMsXG4gICAgdXBkYXRlU2xpZGUsXG4gICAgdXBkYXRlV3JhcHBlclNpemVcbiAgfTtcbn1cblxuZXhwb3J0IHsgR3JpZCBhcyBkZWZhdWx0IH07XG4iXSwibmFtZXMiOlsiR3JpZCIsInN3aXBlciIsImV4dGVuZFBhcmFtcyIsIm9uIiwiZ3JpZCIsInJvd3MiLCJmaWxsIiwic2xpZGVzTnVtYmVyRXZlblRvUm93cyIsInNsaWRlc1BlclJvdyIsIm51bUZ1bGxDb2x1bW5zIiwid2FzTXVsdGlSb3ciLCJnZXRTcGFjZUJldHdlZW4iLCJzcGFjZUJldHdlZW4iLCJwYXJhbXMiLCJpbmRleE9mIiwicGFyc2VGbG9hdCIsInJlcGxhY2UiLCJzaXplIiwiaW5pdFNsaWRlcyIsInNsaWRlcyIsInNsaWRlc1BlclZpZXciLCJzbGlkZXNMZW5ndGgiLCJ2aXJ0dWFsIiwiZW5hYmxlZCIsImxlbmd0aCIsIk1hdGgiLCJmbG9vciIsImNlaWwiLCJtYXgiLCJ1bnNldFNsaWRlcyIsImZvckVhY2giLCJzbGlkZSIsInN3aXBlclNsaWRlR3JpZFNldCIsInN0eWxlIiwiaGVpZ2h0IiwiZ2V0RGlyZWN0aW9uTGFiZWwiLCJ1cGRhdGVTbGlkZSIsImkiLCJzbGlkZXNQZXJHcm91cCIsIm5ld1NsaWRlT3JkZXJJbmRleCIsImNvbHVtbiIsInJvdyIsImdyb3VwSW5kZXgiLCJzbGlkZUluZGV4SW5Hcm91cCIsImNvbHVtbnNJbkdyb3VwIiwibWluIiwib3JkZXIiLCJ1cGRhdGVXcmFwcGVyU2l6ZSIsInNsaWRlU2l6ZSIsInNuYXBHcmlkIiwiY2VudGVyZWRTbGlkZXMiLCJyb3VuZExlbmd0aHMiLCJ2aXJ0dWFsU2l6ZSIsImNzc01vZGUiLCJ3cmFwcGVyRWwiLCJuZXdTbGlkZXNHcmlkIiwic2xpZGVzR3JpZEl0ZW0iLCJwdXNoIiwic3BsaWNlIiwib25Jbml0Iiwib25VcGRhdGUiLCJlbCIsImlzTXVsdGlSb3ciLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJjb250YWluZXJNb2RpZmllckNsYXNzIiwiZW1pdENvbnRhaW5lckNsYXNzZXMiLCJhZGQiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/grid.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/hash-navigation.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/swiper/modules/hash-navigation.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ HashNavigation)\n/* harmony export */ });\n/* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/ssr-window.esm.mjs */ \"(ssr)/./node_modules/swiper/shared/ssr-window.esm.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\n\nfunction HashNavigation({ swiper, extendParams, emit, on }) {\n    let initialized = false;\n    const document = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n    const window = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    extendParams({\n        hashNavigation: {\n            enabled: false,\n            replaceState: false,\n            watchState: false,\n            getSlideIndex (_s, hash) {\n                if (swiper.virtual && swiper.params.virtual.enabled) {\n                    const slideWithHash = swiper.slides.find((slideEl)=>slideEl.getAttribute(\"data-hash\") === hash);\n                    if (!slideWithHash) return 0;\n                    const index = parseInt(slideWithHash.getAttribute(\"data-swiper-slide-index\"), 10);\n                    return index;\n                }\n                return swiper.getSlideIndex((0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(swiper.slidesEl, `.${swiper.params.slideClass}[data-hash=\"${hash}\"], swiper-slide[data-hash=\"${hash}\"]`)[0]);\n            }\n        }\n    });\n    const onHashChange = ()=>{\n        emit(\"hashChange\");\n        const newHash = document.location.hash.replace(\"#\", \"\");\n        const activeSlideEl = swiper.virtual && swiper.params.virtual.enabled ? swiper.slidesEl.querySelector(`[data-swiper-slide-index=\"${swiper.activeIndex}\"]`) : swiper.slides[swiper.activeIndex];\n        const activeSlideHash = activeSlideEl ? activeSlideEl.getAttribute(\"data-hash\") : \"\";\n        if (newHash !== activeSlideHash) {\n            const newIndex = swiper.params.hashNavigation.getSlideIndex(swiper, newHash);\n            if (typeof newIndex === \"undefined\" || Number.isNaN(newIndex)) return;\n            swiper.slideTo(newIndex);\n        }\n    };\n    const setHash = ()=>{\n        if (!initialized || !swiper.params.hashNavigation.enabled) return;\n        const activeSlideEl = swiper.virtual && swiper.params.virtual.enabled ? swiper.slidesEl.querySelector(`[data-swiper-slide-index=\"${swiper.activeIndex}\"]`) : swiper.slides[swiper.activeIndex];\n        const activeSlideHash = activeSlideEl ? activeSlideEl.getAttribute(\"data-hash\") || activeSlideEl.getAttribute(\"data-history\") : \"\";\n        if (swiper.params.hashNavigation.replaceState && window.history && window.history.replaceState) {\n            window.history.replaceState(null, null, `#${activeSlideHash}` || \"\");\n            emit(\"hashSet\");\n        } else {\n            document.location.hash = activeSlideHash || \"\";\n            emit(\"hashSet\");\n        }\n    };\n    const init = ()=>{\n        if (!swiper.params.hashNavigation.enabled || swiper.params.history && swiper.params.history.enabled) return;\n        initialized = true;\n        const hash = document.location.hash.replace(\"#\", \"\");\n        if (hash) {\n            const speed = 0;\n            const index = swiper.params.hashNavigation.getSlideIndex(swiper, hash);\n            swiper.slideTo(index || 0, speed, swiper.params.runCallbacksOnInit, true);\n        }\n        if (swiper.params.hashNavigation.watchState) {\n            window.addEventListener(\"hashchange\", onHashChange);\n        }\n    };\n    const destroy = ()=>{\n        if (swiper.params.hashNavigation.watchState) {\n            window.removeEventListener(\"hashchange\", onHashChange);\n        }\n    };\n    on(\"init\", ()=>{\n        if (swiper.params.hashNavigation.enabled) {\n            init();\n        }\n    });\n    on(\"destroy\", ()=>{\n        if (swiper.params.hashNavigation.enabled) {\n            destroy();\n        }\n    });\n    on(\"transitionEnd _freeModeNoMomentumRelease\", ()=>{\n        if (initialized) {\n            setHash();\n        }\n    });\n    on(\"slideChange\", ()=>{\n        if (initialized && swiper.params.cssMode) {\n            setHash();\n        }\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/hash-navigation.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/history.mjs":
/*!*************************************************!*\
  !*** ./node_modules/swiper/modules/history.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ History)\n/* harmony export */ });\n/* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/ssr-window.esm.mjs */ \"(ssr)/./node_modules/swiper/shared/ssr-window.esm.mjs\");\n\nfunction History({ swiper, extendParams, on }) {\n    extendParams({\n        history: {\n            enabled: false,\n            root: \"\",\n            replaceState: false,\n            key: \"slides\",\n            keepQuery: false\n        }\n    });\n    let initialized = false;\n    let paths = {};\n    const slugify = (text)=>{\n        return text.toString().replace(/\\s+/g, \"-\").replace(/[^\\w-]+/g, \"\").replace(/--+/g, \"-\").replace(/^-+/, \"\").replace(/-+$/, \"\");\n    };\n    const getPathValues = (urlOverride)=>{\n        const window = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n        let location;\n        if (urlOverride) {\n            location = new URL(urlOverride);\n        } else {\n            location = window.location;\n        }\n        const pathArray = location.pathname.slice(1).split(\"/\").filter((part)=>part !== \"\");\n        const total = pathArray.length;\n        const key = pathArray[total - 2];\n        const value = pathArray[total - 1];\n        return {\n            key,\n            value\n        };\n    };\n    const setHistory = (key, index)=>{\n        const window = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n        if (!initialized || !swiper.params.history.enabled) return;\n        let location;\n        if (swiper.params.url) {\n            location = new URL(swiper.params.url);\n        } else {\n            location = window.location;\n        }\n        const slide = swiper.virtual && swiper.params.virtual.enabled ? swiper.slidesEl.querySelector(`[data-swiper-slide-index=\"${index}\"]`) : swiper.slides[index];\n        let value = slugify(slide.getAttribute(\"data-history\"));\n        if (swiper.params.history.root.length > 0) {\n            let root = swiper.params.history.root;\n            if (root[root.length - 1] === \"/\") root = root.slice(0, root.length - 1);\n            value = `${root}/${key ? `${key}/` : \"\"}${value}`;\n        } else if (!location.pathname.includes(key)) {\n            value = `${key ? `${key}/` : \"\"}${value}`;\n        }\n        if (swiper.params.history.keepQuery) {\n            value += location.search;\n        }\n        const currentState = window.history.state;\n        if (currentState && currentState.value === value) {\n            return;\n        }\n        if (swiper.params.history.replaceState) {\n            window.history.replaceState({\n                value\n            }, null, value);\n        } else {\n            window.history.pushState({\n                value\n            }, null, value);\n        }\n    };\n    const scrollToSlide = (speed, value, runCallbacks)=>{\n        if (value) {\n            for(let i = 0, length = swiper.slides.length; i < length; i += 1){\n                const slide = swiper.slides[i];\n                const slideHistory = slugify(slide.getAttribute(\"data-history\"));\n                if (slideHistory === value) {\n                    const index = swiper.getSlideIndex(slide);\n                    swiper.slideTo(index, speed, runCallbacks);\n                }\n            }\n        } else {\n            swiper.slideTo(0, speed, runCallbacks);\n        }\n    };\n    const setHistoryPopState = ()=>{\n        paths = getPathValues(swiper.params.url);\n        scrollToSlide(swiper.params.speed, paths.value, false);\n    };\n    const init = ()=>{\n        const window = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n        if (!swiper.params.history) return;\n        if (!window.history || !window.history.pushState) {\n            swiper.params.history.enabled = false;\n            swiper.params.hashNavigation.enabled = true;\n            return;\n        }\n        initialized = true;\n        paths = getPathValues(swiper.params.url);\n        if (!paths.key && !paths.value) {\n            if (!swiper.params.history.replaceState) {\n                window.addEventListener(\"popstate\", setHistoryPopState);\n            }\n            return;\n        }\n        scrollToSlide(0, paths.value, swiper.params.runCallbacksOnInit);\n        if (!swiper.params.history.replaceState) {\n            window.addEventListener(\"popstate\", setHistoryPopState);\n        }\n    };\n    const destroy = ()=>{\n        const window = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n        if (!swiper.params.history.replaceState) {\n            window.removeEventListener(\"popstate\", setHistoryPopState);\n        }\n    };\n    on(\"init\", ()=>{\n        if (swiper.params.history.enabled) {\n            init();\n        }\n    });\n    on(\"destroy\", ()=>{\n        if (swiper.params.history.enabled) {\n            destroy();\n        }\n    });\n    on(\"transitionEnd _freeModeNoMomentumRelease\", ()=>{\n        if (initialized) {\n            setHistory(swiper.params.history.key, swiper.activeIndex);\n        }\n    });\n    on(\"slideChange\", ()=>{\n        if (initialized && swiper.params.cssMode) {\n            setHistory(swiper.params.history.key, swiper.activeIndex);\n        }\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/history.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/index.mjs":
/*!***********************************************!*\
  !*** ./node_modules/swiper/modules/index.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A11y: () => (/* reexport safe */ _a11y_mjs__WEBPACK_IMPORTED_MODULE_9__[\"default\"]),\n/* harmony export */   Autoplay: () => (/* reexport safe */ _autoplay_mjs__WEBPACK_IMPORTED_MODULE_12__[\"default\"]),\n/* harmony export */   Controller: () => (/* reexport safe */ _controller_mjs__WEBPACK_IMPORTED_MODULE_8__[\"default\"]),\n/* harmony export */   EffectCards: () => (/* reexport safe */ _effect_cards_mjs__WEBPACK_IMPORTED_MODULE_22__[\"default\"]),\n/* harmony export */   EffectCoverflow: () => (/* reexport safe */ _effect_coverflow_mjs__WEBPACK_IMPORTED_MODULE_20__[\"default\"]),\n/* harmony export */   EffectCreative: () => (/* reexport safe */ _effect_creative_mjs__WEBPACK_IMPORTED_MODULE_21__[\"default\"]),\n/* harmony export */   EffectCube: () => (/* reexport safe */ _effect_cube_mjs__WEBPACK_IMPORTED_MODULE_18__[\"default\"]),\n/* harmony export */   EffectFade: () => (/* reexport safe */ _effect_fade_mjs__WEBPACK_IMPORTED_MODULE_17__[\"default\"]),\n/* harmony export */   EffectFlip: () => (/* reexport safe */ _effect_flip_mjs__WEBPACK_IMPORTED_MODULE_19__[\"default\"]),\n/* harmony export */   FreeMode: () => (/* reexport safe */ _free_mode_mjs__WEBPACK_IMPORTED_MODULE_14__[\"default\"]),\n/* harmony export */   Grid: () => (/* reexport safe */ _grid_mjs__WEBPACK_IMPORTED_MODULE_15__[\"default\"]),\n/* harmony export */   HashNavigation: () => (/* reexport safe */ _hash_navigation_mjs__WEBPACK_IMPORTED_MODULE_11__[\"default\"]),\n/* harmony export */   History: () => (/* reexport safe */ _history_mjs__WEBPACK_IMPORTED_MODULE_10__[\"default\"]),\n/* harmony export */   Keyboard: () => (/* reexport safe */ _keyboard_mjs__WEBPACK_IMPORTED_MODULE_1__[\"default\"]),\n/* harmony export */   Manipulation: () => (/* reexport safe */ _manipulation_mjs__WEBPACK_IMPORTED_MODULE_16__[\"default\"]),\n/* harmony export */   Mousewheel: () => (/* reexport safe */ _mousewheel_mjs__WEBPACK_IMPORTED_MODULE_2__[\"default\"]),\n/* harmony export */   Navigation: () => (/* reexport safe */ _navigation_mjs__WEBPACK_IMPORTED_MODULE_3__[\"default\"]),\n/* harmony export */   Pagination: () => (/* reexport safe */ _pagination_mjs__WEBPACK_IMPORTED_MODULE_4__[\"default\"]),\n/* harmony export */   Parallax: () => (/* reexport safe */ _parallax_mjs__WEBPACK_IMPORTED_MODULE_6__[\"default\"]),\n/* harmony export */   Scrollbar: () => (/* reexport safe */ _scrollbar_mjs__WEBPACK_IMPORTED_MODULE_5__[\"default\"]),\n/* harmony export */   Thumbs: () => (/* reexport safe */ _thumbs_mjs__WEBPACK_IMPORTED_MODULE_13__[\"default\"]),\n/* harmony export */   Virtual: () => (/* reexport safe */ _virtual_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"]),\n/* harmony export */   Zoom: () => (/* reexport safe */ _zoom_mjs__WEBPACK_IMPORTED_MODULE_7__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _virtual_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./virtual.mjs */ \"(ssr)/./node_modules/swiper/modules/virtual.mjs\");\n/* harmony import */ var _keyboard_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./keyboard.mjs */ \"(ssr)/./node_modules/swiper/modules/keyboard.mjs\");\n/* harmony import */ var _mousewheel_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mousewheel.mjs */ \"(ssr)/./node_modules/swiper/modules/mousewheel.mjs\");\n/* harmony import */ var _navigation_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./navigation.mjs */ \"(ssr)/./node_modules/swiper/modules/navigation.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pagination.mjs */ \"(ssr)/./node_modules/swiper/modules/pagination.mjs\");\n/* harmony import */ var _scrollbar_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./scrollbar.mjs */ \"(ssr)/./node_modules/swiper/modules/scrollbar.mjs\");\n/* harmony import */ var _parallax_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./parallax.mjs */ \"(ssr)/./node_modules/swiper/modules/parallax.mjs\");\n/* harmony import */ var _zoom_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./zoom.mjs */ \"(ssr)/./node_modules/swiper/modules/zoom.mjs\");\n/* harmony import */ var _controller_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./controller.mjs */ \"(ssr)/./node_modules/swiper/modules/controller.mjs\");\n/* harmony import */ var _a11y_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./a11y.mjs */ \"(ssr)/./node_modules/swiper/modules/a11y.mjs\");\n/* harmony import */ var _history_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./history.mjs */ \"(ssr)/./node_modules/swiper/modules/history.mjs\");\n/* harmony import */ var _hash_navigation_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./hash-navigation.mjs */ \"(ssr)/./node_modules/swiper/modules/hash-navigation.mjs\");\n/* harmony import */ var _autoplay_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./autoplay.mjs */ \"(ssr)/./node_modules/swiper/modules/autoplay.mjs\");\n/* harmony import */ var _thumbs_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./thumbs.mjs */ \"(ssr)/./node_modules/swiper/modules/thumbs.mjs\");\n/* harmony import */ var _free_mode_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./free-mode.mjs */ \"(ssr)/./node_modules/swiper/modules/free-mode.mjs\");\n/* harmony import */ var _grid_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./grid.mjs */ \"(ssr)/./node_modules/swiper/modules/grid.mjs\");\n/* harmony import */ var _manipulation_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./manipulation.mjs */ \"(ssr)/./node_modules/swiper/modules/manipulation.mjs\");\n/* harmony import */ var _effect_fade_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./effect-fade.mjs */ \"(ssr)/./node_modules/swiper/modules/effect-fade.mjs\");\n/* harmony import */ var _effect_cube_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./effect-cube.mjs */ \"(ssr)/./node_modules/swiper/modules/effect-cube.mjs\");\n/* harmony import */ var _effect_flip_mjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./effect-flip.mjs */ \"(ssr)/./node_modules/swiper/modules/effect-flip.mjs\");\n/* harmony import */ var _effect_coverflow_mjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./effect-coverflow.mjs */ \"(ssr)/./node_modules/swiper/modules/effect-coverflow.mjs\");\n/* harmony import */ var _effect_creative_mjs__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./effect-creative.mjs */ \"(ssr)/./node_modules/swiper/modules/effect-creative.mjs\");\n/* harmony import */ var _effect_cards_mjs__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./effect-cards.mjs */ \"(ssr)/./node_modules/swiper/modules/effect-cards.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBaUQ7QUFDRTtBQUNJO0FBQ0E7QUFDQTtBQUNGO0FBQ0Y7QUFDUjtBQUNZO0FBQ1o7QUFDTTtBQUNlO0FBQ2I7QUFDSjtBQUNLO0FBQ1Q7QUFDZ0I7QUFDSDtBQUNBO0FBQ0E7QUFDVTtBQUNGO0FBQ04iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFyYnVja3MtdHVya2V5LWNsb25lLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL2luZGV4Lm1qcz82OWRiIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7ZGVmYXVsdCBhcyBWaXJ0dWFsfSBmcm9tICcuL3ZpcnR1YWwubWpzJztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBLZXlib2FyZH0gZnJvbSAnLi9rZXlib2FyZC5tanMnO1xuZXhwb3J0IHtkZWZhdWx0IGFzIE1vdXNld2hlZWx9IGZyb20gJy4vbW91c2V3aGVlbC5tanMnO1xuZXhwb3J0IHtkZWZhdWx0IGFzIE5hdmlnYXRpb259IGZyb20gJy4vbmF2aWdhdGlvbi5tanMnO1xuZXhwb3J0IHtkZWZhdWx0IGFzIFBhZ2luYXRpb259IGZyb20gJy4vcGFnaW5hdGlvbi5tanMnO1xuZXhwb3J0IHtkZWZhdWx0IGFzIFNjcm9sbGJhcn0gZnJvbSAnLi9zY3JvbGxiYXIubWpzJztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBQYXJhbGxheH0gZnJvbSAnLi9wYXJhbGxheC5tanMnO1xuZXhwb3J0IHtkZWZhdWx0IGFzIFpvb219IGZyb20gJy4vem9vbS5tanMnO1xuZXhwb3J0IHtkZWZhdWx0IGFzIENvbnRyb2xsZXJ9IGZyb20gJy4vY29udHJvbGxlci5tanMnO1xuZXhwb3J0IHtkZWZhdWx0IGFzIEExMXl9IGZyb20gJy4vYTExeS5tanMnO1xuZXhwb3J0IHtkZWZhdWx0IGFzIEhpc3Rvcnl9IGZyb20gJy4vaGlzdG9yeS5tanMnO1xuZXhwb3J0IHtkZWZhdWx0IGFzIEhhc2hOYXZpZ2F0aW9ufSBmcm9tICcuL2hhc2gtbmF2aWdhdGlvbi5tanMnO1xuZXhwb3J0IHtkZWZhdWx0IGFzIEF1dG9wbGF5fSBmcm9tICcuL2F1dG9wbGF5Lm1qcyc7XG5leHBvcnQge2RlZmF1bHQgYXMgVGh1bWJzfSBmcm9tICcuL3RodW1icy5tanMnO1xuZXhwb3J0IHtkZWZhdWx0IGFzIEZyZWVNb2RlfSBmcm9tICcuL2ZyZWUtbW9kZS5tanMnO1xuZXhwb3J0IHtkZWZhdWx0IGFzIEdyaWR9IGZyb20gJy4vZ3JpZC5tanMnO1xuZXhwb3J0IHtkZWZhdWx0IGFzIE1hbmlwdWxhdGlvbn0gZnJvbSAnLi9tYW5pcHVsYXRpb24ubWpzJztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBFZmZlY3RGYWRlfSBmcm9tICcuL2VmZmVjdC1mYWRlLm1qcyc7XG5leHBvcnQge2RlZmF1bHQgYXMgRWZmZWN0Q3ViZX0gZnJvbSAnLi9lZmZlY3QtY3ViZS5tanMnO1xuZXhwb3J0IHtkZWZhdWx0IGFzIEVmZmVjdEZsaXB9IGZyb20gJy4vZWZmZWN0LWZsaXAubWpzJztcbmV4cG9ydCB7ZGVmYXVsdCBhcyBFZmZlY3RDb3ZlcmZsb3d9IGZyb20gJy4vZWZmZWN0LWNvdmVyZmxvdy5tanMnO1xuZXhwb3J0IHtkZWZhdWx0IGFzIEVmZmVjdENyZWF0aXZlfSBmcm9tICcuL2VmZmVjdC1jcmVhdGl2ZS5tanMnO1xuZXhwb3J0IHtkZWZhdWx0IGFzIEVmZmVjdENhcmRzfSBmcm9tICcuL2VmZmVjdC1jYXJkcy5tanMnOyJdLCJuYW1lcyI6WyJkZWZhdWx0IiwiVmlydHVhbCIsIktleWJvYXJkIiwiTW91c2V3aGVlbCIsIk5hdmlnYXRpb24iLCJQYWdpbmF0aW9uIiwiU2Nyb2xsYmFyIiwiUGFyYWxsYXgiLCJab29tIiwiQ29udHJvbGxlciIsIkExMXkiLCJIaXN0b3J5IiwiSGFzaE5hdmlnYXRpb24iLCJBdXRvcGxheSIsIlRodW1icyIsIkZyZWVNb2RlIiwiR3JpZCIsIk1hbmlwdWxhdGlvbiIsIkVmZmVjdEZhZGUiLCJFZmZlY3RDdWJlIiwiRWZmZWN0RmxpcCIsIkVmZmVjdENvdmVyZmxvdyIsIkVmZmVjdENyZWF0aXZlIiwiRWZmZWN0Q2FyZHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/keyboard.mjs":
/*!**************************************************!*\
  !*** ./node_modules/swiper/modules/keyboard.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Keyboard)\n/* harmony export */ });\n/* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/ssr-window.esm.mjs */ \"(ssr)/./node_modules/swiper/shared/ssr-window.esm.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\n\n/* eslint-disable consistent-return */ function Keyboard({ swiper, extendParams, on, emit }) {\n    const document = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n    const window = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    swiper.keyboard = {\n        enabled: false\n    };\n    extendParams({\n        keyboard: {\n            enabled: false,\n            onlyInViewport: true,\n            pageUpDown: true\n        }\n    });\n    function handle(event) {\n        if (!swiper.enabled) return;\n        const { rtlTranslate: rtl } = swiper;\n        let e = event;\n        if (e.originalEvent) e = e.originalEvent; // jquery fix\n        const kc = e.keyCode || e.charCode;\n        const pageUpDown = swiper.params.keyboard.pageUpDown;\n        const isPageUp = pageUpDown && kc === 33;\n        const isPageDown = pageUpDown && kc === 34;\n        const isArrowLeft = kc === 37;\n        const isArrowRight = kc === 39;\n        const isArrowUp = kc === 38;\n        const isArrowDown = kc === 40;\n        // Directions locks\n        if (!swiper.allowSlideNext && (swiper.isHorizontal() && isArrowRight || swiper.isVertical() && isArrowDown || isPageDown)) {\n            return false;\n        }\n        if (!swiper.allowSlidePrev && (swiper.isHorizontal() && isArrowLeft || swiper.isVertical() && isArrowUp || isPageUp)) {\n            return false;\n        }\n        if (e.shiftKey || e.altKey || e.ctrlKey || e.metaKey) {\n            return undefined;\n        }\n        if (document.activeElement && (document.activeElement.isContentEditable || document.activeElement.nodeName && (document.activeElement.nodeName.toLowerCase() === \"input\" || document.activeElement.nodeName.toLowerCase() === \"textarea\"))) {\n            return undefined;\n        }\n        if (swiper.params.keyboard.onlyInViewport && (isPageUp || isPageDown || isArrowLeft || isArrowRight || isArrowUp || isArrowDown)) {\n            let inView = false;\n            // Check that swiper should be inside of visible area of window\n            if ((0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.d)(swiper.el, `.${swiper.params.slideClass}, swiper-slide`).length > 0 && (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.d)(swiper.el, `.${swiper.params.slideActiveClass}`).length === 0) {\n                return undefined;\n            }\n            const el = swiper.el;\n            const swiperWidth = el.clientWidth;\n            const swiperHeight = el.clientHeight;\n            const windowWidth = window.innerWidth;\n            const windowHeight = window.innerHeight;\n            const swiperOffset = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.f)(el);\n            if (rtl) swiperOffset.left -= el.scrollLeft;\n            const swiperCoord = [\n                [\n                    swiperOffset.left,\n                    swiperOffset.top\n                ],\n                [\n                    swiperOffset.left + swiperWidth,\n                    swiperOffset.top\n                ],\n                [\n                    swiperOffset.left,\n                    swiperOffset.top + swiperHeight\n                ],\n                [\n                    swiperOffset.left + swiperWidth,\n                    swiperOffset.top + swiperHeight\n                ]\n            ];\n            for(let i = 0; i < swiperCoord.length; i += 1){\n                const point = swiperCoord[i];\n                if (point[0] >= 0 && point[0] <= windowWidth && point[1] >= 0 && point[1] <= windowHeight) {\n                    if (point[0] === 0 && point[1] === 0) continue; // eslint-disable-line\n                    inView = true;\n                }\n            }\n            if (!inView) return undefined;\n        }\n        if (swiper.isHorizontal()) {\n            if (isPageUp || isPageDown || isArrowLeft || isArrowRight) {\n                if (e.preventDefault) e.preventDefault();\n                else e.returnValue = false;\n            }\n            if ((isPageDown || isArrowRight) && !rtl || (isPageUp || isArrowLeft) && rtl) swiper.slideNext();\n            if ((isPageUp || isArrowLeft) && !rtl || (isPageDown || isArrowRight) && rtl) swiper.slidePrev();\n        } else {\n            if (isPageUp || isPageDown || isArrowUp || isArrowDown) {\n                if (e.preventDefault) e.preventDefault();\n                else e.returnValue = false;\n            }\n            if (isPageDown || isArrowDown) swiper.slideNext();\n            if (isPageUp || isArrowUp) swiper.slidePrev();\n        }\n        emit(\"keyPress\", kc);\n        return undefined;\n    }\n    function enable() {\n        if (swiper.keyboard.enabled) return;\n        document.addEventListener(\"keydown\", handle);\n        swiper.keyboard.enabled = true;\n    }\n    function disable() {\n        if (!swiper.keyboard.enabled) return;\n        document.removeEventListener(\"keydown\", handle);\n        swiper.keyboard.enabled = false;\n    }\n    on(\"init\", ()=>{\n        if (swiper.params.keyboard.enabled) {\n            enable();\n        }\n    });\n    on(\"destroy\", ()=>{\n        if (swiper.keyboard.enabled) {\n            disable();\n        }\n    });\n    Object.assign(swiper.keyboard, {\n        enable,\n        disable\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/keyboard.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/manipulation.mjs":
/*!******************************************************!*\
  !*** ./node_modules/swiper/modules/manipulation.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Manipulation)\n/* harmony export */ });\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\nfunction appendSlide(slides) {\n    const swiper = this;\n    const { params, slidesEl } = swiper;\n    if (params.loop) {\n        swiper.loopDestroy();\n    }\n    const appendElement = (slideEl)=>{\n        if (typeof slideEl === \"string\") {\n            const tempDOM = document.createElement(\"div\");\n            (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.s)(tempDOM, slideEl);\n            slidesEl.append(tempDOM.children[0]);\n            (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.s)(tempDOM, \"\");\n        } else {\n            slidesEl.append(slideEl);\n        }\n    };\n    if (typeof slides === \"object\" && \"length\" in slides) {\n        for(let i = 0; i < slides.length; i += 1){\n            if (slides[i]) appendElement(slides[i]);\n        }\n    } else {\n        appendElement(slides);\n    }\n    swiper.recalcSlides();\n    if (params.loop) {\n        swiper.loopCreate();\n    }\n    if (!params.observer || swiper.isElement) {\n        swiper.update();\n    }\n}\nfunction prependSlide(slides) {\n    const swiper = this;\n    const { params, activeIndex, slidesEl } = swiper;\n    if (params.loop) {\n        swiper.loopDestroy();\n    }\n    let newActiveIndex = activeIndex + 1;\n    const prependElement = (slideEl)=>{\n        if (typeof slideEl === \"string\") {\n            const tempDOM = document.createElement(\"div\");\n            (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.s)(tempDOM, slideEl);\n            slidesEl.prepend(tempDOM.children[0]);\n            (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.s)(tempDOM, \"\");\n        } else {\n            slidesEl.prepend(slideEl);\n        }\n    };\n    if (typeof slides === \"object\" && \"length\" in slides) {\n        for(let i = 0; i < slides.length; i += 1){\n            if (slides[i]) prependElement(slides[i]);\n        }\n        newActiveIndex = activeIndex + slides.length;\n    } else {\n        prependElement(slides);\n    }\n    swiper.recalcSlides();\n    if (params.loop) {\n        swiper.loopCreate();\n    }\n    if (!params.observer || swiper.isElement) {\n        swiper.update();\n    }\n    swiper.slideTo(newActiveIndex, 0, false);\n}\nfunction addSlide(index, slides) {\n    const swiper = this;\n    const { params, activeIndex, slidesEl } = swiper;\n    let activeIndexBuffer = activeIndex;\n    if (params.loop) {\n        activeIndexBuffer -= swiper.loopedSlides;\n        swiper.loopDestroy();\n        swiper.recalcSlides();\n    }\n    const baseLength = swiper.slides.length;\n    if (index <= 0) {\n        swiper.prependSlide(slides);\n        return;\n    }\n    if (index >= baseLength) {\n        swiper.appendSlide(slides);\n        return;\n    }\n    let newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + 1 : activeIndexBuffer;\n    const slidesBuffer = [];\n    for(let i = baseLength - 1; i >= index; i -= 1){\n        const currentSlide = swiper.slides[i];\n        currentSlide.remove();\n        slidesBuffer.unshift(currentSlide);\n    }\n    if (typeof slides === \"object\" && \"length\" in slides) {\n        for(let i = 0; i < slides.length; i += 1){\n            if (slides[i]) slidesEl.append(slides[i]);\n        }\n        newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + slides.length : activeIndexBuffer;\n    } else {\n        slidesEl.append(slides);\n    }\n    for(let i = 0; i < slidesBuffer.length; i += 1){\n        slidesEl.append(slidesBuffer[i]);\n    }\n    swiper.recalcSlides();\n    if (params.loop) {\n        swiper.loopCreate();\n    }\n    if (!params.observer || swiper.isElement) {\n        swiper.update();\n    }\n    if (params.loop) {\n        swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);\n    } else {\n        swiper.slideTo(newActiveIndex, 0, false);\n    }\n}\nfunction removeSlide(slidesIndexes) {\n    const swiper = this;\n    const { params, activeIndex } = swiper;\n    let activeIndexBuffer = activeIndex;\n    if (params.loop) {\n        activeIndexBuffer -= swiper.loopedSlides;\n        swiper.loopDestroy();\n    }\n    let newActiveIndex = activeIndexBuffer;\n    let indexToRemove;\n    if (typeof slidesIndexes === \"object\" && \"length\" in slidesIndexes) {\n        for(let i = 0; i < slidesIndexes.length; i += 1){\n            indexToRemove = slidesIndexes[i];\n            if (swiper.slides[indexToRemove]) swiper.slides[indexToRemove].remove();\n            if (indexToRemove < newActiveIndex) newActiveIndex -= 1;\n        }\n        newActiveIndex = Math.max(newActiveIndex, 0);\n    } else {\n        indexToRemove = slidesIndexes;\n        if (swiper.slides[indexToRemove]) swiper.slides[indexToRemove].remove();\n        if (indexToRemove < newActiveIndex) newActiveIndex -= 1;\n        newActiveIndex = Math.max(newActiveIndex, 0);\n    }\n    swiper.recalcSlides();\n    if (params.loop) {\n        swiper.loopCreate();\n    }\n    if (!params.observer || swiper.isElement) {\n        swiper.update();\n    }\n    if (params.loop) {\n        swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);\n    } else {\n        swiper.slideTo(newActiveIndex, 0, false);\n    }\n}\nfunction removeAllSlides() {\n    const swiper = this;\n    const slidesIndexes = [];\n    for(let i = 0; i < swiper.slides.length; i += 1){\n        slidesIndexes.push(i);\n    }\n    swiper.removeSlide(slidesIndexes);\n}\nfunction Manipulation({ swiper }) {\n    Object.assign(swiper, {\n        appendSlide: appendSlide.bind(swiper),\n        prependSlide: prependSlide.bind(swiper),\n        addSlide: addSlide.bind(swiper),\n        removeSlide: removeSlide.bind(swiper),\n        removeAllSlides: removeAllSlides.bind(swiper)\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/manipulation.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/mousewheel.mjs":
/*!****************************************************!*\
  !*** ./node_modules/swiper/modules/mousewheel.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Mousewheel)\n/* harmony export */ });\n/* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/ssr-window.esm.mjs */ \"(ssr)/./node_modules/swiper/shared/ssr-window.esm.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\n\n/* eslint-disable consistent-return */ function Mousewheel({ swiper, extendParams, on, emit }) {\n    const window = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    extendParams({\n        mousewheel: {\n            enabled: false,\n            releaseOnEdges: false,\n            invert: false,\n            forceToAxis: false,\n            sensitivity: 1,\n            eventsTarget: \"container\",\n            thresholdDelta: null,\n            thresholdTime: null,\n            noMousewheelClass: \"swiper-no-mousewheel\"\n        }\n    });\n    swiper.mousewheel = {\n        enabled: false\n    };\n    let timeout;\n    let lastScrollTime = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.h)();\n    let lastEventBeforeSnap;\n    const recentWheelEvents = [];\n    function normalize(e) {\n        // Reasonable defaults\n        const PIXEL_STEP = 10;\n        const LINE_HEIGHT = 40;\n        const PAGE_HEIGHT = 800;\n        let sX = 0;\n        let sY = 0; // spinX, spinY\n        let pX = 0;\n        let pY = 0; // pixelX, pixelY\n        // Legacy\n        if (\"detail\" in e) {\n            sY = e.detail;\n        }\n        if (\"wheelDelta\" in e) {\n            sY = -e.wheelDelta / 120;\n        }\n        if (\"wheelDeltaY\" in e) {\n            sY = -e.wheelDeltaY / 120;\n        }\n        if (\"wheelDeltaX\" in e) {\n            sX = -e.wheelDeltaX / 120;\n        }\n        // side scrolling on FF with DOMMouseScroll\n        if (\"axis\" in e && e.axis === e.HORIZONTAL_AXIS) {\n            sX = sY;\n            sY = 0;\n        }\n        pX = sX * PIXEL_STEP;\n        pY = sY * PIXEL_STEP;\n        if (\"deltaY\" in e) {\n            pY = e.deltaY;\n        }\n        if (\"deltaX\" in e) {\n            pX = e.deltaX;\n        }\n        if (e.shiftKey && !pX) {\n            // if user scrolls with shift he wants horizontal scroll\n            pX = pY;\n            pY = 0;\n        }\n        if ((pX || pY) && e.deltaMode) {\n            if (e.deltaMode === 1) {\n                // delta in LINE units\n                pX *= LINE_HEIGHT;\n                pY *= LINE_HEIGHT;\n            } else {\n                // delta in PAGE units\n                pX *= PAGE_HEIGHT;\n                pY *= PAGE_HEIGHT;\n            }\n        }\n        // Fall-back if spin cannot be determined\n        if (pX && !sX) {\n            sX = pX < 1 ? -1 : 1;\n        }\n        if (pY && !sY) {\n            sY = pY < 1 ? -1 : 1;\n        }\n        return {\n            spinX: sX,\n            spinY: sY,\n            pixelX: pX,\n            pixelY: pY\n        };\n    }\n    function handleMouseEnter() {\n        if (!swiper.enabled) return;\n        swiper.mouseEntered = true;\n    }\n    function handleMouseLeave() {\n        if (!swiper.enabled) return;\n        swiper.mouseEntered = false;\n    }\n    function animateSlider(newEvent) {\n        if (swiper.params.mousewheel.thresholdDelta && newEvent.delta < swiper.params.mousewheel.thresholdDelta) {\n            // Prevent if delta of wheel scroll delta is below configured threshold\n            return false;\n        }\n        if (swiper.params.mousewheel.thresholdTime && (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.h)() - lastScrollTime < swiper.params.mousewheel.thresholdTime) {\n            // Prevent if time between scrolls is below configured threshold\n            return false;\n        }\n        // If the movement is NOT big enough and\n        // if the last time the user scrolled was too close to the current one (avoid continuously triggering the slider):\n        //   Don't go any further (avoid insignificant scroll movement).\n        if (newEvent.delta >= 6 && (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.h)() - lastScrollTime < 60) {\n            // Return false as a default\n            return true;\n        }\n        // If user is scrolling towards the end:\n        //   If the slider hasn't hit the latest slide or\n        //   if the slider is a loop and\n        //   if the slider isn't moving right now:\n        //     Go to next slide and\n        //     emit a scroll event.\n        // Else (the user is scrolling towards the beginning) and\n        // if the slider hasn't hit the first slide or\n        // if the slider is a loop and\n        // if the slider isn't moving right now:\n        //   Go to prev slide and\n        //   emit a scroll event.\n        if (newEvent.direction < 0) {\n            if ((!swiper.isEnd || swiper.params.loop) && !swiper.animating) {\n                swiper.slideNext();\n                emit(\"scroll\", newEvent.raw);\n            }\n        } else if ((!swiper.isBeginning || swiper.params.loop) && !swiper.animating) {\n            swiper.slidePrev();\n            emit(\"scroll\", newEvent.raw);\n        }\n        // If you got here is because an animation has been triggered so store the current time\n        lastScrollTime = new window.Date().getTime();\n        // Return false as a default\n        return false;\n    }\n    function releaseScroll(newEvent) {\n        const params = swiper.params.mousewheel;\n        if (newEvent.direction < 0) {\n            if (swiper.isEnd && !swiper.params.loop && params.releaseOnEdges) {\n                // Return true to animate scroll on edges\n                return true;\n            }\n        } else if (swiper.isBeginning && !swiper.params.loop && params.releaseOnEdges) {\n            // Return true to animate scroll on edges\n            return true;\n        }\n        return false;\n    }\n    function handle(event1) {\n        let e = event1;\n        let disableParentSwiper = true;\n        if (!swiper.enabled) return;\n        // Ignore event if the target or its parents have the swiper-no-mousewheel class\n        if (event1.target.closest(`.${swiper.params.mousewheel.noMousewheelClass}`)) return;\n        const params = swiper.params.mousewheel;\n        if (swiper.params.cssMode) {\n            e.preventDefault();\n        }\n        let targetEl = swiper.el;\n        if (swiper.params.mousewheel.eventsTarget !== \"container\") {\n            targetEl = document.querySelector(swiper.params.mousewheel.eventsTarget);\n        }\n        const targetElContainsTarget = targetEl && targetEl.contains(e.target);\n        if (!swiper.mouseEntered && !targetElContainsTarget && !params.releaseOnEdges) return true;\n        if (e.originalEvent) e = e.originalEvent; // jquery fix\n        let delta = 0;\n        const rtlFactor = swiper.rtlTranslate ? -1 : 1;\n        const data = normalize(e);\n        if (params.forceToAxis) {\n            if (swiper.isHorizontal()) {\n                if (Math.abs(data.pixelX) > Math.abs(data.pixelY)) delta = -data.pixelX * rtlFactor;\n                else return true;\n            } else if (Math.abs(data.pixelY) > Math.abs(data.pixelX)) delta = -data.pixelY;\n            else return true;\n        } else {\n            delta = Math.abs(data.pixelX) > Math.abs(data.pixelY) ? -data.pixelX * rtlFactor : -data.pixelY;\n        }\n        if (delta === 0) return true;\n        if (params.invert) delta = -delta;\n        // Get the scroll positions\n        let positions = swiper.getTranslate() + delta * params.sensitivity;\n        if (positions >= swiper.minTranslate()) positions = swiper.minTranslate();\n        if (positions <= swiper.maxTranslate()) positions = swiper.maxTranslate();\n        // When loop is true:\n        //     the disableParentSwiper will be true.\n        // When loop is false:\n        //     if the scroll positions is not on edge,\n        //     then the disableParentSwiper will be true.\n        //     if the scroll on edge positions,\n        //     then the disableParentSwiper will be false.\n        disableParentSwiper = swiper.params.loop ? true : !(positions === swiper.minTranslate() || positions === swiper.maxTranslate());\n        if (disableParentSwiper && swiper.params.nested) e.stopPropagation();\n        if (!swiper.params.freeMode || !swiper.params.freeMode.enabled) {\n            // Register the new event in a variable which stores the relevant data\n            const newEvent = {\n                time: (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.h)(),\n                delta: Math.abs(delta),\n                direction: Math.sign(delta),\n                raw: event1\n            };\n            // Keep the most recent events\n            if (recentWheelEvents.length >= 2) {\n                recentWheelEvents.shift(); // only store the last N events\n            }\n            const prevEvent = recentWheelEvents.length ? recentWheelEvents[recentWheelEvents.length - 1] : undefined;\n            recentWheelEvents.push(newEvent);\n            // If there is at least one previous recorded event:\n            //   If direction has changed or\n            //   if the scroll is quicker than the previous one:\n            //     Animate the slider.\n            // Else (this is the first time the wheel is moved):\n            //     Animate the slider.\n            if (prevEvent) {\n                if (newEvent.direction !== prevEvent.direction || newEvent.delta > prevEvent.delta || newEvent.time > prevEvent.time + 150) {\n                    animateSlider(newEvent);\n                }\n            } else {\n                animateSlider(newEvent);\n            }\n            // If it's time to release the scroll:\n            //   Return now so you don't hit the preventDefault.\n            if (releaseScroll(newEvent)) {\n                return true;\n            }\n        } else {\n            // Freemode or scrollContainer:\n            // If we recently snapped after a momentum scroll, then ignore wheel events\n            // to give time for the deceleration to finish. Stop ignoring after 500 msecs\n            // or if it's a new scroll (larger delta or inverse sign as last event before\n            // an end-of-momentum snap).\n            const newEvent = {\n                time: (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.h)(),\n                delta: Math.abs(delta),\n                direction: Math.sign(delta)\n            };\n            const ignoreWheelEvents = lastEventBeforeSnap && newEvent.time < lastEventBeforeSnap.time + 500 && newEvent.delta <= lastEventBeforeSnap.delta && newEvent.direction === lastEventBeforeSnap.direction;\n            if (!ignoreWheelEvents) {\n                lastEventBeforeSnap = undefined;\n                let position = swiper.getTranslate() + delta * params.sensitivity;\n                const wasBeginning = swiper.isBeginning;\n                const wasEnd = swiper.isEnd;\n                if (position >= swiper.minTranslate()) position = swiper.minTranslate();\n                if (position <= swiper.maxTranslate()) position = swiper.maxTranslate();\n                swiper.setTransition(0);\n                swiper.setTranslate(position);\n                swiper.updateProgress();\n                swiper.updateActiveIndex();\n                swiper.updateSlidesClasses();\n                if (!wasBeginning && swiper.isBeginning || !wasEnd && swiper.isEnd) {\n                    swiper.updateSlidesClasses();\n                }\n                if (swiper.params.loop) {\n                    swiper.loopFix({\n                        direction: newEvent.direction < 0 ? \"next\" : \"prev\",\n                        byMousewheel: true\n                    });\n                }\n                if (swiper.params.freeMode.sticky) {\n                    // When wheel scrolling starts with sticky (aka snap) enabled, then detect\n                    // the end of a momentum scroll by storing recent (N=15?) wheel events.\n                    // 1. do all N events have decreasing or same (absolute value) delta?\n                    // 2. did all N events arrive in the last M (M=500?) msecs?\n                    // 3. does the earliest event have an (absolute value) delta that's\n                    //    at least P (P=1?) larger than the most recent event's delta?\n                    // 4. does the latest event have a delta that's smaller than Q (Q=6?) pixels?\n                    // If 1-4 are \"yes\" then we're near the end of a momentum scroll deceleration.\n                    // Snap immediately and ignore remaining wheel events in this scroll.\n                    // See comment above for \"remaining wheel events in this scroll\" determination.\n                    // If 1-4 aren't satisfied, then wait to snap until 500ms after the last event.\n                    clearTimeout(timeout);\n                    timeout = undefined;\n                    if (recentWheelEvents.length >= 15) {\n                        recentWheelEvents.shift(); // only store the last N events\n                    }\n                    const prevEvent = recentWheelEvents.length ? recentWheelEvents[recentWheelEvents.length - 1] : undefined;\n                    const firstEvent = recentWheelEvents[0];\n                    recentWheelEvents.push(newEvent);\n                    if (prevEvent && (newEvent.delta > prevEvent.delta || newEvent.direction !== prevEvent.direction)) {\n                        // Increasing or reverse-sign delta means the user started scrolling again. Clear the wheel event log.\n                        recentWheelEvents.splice(0);\n                    } else if (recentWheelEvents.length >= 15 && newEvent.time - firstEvent.time < 500 && firstEvent.delta - newEvent.delta >= 1 && newEvent.delta <= 6) {\n                        // We're at the end of the deceleration of a momentum scroll, so there's no need\n                        // to wait for more events. Snap ASAP on the next tick.\n                        // Also, because there's some remaining momentum we'll bias the snap in the\n                        // direction of the ongoing scroll because it's better UX for the scroll to snap\n                        // in the same direction as the scroll instead of reversing to snap.  Therefore,\n                        // if it's already scrolled more than 20% in the current direction, keep going.\n                        const snapToThreshold = delta > 0 ? 0.8 : 0.2;\n                        lastEventBeforeSnap = newEvent;\n                        recentWheelEvents.splice(0);\n                        timeout = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(()=>{\n                            if (swiper.destroyed || !swiper.params) return;\n                            swiper.slideToClosest(swiper.params.speed, true, undefined, snapToThreshold);\n                        }, 0); // no delay; move on next tick\n                    }\n                    if (!timeout) {\n                        // if we get here, then we haven't detected the end of a momentum scroll, so\n                        // we'll consider a scroll \"complete\" when there haven't been any wheel events\n                        // for 500ms.\n                        timeout = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(()=>{\n                            if (swiper.destroyed || !swiper.params) return;\n                            const snapToThreshold = 0.5;\n                            lastEventBeforeSnap = newEvent;\n                            recentWheelEvents.splice(0);\n                            swiper.slideToClosest(swiper.params.speed, true, undefined, snapToThreshold);\n                        }, 500);\n                    }\n                }\n                // Emit event\n                if (!ignoreWheelEvents) emit(\"scroll\", e);\n                // Stop autoplay\n                if (swiper.params.autoplay && swiper.params.autoplay.disableOnInteraction) swiper.autoplay.stop();\n                // Return page scroll on edge positions\n                if (params.releaseOnEdges && (position === swiper.minTranslate() || position === swiper.maxTranslate())) {\n                    return true;\n                }\n            }\n        }\n        if (e.preventDefault) e.preventDefault();\n        else e.returnValue = false;\n        return false;\n    }\n    function events(method) {\n        let targetEl = swiper.el;\n        if (swiper.params.mousewheel.eventsTarget !== \"container\") {\n            targetEl = document.querySelector(swiper.params.mousewheel.eventsTarget);\n        }\n        targetEl[method](\"mouseenter\", handleMouseEnter);\n        targetEl[method](\"mouseleave\", handleMouseLeave);\n        targetEl[method](\"wheel\", handle);\n    }\n    function enable() {\n        if (swiper.params.cssMode) {\n            swiper.wrapperEl.removeEventListener(\"wheel\", handle);\n            return true;\n        }\n        if (swiper.mousewheel.enabled) return false;\n        events(\"addEventListener\");\n        swiper.mousewheel.enabled = true;\n        return true;\n    }\n    function disable() {\n        if (swiper.params.cssMode) {\n            swiper.wrapperEl.addEventListener(event, handle);\n            return true;\n        }\n        if (!swiper.mousewheel.enabled) return false;\n        events(\"removeEventListener\");\n        swiper.mousewheel.enabled = false;\n        return true;\n    }\n    on(\"init\", ()=>{\n        if (!swiper.params.mousewheel.enabled && swiper.params.cssMode) {\n            disable();\n        }\n        if (swiper.params.mousewheel.enabled) enable();\n    });\n    on(\"destroy\", ()=>{\n        if (swiper.params.cssMode) {\n            enable();\n        }\n        if (swiper.mousewheel.enabled) disable();\n    });\n    Object.assign(swiper.mousewheel, {\n        enable,\n        disable\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/mousewheel.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/navigation.mjs":
/*!****************************************************!*\
  !*** ./node_modules/swiper/modules/navigation.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Navigation)\n/* harmony export */ });\n/* harmony import */ var _shared_create_element_if_not_defined_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/create-element-if-not-defined.mjs */ \"(ssr)/./node_modules/swiper/shared/create-element-if-not-defined.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\n\nconst arrowSvg = `<svg class=\"swiper-navigation-icon\" width=\"11\" height=\"20\" viewBox=\"0 0 11 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0.38296 20.0762C0.111788 19.805 0.111788 19.3654 0.38296 19.0942L9.19758 10.2796L0.38296 1.46497C0.111788 1.19379 0.111788 0.754138 0.38296 0.482966C0.654131 0.211794 1.09379 0.211794 1.36496 0.482966L10.4341 9.55214C10.8359 9.9539 10.8359 10.6053 10.4341 11.007L1.36496 20.0762C1.09379 20.3474 0.654131 20.3474 0.38296 20.0762Z\" fill=\"currentColor\"/></svg>`;\nfunction Navigation({ swiper, extendParams, on, emit }) {\n    extendParams({\n        navigation: {\n            nextEl: null,\n            prevEl: null,\n            addIcons: true,\n            hideOnClick: false,\n            disabledClass: \"swiper-button-disabled\",\n            hiddenClass: \"swiper-button-hidden\",\n            lockClass: \"swiper-button-lock\",\n            navigationDisabledClass: \"swiper-navigation-disabled\"\n        }\n    });\n    swiper.navigation = {\n        nextEl: null,\n        prevEl: null,\n        arrowSvg\n    };\n    function getEl(el) {\n        let res;\n        if (el && typeof el === \"string\" && swiper.isElement) {\n            res = swiper.el.querySelector(el) || swiper.hostEl.querySelector(el);\n            if (res) return res;\n        }\n        if (el) {\n            if (typeof el === \"string\") res = [\n                ...document.querySelectorAll(el)\n            ];\n            if (swiper.params.uniqueNavElements && typeof el === \"string\" && res && res.length > 1 && swiper.el.querySelectorAll(el).length === 1) {\n                res = swiper.el.querySelector(el);\n            } else if (res && res.length === 1) {\n                res = res[0];\n            }\n        }\n        if (el && !res) return el;\n        // if (Array.isArray(res) && res.length === 1) res = res[0];\n        return res;\n    }\n    function toggleEl(el, disabled) {\n        const params = swiper.params.navigation;\n        el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(el);\n        el.forEach((subEl)=>{\n            if (subEl) {\n                subEl.classList[disabled ? \"add\" : \"remove\"](...params.disabledClass.split(\" \"));\n                if (subEl.tagName === \"BUTTON\") subEl.disabled = disabled;\n                if (swiper.params.watchOverflow && swiper.enabled) {\n                    subEl.classList[swiper.isLocked ? \"add\" : \"remove\"](params.lockClass);\n                }\n            }\n        });\n    }\n    function update() {\n        // Update Navigation Buttons\n        const { nextEl, prevEl } = swiper.navigation;\n        if (swiper.params.loop) {\n            toggleEl(prevEl, false);\n            toggleEl(nextEl, false);\n            return;\n        }\n        toggleEl(prevEl, swiper.isBeginning && !swiper.params.rewind);\n        toggleEl(nextEl, swiper.isEnd && !swiper.params.rewind);\n    }\n    function onPrevClick(e) {\n        e.preventDefault();\n        if (swiper.isBeginning && !swiper.params.loop && !swiper.params.rewind) return;\n        swiper.slidePrev();\n        emit(\"navigationPrev\");\n    }\n    function onNextClick(e) {\n        e.preventDefault();\n        if (swiper.isEnd && !swiper.params.loop && !swiper.params.rewind) return;\n        swiper.slideNext();\n        emit(\"navigationNext\");\n    }\n    function init() {\n        const params = swiper.params.navigation;\n        swiper.params.navigation = (0,_shared_create_element_if_not_defined_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(swiper, swiper.originalParams.navigation, swiper.params.navigation, {\n            nextEl: \"swiper-button-next\",\n            prevEl: \"swiper-button-prev\"\n        });\n        if (!(params.nextEl || params.prevEl)) return;\n        let nextEl = getEl(params.nextEl);\n        let prevEl = getEl(params.prevEl);\n        Object.assign(swiper.navigation, {\n            nextEl,\n            prevEl\n        });\n        nextEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(nextEl);\n        prevEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(prevEl);\n        const initButton = (el, dir)=>{\n            if (el) {\n                if (params.addIcons && el.matches(\".swiper-button-next,.swiper-button-prev\") && !el.querySelector(\"svg\")) {\n                    const tempEl = document.createElement(\"div\");\n                    (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.s)(tempEl, arrowSvg);\n                    el.appendChild(tempEl.querySelector(\"svg\"));\n                    tempEl.remove();\n                }\n                el.addEventListener(\"click\", dir === \"next\" ? onNextClick : onPrevClick);\n            }\n            if (!swiper.enabled && el) {\n                el.classList.add(...params.lockClass.split(\" \"));\n            }\n        };\n        nextEl.forEach((el)=>initButton(el, \"next\"));\n        prevEl.forEach((el)=>initButton(el, \"prev\"));\n    }\n    function destroy() {\n        let { nextEl, prevEl } = swiper.navigation;\n        nextEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(nextEl);\n        prevEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(prevEl);\n        const destroyButton = (el, dir)=>{\n            el.removeEventListener(\"click\", dir === \"next\" ? onNextClick : onPrevClick);\n            el.classList.remove(...swiper.params.navigation.disabledClass.split(\" \"));\n        };\n        nextEl.forEach((el)=>destroyButton(el, \"next\"));\n        prevEl.forEach((el)=>destroyButton(el, \"prev\"));\n    }\n    on(\"init\", ()=>{\n        if (swiper.params.navigation.enabled === false) {\n            // eslint-disable-next-line\n            disable();\n        } else {\n            init();\n            update();\n        }\n    });\n    on(\"toEdge fromEdge lock unlock\", ()=>{\n        update();\n    });\n    on(\"destroy\", ()=>{\n        destroy();\n    });\n    on(\"enable disable\", ()=>{\n        let { nextEl, prevEl } = swiper.navigation;\n        nextEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(nextEl);\n        prevEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(prevEl);\n        if (swiper.enabled) {\n            update();\n            return;\n        }\n        [\n            ...nextEl,\n            ...prevEl\n        ].filter((el)=>!!el).forEach((el)=>el.classList.add(swiper.params.navigation.lockClass));\n    });\n    on(\"click\", (_s, e)=>{\n        let { nextEl, prevEl } = swiper.navigation;\n        nextEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(nextEl);\n        prevEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(prevEl);\n        const targetEl = e.target;\n        let targetIsButton = prevEl.includes(targetEl) || nextEl.includes(targetEl);\n        if (swiper.isElement && !targetIsButton) {\n            const path = e.path || e.composedPath && e.composedPath();\n            if (path) {\n                targetIsButton = path.find((pathEl)=>nextEl.includes(pathEl) || prevEl.includes(pathEl));\n            }\n        }\n        if (swiper.params.navigation.hideOnClick && !targetIsButton) {\n            if (swiper.pagination && swiper.params.pagination && swiper.params.pagination.clickable && (swiper.pagination.el === targetEl || swiper.pagination.el.contains(targetEl))) return;\n            let isHidden;\n            if (nextEl.length) {\n                isHidden = nextEl[0].classList.contains(swiper.params.navigation.hiddenClass);\n            } else if (prevEl.length) {\n                isHidden = prevEl[0].classList.contains(swiper.params.navigation.hiddenClass);\n            }\n            if (isHidden === true) {\n                emit(\"navigationShow\");\n            } else {\n                emit(\"navigationHide\");\n            }\n            [\n                ...nextEl,\n                ...prevEl\n            ].filter((el)=>!!el).forEach((el)=>el.classList.toggle(swiper.params.navigation.hiddenClass));\n        }\n    });\n    const enable = ()=>{\n        swiper.el.classList.remove(...swiper.params.navigation.navigationDisabledClass.split(\" \"));\n        init();\n        update();\n    };\n    const disable = ()=>{\n        swiper.el.classList.add(...swiper.params.navigation.navigationDisabledClass.split(\" \"));\n        destroy();\n    };\n    Object.assign(swiper.navigation, {\n        enable,\n        disable,\n        update,\n        init,\n        destroy\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/navigation.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/pagination.mjs":
/*!****************************************************!*\
  !*** ./node_modules/swiper/modules/pagination.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Pagination)\n/* harmony export */ });\n/* harmony import */ var _shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/classes-to-selector.mjs */ \"(ssr)/./node_modules/swiper/shared/classes-to-selector.mjs\");\n/* harmony import */ var _shared_create_element_if_not_defined_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/create-element-if-not-defined.mjs */ \"(ssr)/./node_modules/swiper/shared/create-element-if-not-defined.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\n\n\nfunction Pagination({ swiper, extendParams, on, emit }) {\n    const pfx = \"swiper-pagination\";\n    extendParams({\n        pagination: {\n            el: null,\n            bulletElement: \"span\",\n            clickable: false,\n            hideOnClick: false,\n            renderBullet: null,\n            renderProgressbar: null,\n            renderFraction: null,\n            renderCustom: null,\n            progressbarOpposite: false,\n            type: \"bullets\",\n            // 'bullets' or 'progressbar' or 'fraction' or 'custom'\n            dynamicBullets: false,\n            dynamicMainBullets: 1,\n            formatFractionCurrent: (number)=>number,\n            formatFractionTotal: (number)=>number,\n            bulletClass: `${pfx}-bullet`,\n            bulletActiveClass: `${pfx}-bullet-active`,\n            modifierClass: `${pfx}-`,\n            currentClass: `${pfx}-current`,\n            totalClass: `${pfx}-total`,\n            hiddenClass: `${pfx}-hidden`,\n            progressbarFillClass: `${pfx}-progressbar-fill`,\n            progressbarOppositeClass: `${pfx}-progressbar-opposite`,\n            clickableClass: `${pfx}-clickable`,\n            lockClass: `${pfx}-lock`,\n            horizontalClass: `${pfx}-horizontal`,\n            verticalClass: `${pfx}-vertical`,\n            paginationDisabledClass: `${pfx}-disabled`\n        }\n    });\n    swiper.pagination = {\n        el: null,\n        bullets: []\n    };\n    let bulletSize;\n    let dynamicBulletIndex = 0;\n    function isPaginationDisabled() {\n        return !swiper.params.pagination.el || !swiper.pagination.el || Array.isArray(swiper.pagination.el) && swiper.pagination.el.length === 0;\n    }\n    function setSideBullets(bulletEl, position) {\n        const { bulletActiveClass } = swiper.params.pagination;\n        if (!bulletEl) return;\n        bulletEl = bulletEl[`${position === \"prev\" ? \"previous\" : \"next\"}ElementSibling`];\n        if (bulletEl) {\n            bulletEl.classList.add(`${bulletActiveClass}-${position}`);\n            bulletEl = bulletEl[`${position === \"prev\" ? \"previous\" : \"next\"}ElementSibling`];\n            if (bulletEl) {\n                bulletEl.classList.add(`${bulletActiveClass}-${position}-${position}`);\n            }\n        }\n    }\n    function getMoveDirection(prevIndex, nextIndex, length) {\n        prevIndex = prevIndex % length;\n        nextIndex = nextIndex % length;\n        if (nextIndex === prevIndex + 1) {\n            return \"next\";\n        } else if (nextIndex === prevIndex - 1) {\n            return \"previous\";\n        }\n        return;\n    }\n    function onBulletClick(e) {\n        const bulletEl = e.target.closest((0,_shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(swiper.params.pagination.bulletClass));\n        if (!bulletEl) {\n            return;\n        }\n        e.preventDefault();\n        const index = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.j)(bulletEl) * swiper.params.slidesPerGroup;\n        if (swiper.params.loop) {\n            if (swiper.realIndex === index) return;\n            const moveDirection = getMoveDirection(swiper.realIndex, index, swiper.slides.length);\n            if (moveDirection === \"next\") {\n                swiper.slideNext();\n            } else if (moveDirection === \"previous\") {\n                swiper.slidePrev();\n            } else {\n                swiper.slideToLoop(index);\n            }\n        } else {\n            swiper.slideTo(index);\n        }\n    }\n    function update() {\n        // Render || Update Pagination bullets/items\n        const rtl = swiper.rtl;\n        const params = swiper.params.pagination;\n        if (isPaginationDisabled()) return;\n        let el = swiper.pagination.el;\n        el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\n        // Current/Total\n        let current;\n        let previousIndex;\n        const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;\n        const total = swiper.params.loop ? Math.ceil(slidesLength / swiper.params.slidesPerGroup) : swiper.snapGrid.length;\n        if (swiper.params.loop) {\n            previousIndex = swiper.previousRealIndex || 0;\n            current = swiper.params.slidesPerGroup > 1 ? Math.floor(swiper.realIndex / swiper.params.slidesPerGroup) : swiper.realIndex;\n        } else if (typeof swiper.snapIndex !== \"undefined\") {\n            current = swiper.snapIndex;\n            previousIndex = swiper.previousSnapIndex;\n        } else {\n            previousIndex = swiper.previousIndex || 0;\n            current = swiper.activeIndex || 0;\n        }\n        // Types\n        if (params.type === \"bullets\" && swiper.pagination.bullets && swiper.pagination.bullets.length > 0) {\n            const bullets = swiper.pagination.bullets;\n            let firstIndex;\n            let lastIndex;\n            let midIndex;\n            if (params.dynamicBullets) {\n                bulletSize = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.i)(bullets[0], swiper.isHorizontal() ? \"width\" : \"height\", true);\n                el.forEach((subEl)=>{\n                    subEl.style[swiper.isHorizontal() ? \"width\" : \"height\"] = `${bulletSize * (params.dynamicMainBullets + 4)}px`;\n                });\n                if (params.dynamicMainBullets > 1 && previousIndex !== undefined) {\n                    dynamicBulletIndex += current - (previousIndex || 0);\n                    if (dynamicBulletIndex > params.dynamicMainBullets - 1) {\n                        dynamicBulletIndex = params.dynamicMainBullets - 1;\n                    } else if (dynamicBulletIndex < 0) {\n                        dynamicBulletIndex = 0;\n                    }\n                }\n                firstIndex = Math.max(current - dynamicBulletIndex, 0);\n                lastIndex = firstIndex + (Math.min(bullets.length, params.dynamicMainBullets) - 1);\n                midIndex = (lastIndex + firstIndex) / 2;\n            }\n            bullets.forEach((bulletEl)=>{\n                const classesToRemove = [\n                    ...[\n                        \"\",\n                        \"-next\",\n                        \"-next-next\",\n                        \"-prev\",\n                        \"-prev-prev\",\n                        \"-main\"\n                    ].map((suffix)=>`${params.bulletActiveClass}${suffix}`)\n                ].map((s)=>typeof s === \"string\" && s.includes(\" \") ? s.split(\" \") : s).flat();\n                bulletEl.classList.remove(...classesToRemove);\n            });\n            if (el.length > 1) {\n                bullets.forEach((bullet)=>{\n                    const bulletIndex = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.j)(bullet);\n                    if (bulletIndex === current) {\n                        bullet.classList.add(...params.bulletActiveClass.split(\" \"));\n                    } else if (swiper.isElement) {\n                        bullet.setAttribute(\"part\", \"bullet\");\n                    }\n                    if (params.dynamicBullets) {\n                        if (bulletIndex >= firstIndex && bulletIndex <= lastIndex) {\n                            bullet.classList.add(...`${params.bulletActiveClass}-main`.split(\" \"));\n                        }\n                        if (bulletIndex === firstIndex) {\n                            setSideBullets(bullet, \"prev\");\n                        }\n                        if (bulletIndex === lastIndex) {\n                            setSideBullets(bullet, \"next\");\n                        }\n                    }\n                });\n            } else {\n                const bullet = bullets[current];\n                if (bullet) {\n                    bullet.classList.add(...params.bulletActiveClass.split(\" \"));\n                }\n                if (swiper.isElement) {\n                    bullets.forEach((bulletEl, bulletIndex)=>{\n                        bulletEl.setAttribute(\"part\", bulletIndex === current ? \"bullet-active\" : \"bullet\");\n                    });\n                }\n                if (params.dynamicBullets) {\n                    const firstDisplayedBullet = bullets[firstIndex];\n                    const lastDisplayedBullet = bullets[lastIndex];\n                    for(let i = firstIndex; i <= lastIndex; i += 1){\n                        if (bullets[i]) {\n                            bullets[i].classList.add(...`${params.bulletActiveClass}-main`.split(\" \"));\n                        }\n                    }\n                    setSideBullets(firstDisplayedBullet, \"prev\");\n                    setSideBullets(lastDisplayedBullet, \"next\");\n                }\n            }\n            if (params.dynamicBullets) {\n                const dynamicBulletsLength = Math.min(bullets.length, params.dynamicMainBullets + 4);\n                const bulletsOffset = (bulletSize * dynamicBulletsLength - bulletSize) / 2 - midIndex * bulletSize;\n                const offsetProp = rtl ? \"right\" : \"left\";\n                bullets.forEach((bullet)=>{\n                    bullet.style[swiper.isHorizontal() ? offsetProp : \"top\"] = `${bulletsOffset}px`;\n                });\n            }\n        }\n        el.forEach((subEl, subElIndex)=>{\n            if (params.type === \"fraction\") {\n                subEl.querySelectorAll((0,_shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(params.currentClass)).forEach((fractionEl)=>{\n                    fractionEl.textContent = params.formatFractionCurrent(current + 1);\n                });\n                subEl.querySelectorAll((0,_shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(params.totalClass)).forEach((totalEl)=>{\n                    totalEl.textContent = params.formatFractionTotal(total);\n                });\n            }\n            if (params.type === \"progressbar\") {\n                let progressbarDirection;\n                if (params.progressbarOpposite) {\n                    progressbarDirection = swiper.isHorizontal() ? \"vertical\" : \"horizontal\";\n                } else {\n                    progressbarDirection = swiper.isHorizontal() ? \"horizontal\" : \"vertical\";\n                }\n                const scale = (current + 1) / total;\n                let scaleX = 1;\n                let scaleY = 1;\n                if (progressbarDirection === \"horizontal\") {\n                    scaleX = scale;\n                } else {\n                    scaleY = scale;\n                }\n                subEl.querySelectorAll((0,_shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(params.progressbarFillClass)).forEach((progressEl)=>{\n                    progressEl.style.transform = `translate3d(0,0,0) scaleX(${scaleX}) scaleY(${scaleY})`;\n                    progressEl.style.transitionDuration = `${swiper.params.speed}ms`;\n                });\n            }\n            if (params.type === \"custom\" && params.renderCustom) {\n                (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.s)(subEl, params.renderCustom(swiper, current + 1, total));\n                if (subElIndex === 0) emit(\"paginationRender\", subEl);\n            } else {\n                if (subElIndex === 0) emit(\"paginationRender\", subEl);\n                emit(\"paginationUpdate\", subEl);\n            }\n            if (swiper.params.watchOverflow && swiper.enabled) {\n                subEl.classList[swiper.isLocked ? \"add\" : \"remove\"](params.lockClass);\n            }\n        });\n    }\n    function render() {\n        // Render Container\n        const params = swiper.params.pagination;\n        if (isPaginationDisabled()) return;\n        const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.grid && swiper.params.grid.rows > 1 ? swiper.slides.length / Math.ceil(swiper.params.grid.rows) : swiper.slides.length;\n        let el = swiper.pagination.el;\n        el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\n        let paginationHTML = \"\";\n        if (params.type === \"bullets\") {\n            let numberOfBullets = swiper.params.loop ? Math.ceil(slidesLength / swiper.params.slidesPerGroup) : swiper.snapGrid.length;\n            if (swiper.params.freeMode && swiper.params.freeMode.enabled && numberOfBullets > slidesLength) {\n                numberOfBullets = slidesLength;\n            }\n            for(let i = 0; i < numberOfBullets; i += 1){\n                if (params.renderBullet) {\n                    paginationHTML += params.renderBullet.call(swiper, i, params.bulletClass);\n                } else {\n                    // prettier-ignore\n                    paginationHTML += `<${params.bulletElement} ${swiper.isElement ? 'part=\"bullet\"' : \"\"} class=\"${params.bulletClass}\"></${params.bulletElement}>`;\n                }\n            }\n        }\n        if (params.type === \"fraction\") {\n            if (params.renderFraction) {\n                paginationHTML = params.renderFraction.call(swiper, params.currentClass, params.totalClass);\n            } else {\n                paginationHTML = `<span class=\"${params.currentClass}\"></span>` + \" / \" + `<span class=\"${params.totalClass}\"></span>`;\n            }\n        }\n        if (params.type === \"progressbar\") {\n            if (params.renderProgressbar) {\n                paginationHTML = params.renderProgressbar.call(swiper, params.progressbarFillClass);\n            } else {\n                paginationHTML = `<span class=\"${params.progressbarFillClass}\"></span>`;\n            }\n        }\n        swiper.pagination.bullets = [];\n        el.forEach((subEl)=>{\n            if (params.type !== \"custom\") {\n                (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.s)(subEl, paginationHTML || \"\");\n            }\n            if (params.type === \"bullets\") {\n                swiper.pagination.bullets.push(...subEl.querySelectorAll((0,_shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(params.bulletClass)));\n            }\n        });\n        if (params.type !== \"custom\") {\n            emit(\"paginationRender\", el[0]);\n        }\n    }\n    function init() {\n        swiper.params.pagination = (0,_shared_create_element_if_not_defined_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(swiper, swiper.originalParams.pagination, swiper.params.pagination, {\n            el: \"swiper-pagination\"\n        });\n        const params = swiper.params.pagination;\n        if (!params.el) return;\n        let el;\n        if (typeof params.el === \"string\" && swiper.isElement) {\n            el = swiper.el.querySelector(params.el);\n        }\n        if (!el && typeof params.el === \"string\") {\n            el = [\n                ...document.querySelectorAll(params.el)\n            ];\n        }\n        if (!el) {\n            el = params.el;\n        }\n        if (!el || el.length === 0) return;\n        if (swiper.params.uniqueNavElements && typeof params.el === \"string\" && Array.isArray(el) && el.length > 1) {\n            el = [\n                ...swiper.el.querySelectorAll(params.el)\n            ];\n            // check if it belongs to another nested Swiper\n            if (el.length > 1) {\n                el = el.find((subEl)=>{\n                    if ((0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.d)(subEl, \".swiper\")[0] !== swiper.el) return false;\n                    return true;\n                });\n            }\n        }\n        if (Array.isArray(el) && el.length === 1) el = el[0];\n        Object.assign(swiper.pagination, {\n            el\n        });\n        el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\n        el.forEach((subEl)=>{\n            if (params.type === \"bullets\" && params.clickable) {\n                subEl.classList.add(...(params.clickableClass || \"\").split(\" \"));\n            }\n            subEl.classList.add(params.modifierClass + params.type);\n            subEl.classList.add(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\n            if (params.type === \"bullets\" && params.dynamicBullets) {\n                subEl.classList.add(`${params.modifierClass}${params.type}-dynamic`);\n                dynamicBulletIndex = 0;\n                if (params.dynamicMainBullets < 1) {\n                    params.dynamicMainBullets = 1;\n                }\n            }\n            if (params.type === \"progressbar\" && params.progressbarOpposite) {\n                subEl.classList.add(params.progressbarOppositeClass);\n            }\n            if (params.clickable) {\n                subEl.addEventListener(\"click\", onBulletClick);\n            }\n            if (!swiper.enabled) {\n                subEl.classList.add(params.lockClass);\n            }\n        });\n    }\n    function destroy() {\n        const params = swiper.params.pagination;\n        if (isPaginationDisabled()) return;\n        let el = swiper.pagination.el;\n        if (el) {\n            el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\n            el.forEach((subEl)=>{\n                subEl.classList.remove(params.hiddenClass);\n                subEl.classList.remove(params.modifierClass + params.type);\n                subEl.classList.remove(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\n                if (params.clickable) {\n                    subEl.classList.remove(...(params.clickableClass || \"\").split(\" \"));\n                    subEl.removeEventListener(\"click\", onBulletClick);\n                }\n            });\n        }\n        if (swiper.pagination.bullets) swiper.pagination.bullets.forEach((subEl)=>subEl.classList.remove(...params.bulletActiveClass.split(\" \")));\n    }\n    on(\"changeDirection\", ()=>{\n        if (!swiper.pagination || !swiper.pagination.el) return;\n        const params = swiper.params.pagination;\n        let { el } = swiper.pagination;\n        el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\n        el.forEach((subEl)=>{\n            subEl.classList.remove(params.horizontalClass, params.verticalClass);\n            subEl.classList.add(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\n        });\n    });\n    on(\"init\", ()=>{\n        if (swiper.params.pagination.enabled === false) {\n            // eslint-disable-next-line\n            disable();\n        } else {\n            init();\n            render();\n            update();\n        }\n    });\n    on(\"activeIndexChange\", ()=>{\n        if (typeof swiper.snapIndex === \"undefined\") {\n            update();\n        }\n    });\n    on(\"snapIndexChange\", ()=>{\n        update();\n    });\n    on(\"snapGridLengthChange\", ()=>{\n        render();\n        update();\n    });\n    on(\"destroy\", ()=>{\n        destroy();\n    });\n    on(\"enable disable\", ()=>{\n        let { el } = swiper.pagination;\n        if (el) {\n            el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\n            el.forEach((subEl)=>subEl.classList[swiper.enabled ? \"remove\" : \"add\"](swiper.params.pagination.lockClass));\n        }\n    });\n    on(\"lock unlock\", ()=>{\n        update();\n    });\n    on(\"click\", (_s, e)=>{\n        const targetEl = e.target;\n        const el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(swiper.pagination.el);\n        if (swiper.params.pagination.el && swiper.params.pagination.hideOnClick && el && el.length > 0 && !targetEl.classList.contains(swiper.params.pagination.bulletClass)) {\n            if (swiper.navigation && (swiper.navigation.nextEl && targetEl === swiper.navigation.nextEl || swiper.navigation.prevEl && targetEl === swiper.navigation.prevEl)) return;\n            const isHidden = el[0].classList.contains(swiper.params.pagination.hiddenClass);\n            if (isHidden === true) {\n                emit(\"paginationShow\");\n            } else {\n                emit(\"paginationHide\");\n            }\n            el.forEach((subEl)=>subEl.classList.toggle(swiper.params.pagination.hiddenClass));\n        }\n    });\n    const enable = ()=>{\n        swiper.el.classList.remove(swiper.params.pagination.paginationDisabledClass);\n        let { el } = swiper.pagination;\n        if (el) {\n            el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\n            el.forEach((subEl)=>subEl.classList.remove(swiper.params.pagination.paginationDisabledClass));\n        }\n        init();\n        render();\n        update();\n    };\n    const disable = ()=>{\n        swiper.el.classList.add(swiper.params.pagination.paginationDisabledClass);\n        let { el } = swiper.pagination;\n        if (el) {\n            el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_2__.m)(el);\n            el.forEach((subEl)=>subEl.classList.add(swiper.params.pagination.paginationDisabledClass));\n        }\n        destroy();\n    };\n    Object.assign(swiper.pagination, {\n        enable,\n        disable,\n        render,\n        update,\n        init,\n        destroy\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/pagination.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/parallax.mjs":
/*!**************************************************!*\
  !*** ./node_modules/swiper/modules/parallax.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Parallax)\n/* harmony export */ });\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\nfunction Parallax({ swiper, extendParams, on }) {\n    extendParams({\n        parallax: {\n            enabled: false\n        }\n    });\n    const elementsSelector = \"[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]\";\n    const setTransform = (el, progress)=>{\n        const { rtl } = swiper;\n        const rtlFactor = rtl ? -1 : 1;\n        const p = el.getAttribute(\"data-swiper-parallax\") || \"0\";\n        let x = el.getAttribute(\"data-swiper-parallax-x\");\n        let y = el.getAttribute(\"data-swiper-parallax-y\");\n        const scale = el.getAttribute(\"data-swiper-parallax-scale\");\n        const opacity = el.getAttribute(\"data-swiper-parallax-opacity\");\n        const rotate = el.getAttribute(\"data-swiper-parallax-rotate\");\n        if (x || y) {\n            x = x || \"0\";\n            y = y || \"0\";\n        } else if (swiper.isHorizontal()) {\n            x = p;\n            y = \"0\";\n        } else {\n            y = p;\n            x = \"0\";\n        }\n        if (x.indexOf(\"%\") >= 0) {\n            x = `${parseInt(x, 10) * progress * rtlFactor}%`;\n        } else {\n            x = `${x * progress * rtlFactor}px`;\n        }\n        if (y.indexOf(\"%\") >= 0) {\n            y = `${parseInt(y, 10) * progress}%`;\n        } else {\n            y = `${y * progress}px`;\n        }\n        if (typeof opacity !== \"undefined\" && opacity !== null) {\n            const currentOpacity = opacity - (opacity - 1) * (1 - Math.abs(progress));\n            el.style.opacity = currentOpacity;\n        }\n        let transform = `translate3d(${x}, ${y}, 0px)`;\n        if (typeof scale !== \"undefined\" && scale !== null) {\n            const currentScale = scale - (scale - 1) * (1 - Math.abs(progress));\n            transform += ` scale(${currentScale})`;\n        }\n        if (rotate && typeof rotate !== \"undefined\" && rotate !== null) {\n            const currentRotate = rotate * progress * -1;\n            transform += ` rotate(${currentRotate}deg)`;\n        }\n        el.style.transform = transform;\n    };\n    const setTranslate = ()=>{\n        const { el, slides, progress, snapGrid, isElement } = swiper;\n        const elements = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.e)(el, elementsSelector);\n        if (swiper.isElement) {\n            elements.push(...(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.e)(swiper.hostEl, elementsSelector));\n        }\n        elements.forEach((subEl)=>{\n            setTransform(subEl, progress);\n        });\n        slides.forEach((slideEl, slideIndex)=>{\n            let slideProgress = slideEl.progress;\n            if (swiper.params.slidesPerGroup > 1 && swiper.params.slidesPerView !== \"auto\") {\n                slideProgress += Math.ceil(slideIndex / 2) - progress * (snapGrid.length - 1);\n            }\n            slideProgress = Math.min(Math.max(slideProgress, -1), 1);\n            slideEl.querySelectorAll(`${elementsSelector}, [data-swiper-parallax-rotate]`).forEach((subEl)=>{\n                setTransform(subEl, slideProgress);\n            });\n        });\n    };\n    const setTransition = (duration = swiper.params.speed)=>{\n        const { el, hostEl } = swiper;\n        const elements = [\n            ...el.querySelectorAll(elementsSelector)\n        ];\n        if (swiper.isElement) {\n            elements.push(...hostEl.querySelectorAll(elementsSelector));\n        }\n        elements.forEach((parallaxEl)=>{\n            let parallaxDuration = parseInt(parallaxEl.getAttribute(\"data-swiper-parallax-duration\"), 10) || duration;\n            if (duration === 0) parallaxDuration = 0;\n            parallaxEl.style.transitionDuration = `${parallaxDuration}ms`;\n        });\n    };\n    on(\"beforeInit\", ()=>{\n        if (!swiper.params.parallax.enabled) return;\n        swiper.params.watchSlidesProgress = true;\n        swiper.originalParams.watchSlidesProgress = true;\n    });\n    on(\"init\", ()=>{\n        if (!swiper.params.parallax.enabled) return;\n        setTranslate();\n    });\n    on(\"setTranslate\", ()=>{\n        if (!swiper.params.parallax.enabled) return;\n        setTranslate();\n    });\n    on(\"setTransition\", (_swiper, duration)=>{\n        if (!swiper.params.parallax.enabled) return;\n        setTransition(duration);\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/parallax.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/scrollbar.mjs":
/*!***************************************************!*\
  !*** ./node_modules/swiper/modules/scrollbar.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Scrollbar)\n/* harmony export */ });\n/* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/ssr-window.esm.mjs */ \"(ssr)/./node_modules/swiper/shared/ssr-window.esm.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n/* harmony import */ var _shared_create_element_if_not_defined_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/create-element-if-not-defined.mjs */ \"(ssr)/./node_modules/swiper/shared/create-element-if-not-defined.mjs\");\n/* harmony import */ var _shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/classes-to-selector.mjs */ \"(ssr)/./node_modules/swiper/shared/classes-to-selector.mjs\");\n\n\n\n\nfunction Scrollbar({ swiper, extendParams, on, emit }) {\n    const document = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n    let isTouched = false;\n    let timeout = null;\n    let dragTimeout = null;\n    let dragStartPos;\n    let dragSize;\n    let trackSize;\n    let divider;\n    extendParams({\n        scrollbar: {\n            el: null,\n            dragSize: \"auto\",\n            hide: false,\n            draggable: false,\n            snapOnRelease: true,\n            lockClass: \"swiper-scrollbar-lock\",\n            dragClass: \"swiper-scrollbar-drag\",\n            scrollbarDisabledClass: \"swiper-scrollbar-disabled\",\n            horizontalClass: `swiper-scrollbar-horizontal`,\n            verticalClass: `swiper-scrollbar-vertical`\n        }\n    });\n    swiper.scrollbar = {\n        el: null,\n        dragEl: null\n    };\n    function setTranslate() {\n        if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n        const { scrollbar, rtlTranslate: rtl } = swiper;\n        const { dragEl, el } = scrollbar;\n        const params = swiper.params.scrollbar;\n        const progress = swiper.params.loop ? swiper.progressLoop : swiper.progress;\n        let newSize = dragSize;\n        let newPos = (trackSize - dragSize) * progress;\n        if (rtl) {\n            newPos = -newPos;\n            if (newPos > 0) {\n                newSize = dragSize - newPos;\n                newPos = 0;\n            } else if (-newPos + dragSize > trackSize) {\n                newSize = trackSize + newPos;\n            }\n        } else if (newPos < 0) {\n            newSize = dragSize + newPos;\n            newPos = 0;\n        } else if (newPos + dragSize > trackSize) {\n            newSize = trackSize - newPos;\n        }\n        if (swiper.isHorizontal()) {\n            dragEl.style.transform = `translate3d(${newPos}px, 0, 0)`;\n            dragEl.style.width = `${newSize}px`;\n        } else {\n            dragEl.style.transform = `translate3d(0px, ${newPos}px, 0)`;\n            dragEl.style.height = `${newSize}px`;\n        }\n        if (params.hide) {\n            clearTimeout(timeout);\n            el.style.opacity = 1;\n            timeout = setTimeout(()=>{\n                el.style.opacity = 0;\n                el.style.transitionDuration = \"400ms\";\n            }, 1000);\n        }\n    }\n    function setTransition(duration) {\n        if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n        swiper.scrollbar.dragEl.style.transitionDuration = `${duration}ms`;\n    }\n    function updateSize() {\n        if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n        const { scrollbar } = swiper;\n        const { dragEl, el } = scrollbar;\n        dragEl.style.width = \"\";\n        dragEl.style.height = \"\";\n        trackSize = swiper.isHorizontal() ? el.offsetWidth : el.offsetHeight;\n        divider = swiper.size / (swiper.virtualSize + swiper.params.slidesOffsetBefore - (swiper.params.centeredSlides ? swiper.snapGrid[0] : 0));\n        if (swiper.params.scrollbar.dragSize === \"auto\") {\n            dragSize = trackSize * divider;\n        } else {\n            dragSize = parseInt(swiper.params.scrollbar.dragSize, 10);\n        }\n        if (swiper.isHorizontal()) {\n            dragEl.style.width = `${dragSize}px`;\n        } else {\n            dragEl.style.height = `${dragSize}px`;\n        }\n        if (divider >= 1) {\n            el.style.display = \"none\";\n        } else {\n            el.style.display = \"\";\n        }\n        if (swiper.params.scrollbar.hide) {\n            el.style.opacity = 0;\n        }\n        if (swiper.params.watchOverflow && swiper.enabled) {\n            scrollbar.el.classList[swiper.isLocked ? \"add\" : \"remove\"](swiper.params.scrollbar.lockClass);\n        }\n    }\n    function getPointerPosition(e) {\n        return swiper.isHorizontal() ? e.clientX : e.clientY;\n    }\n    function setDragPosition(e) {\n        const { scrollbar, rtlTranslate: rtl } = swiper;\n        const { el } = scrollbar;\n        let positionRatio;\n        positionRatio = (getPointerPosition(e) - (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.f)(el)[swiper.isHorizontal() ? \"left\" : \"top\"] - (dragStartPos !== null ? dragStartPos : dragSize / 2)) / (trackSize - dragSize);\n        positionRatio = Math.max(Math.min(positionRatio, 1), 0);\n        if (rtl) {\n            positionRatio = 1 - positionRatio;\n        }\n        const position = swiper.minTranslate() + (swiper.maxTranslate() - swiper.minTranslate()) * positionRatio;\n        swiper.updateProgress(position);\n        swiper.setTranslate(position);\n        swiper.updateActiveIndex();\n        swiper.updateSlidesClasses();\n    }\n    function onDragStart(e) {\n        const params = swiper.params.scrollbar;\n        const { scrollbar, wrapperEl } = swiper;\n        const { el, dragEl } = scrollbar;\n        isTouched = true;\n        dragStartPos = e.target === dragEl ? getPointerPosition(e) - e.target.getBoundingClientRect()[swiper.isHorizontal() ? \"left\" : \"top\"] : null;\n        e.preventDefault();\n        e.stopPropagation();\n        wrapperEl.style.transitionDuration = \"100ms\";\n        dragEl.style.transitionDuration = \"100ms\";\n        setDragPosition(e);\n        clearTimeout(dragTimeout);\n        el.style.transitionDuration = \"0ms\";\n        if (params.hide) {\n            el.style.opacity = 1;\n        }\n        if (swiper.params.cssMode) {\n            swiper.wrapperEl.style[\"scroll-snap-type\"] = \"none\";\n        }\n        emit(\"scrollbarDragStart\", e);\n    }\n    function onDragMove(e) {\n        const { scrollbar, wrapperEl } = swiper;\n        const { el, dragEl } = scrollbar;\n        if (!isTouched) return;\n        if (e.preventDefault && e.cancelable) e.preventDefault();\n        else e.returnValue = false;\n        setDragPosition(e);\n        wrapperEl.style.transitionDuration = \"0ms\";\n        el.style.transitionDuration = \"0ms\";\n        dragEl.style.transitionDuration = \"0ms\";\n        emit(\"scrollbarDragMove\", e);\n    }\n    function onDragEnd(e) {\n        const params = swiper.params.scrollbar;\n        const { scrollbar, wrapperEl } = swiper;\n        const { el } = scrollbar;\n        if (!isTouched) return;\n        isTouched = false;\n        if (swiper.params.cssMode) {\n            swiper.wrapperEl.style[\"scroll-snap-type\"] = \"\";\n            wrapperEl.style.transitionDuration = \"\";\n        }\n        if (params.hide) {\n            clearTimeout(dragTimeout);\n            dragTimeout = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(()=>{\n                el.style.opacity = 0;\n                el.style.transitionDuration = \"400ms\";\n            }, 1000);\n        }\n        emit(\"scrollbarDragEnd\", e);\n        if (params.snapOnRelease) {\n            swiper.slideToClosest();\n        }\n    }\n    function events(method) {\n        const { scrollbar, params } = swiper;\n        const el = scrollbar.el;\n        if (!el) return;\n        const target = el;\n        const activeListener = params.passiveListeners ? {\n            passive: false,\n            capture: false\n        } : false;\n        const passiveListener = params.passiveListeners ? {\n            passive: true,\n            capture: false\n        } : false;\n        if (!target) return;\n        const eventMethod = method === \"on\" ? \"addEventListener\" : \"removeEventListener\";\n        target[eventMethod](\"pointerdown\", onDragStart, activeListener);\n        document[eventMethod](\"pointermove\", onDragMove, activeListener);\n        document[eventMethod](\"pointerup\", onDragEnd, passiveListener);\n    }\n    function enableDraggable() {\n        if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n        events(\"on\");\n    }\n    function disableDraggable() {\n        if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n        events(\"off\");\n    }\n    function init() {\n        const { scrollbar, el: swiperEl } = swiper;\n        swiper.params.scrollbar = (0,_shared_create_element_if_not_defined_mjs__WEBPACK_IMPORTED_MODULE_2__.c)(swiper, swiper.originalParams.scrollbar, swiper.params.scrollbar, {\n            el: \"swiper-scrollbar\"\n        });\n        const params = swiper.params.scrollbar;\n        if (!params.el) return;\n        let el;\n        if (typeof params.el === \"string\" && swiper.isElement) {\n            el = swiper.el.querySelector(params.el);\n        }\n        if (!el && typeof params.el === \"string\") {\n            el = document.querySelectorAll(params.el);\n            if (!el.length) return;\n        } else if (!el) {\n            el = params.el;\n        }\n        if (swiper.params.uniqueNavElements && typeof params.el === \"string\" && el.length > 1 && swiperEl.querySelectorAll(params.el).length === 1) {\n            el = swiperEl.querySelector(params.el);\n        }\n        if (el.length > 0) el = el[0];\n        el.classList.add(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\n        let dragEl;\n        if (el) {\n            dragEl = el.querySelector((0,_shared_classes_to_selector_mjs__WEBPACK_IMPORTED_MODULE_3__.c)(swiper.params.scrollbar.dragClass));\n            if (!dragEl) {\n                dragEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(\"div\", swiper.params.scrollbar.dragClass);\n                el.append(dragEl);\n            }\n        }\n        Object.assign(scrollbar, {\n            el,\n            dragEl\n        });\n        if (params.draggable) {\n            enableDraggable();\n        }\n        if (el) {\n            el.classList[swiper.enabled ? \"remove\" : \"add\"](...(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.k)(swiper.params.scrollbar.lockClass));\n        }\n    }\n    function destroy() {\n        const params = swiper.params.scrollbar;\n        const el = swiper.scrollbar.el;\n        if (el) {\n            el.classList.remove(...(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.k)(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass));\n        }\n        disableDraggable();\n    }\n    on(\"changeDirection\", ()=>{\n        if (!swiper.scrollbar || !swiper.scrollbar.el) return;\n        const params = swiper.params.scrollbar;\n        let { el } = swiper.scrollbar;\n        el = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.m)(el);\n        el.forEach((subEl)=>{\n            subEl.classList.remove(params.horizontalClass, params.verticalClass);\n            subEl.classList.add(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\n        });\n    });\n    on(\"init\", ()=>{\n        if (swiper.params.scrollbar.enabled === false) {\n            // eslint-disable-next-line\n            disable();\n        } else {\n            init();\n            updateSize();\n            setTranslate();\n        }\n    });\n    on(\"update resize observerUpdate lock unlock changeDirection\", ()=>{\n        updateSize();\n    });\n    on(\"setTranslate\", ()=>{\n        setTranslate();\n    });\n    on(\"setTransition\", (_s, duration)=>{\n        setTransition(duration);\n    });\n    on(\"enable disable\", ()=>{\n        const { el } = swiper.scrollbar;\n        if (el) {\n            el.classList[swiper.enabled ? \"remove\" : \"add\"](...(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.k)(swiper.params.scrollbar.lockClass));\n        }\n    });\n    on(\"destroy\", ()=>{\n        destroy();\n    });\n    const enable = ()=>{\n        swiper.el.classList.remove(...(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.k)(swiper.params.scrollbar.scrollbarDisabledClass));\n        if (swiper.scrollbar.el) {\n            swiper.scrollbar.el.classList.remove(...(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.k)(swiper.params.scrollbar.scrollbarDisabledClass));\n        }\n        init();\n        updateSize();\n        setTranslate();\n    };\n    const disable = ()=>{\n        swiper.el.classList.add(...(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.k)(swiper.params.scrollbar.scrollbarDisabledClass));\n        if (swiper.scrollbar.el) {\n            swiper.scrollbar.el.classList.add(...(0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.k)(swiper.params.scrollbar.scrollbarDisabledClass));\n        }\n        destroy();\n    };\n    Object.assign(swiper.scrollbar, {\n        enable,\n        disable,\n        updateSize,\n        setTranslate,\n        init,\n        destroy\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/scrollbar.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/thumbs.mjs":
/*!************************************************!*\
  !*** ./node_modules/swiper/modules/thumbs.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Thumb)\n/* harmony export */ });\n/* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/ssr-window.esm.mjs */ \"(ssr)/./node_modules/swiper/shared/ssr-window.esm.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\n\nfunction Thumb({ swiper, extendParams, on }) {\n    extendParams({\n        thumbs: {\n            swiper: null,\n            multipleActiveThumbs: true,\n            autoScrollOffset: 0,\n            slideThumbActiveClass: \"swiper-slide-thumb-active\",\n            thumbsContainerClass: \"swiper-thumbs\"\n        }\n    });\n    let initialized = false;\n    let swiperCreated = false;\n    swiper.thumbs = {\n        swiper: null\n    };\n    function onThumbClick() {\n        const thumbsSwiper = swiper.thumbs.swiper;\n        if (!thumbsSwiper || thumbsSwiper.destroyed) return;\n        const clickedIndex = thumbsSwiper.clickedIndex;\n        const clickedSlide = thumbsSwiper.clickedSlide;\n        if (clickedSlide && clickedSlide.classList.contains(swiper.params.thumbs.slideThumbActiveClass)) return;\n        if (typeof clickedIndex === \"undefined\" || clickedIndex === null) return;\n        let slideToIndex;\n        if (thumbsSwiper.params.loop) {\n            slideToIndex = parseInt(thumbsSwiper.clickedSlide.getAttribute(\"data-swiper-slide-index\"), 10);\n        } else {\n            slideToIndex = clickedIndex;\n        }\n        if (swiper.params.loop) {\n            swiper.slideToLoop(slideToIndex);\n        } else {\n            swiper.slideTo(slideToIndex);\n        }\n    }\n    function init() {\n        const { thumbs: thumbsParams } = swiper.params;\n        if (initialized) return false;\n        initialized = true;\n        const SwiperClass = swiper.constructor;\n        if (thumbsParams.swiper instanceof SwiperClass) {\n            if (thumbsParams.swiper.destroyed) {\n                initialized = false;\n                return false;\n            }\n            swiper.thumbs.swiper = thumbsParams.swiper;\n            Object.assign(swiper.thumbs.swiper.originalParams, {\n                watchSlidesProgress: true,\n                slideToClickedSlide: false\n            });\n            Object.assign(swiper.thumbs.swiper.params, {\n                watchSlidesProgress: true,\n                slideToClickedSlide: false\n            });\n            swiper.thumbs.swiper.update();\n        } else if ((0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.p)(thumbsParams.swiper)) {\n            const thumbsSwiperParams = Object.assign({}, thumbsParams.swiper);\n            Object.assign(thumbsSwiperParams, {\n                watchSlidesProgress: true,\n                slideToClickedSlide: false\n            });\n            swiper.thumbs.swiper = new SwiperClass(thumbsSwiperParams);\n            swiperCreated = true;\n        }\n        swiper.thumbs.swiper.el.classList.add(swiper.params.thumbs.thumbsContainerClass);\n        swiper.thumbs.swiper.on(\"tap\", onThumbClick);\n        return true;\n    }\n    function update(initial) {\n        const thumbsSwiper = swiper.thumbs.swiper;\n        if (!thumbsSwiper || thumbsSwiper.destroyed) return;\n        const slidesPerView = thumbsSwiper.params.slidesPerView === \"auto\" ? thumbsSwiper.slidesPerViewDynamic() : thumbsSwiper.params.slidesPerView;\n        // Activate thumbs\n        let thumbsToActivate = 1;\n        const thumbActiveClass = swiper.params.thumbs.slideThumbActiveClass;\n        if (swiper.params.slidesPerView > 1 && !swiper.params.centeredSlides) {\n            thumbsToActivate = swiper.params.slidesPerView;\n        }\n        if (!swiper.params.thumbs.multipleActiveThumbs) {\n            thumbsToActivate = 1;\n        }\n        thumbsToActivate = Math.floor(thumbsToActivate);\n        thumbsSwiper.slides.forEach((slideEl)=>slideEl.classList.remove(thumbActiveClass));\n        if (thumbsSwiper.params.loop || thumbsSwiper.params.virtual && thumbsSwiper.params.virtual.enabled) {\n            for(let i = 0; i < thumbsToActivate; i += 1){\n                (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(thumbsSwiper.slidesEl, `[data-swiper-slide-index=\"${swiper.realIndex + i}\"]`).forEach((slideEl)=>{\n                    slideEl.classList.add(thumbActiveClass);\n                });\n            }\n        } else {\n            for(let i = 0; i < thumbsToActivate; i += 1){\n                if (thumbsSwiper.slides[swiper.realIndex + i]) {\n                    thumbsSwiper.slides[swiper.realIndex + i].classList.add(thumbActiveClass);\n                }\n            }\n        }\n        const autoScrollOffset = swiper.params.thumbs.autoScrollOffset;\n        const useOffset = autoScrollOffset && !thumbsSwiper.params.loop;\n        if (swiper.realIndex !== thumbsSwiper.realIndex || useOffset) {\n            const currentThumbsIndex = thumbsSwiper.activeIndex;\n            let newThumbsIndex;\n            let direction;\n            if (thumbsSwiper.params.loop) {\n                const newThumbsSlide = thumbsSwiper.slides.find((slideEl)=>slideEl.getAttribute(\"data-swiper-slide-index\") === `${swiper.realIndex}`);\n                newThumbsIndex = thumbsSwiper.slides.indexOf(newThumbsSlide);\n                direction = swiper.activeIndex > swiper.previousIndex ? \"next\" : \"prev\";\n            } else {\n                newThumbsIndex = swiper.realIndex;\n                direction = newThumbsIndex > swiper.previousIndex ? \"next\" : \"prev\";\n            }\n            if (useOffset) {\n                newThumbsIndex += direction === \"next\" ? autoScrollOffset : -1 * autoScrollOffset;\n            }\n            if (thumbsSwiper.visibleSlidesIndexes && thumbsSwiper.visibleSlidesIndexes.indexOf(newThumbsIndex) < 0) {\n                if (thumbsSwiper.params.centeredSlides) {\n                    if (newThumbsIndex > currentThumbsIndex) {\n                        newThumbsIndex = newThumbsIndex - Math.floor(slidesPerView / 2) + 1;\n                    } else {\n                        newThumbsIndex = newThumbsIndex + Math.floor(slidesPerView / 2) - 1;\n                    }\n                } else if (newThumbsIndex > currentThumbsIndex && thumbsSwiper.params.slidesPerGroup === 1) ;\n                thumbsSwiper.slideTo(newThumbsIndex, initial ? 0 : undefined);\n            }\n        }\n    }\n    on(\"beforeInit\", ()=>{\n        const { thumbs } = swiper.params;\n        if (!thumbs || !thumbs.swiper) return;\n        if (typeof thumbs.swiper === \"string\" || thumbs.swiper instanceof HTMLElement) {\n            const document = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n            const getThumbsElementAndInit = ()=>{\n                const thumbsElement = typeof thumbs.swiper === \"string\" ? document.querySelector(thumbs.swiper) : thumbs.swiper;\n                if (thumbsElement && thumbsElement.swiper) {\n                    thumbs.swiper = thumbsElement.swiper;\n                    init();\n                    update(true);\n                } else if (thumbsElement) {\n                    const eventName = `${swiper.params.eventsPrefix}init`;\n                    const onThumbsSwiper = (e)=>{\n                        thumbs.swiper = e.detail[0];\n                        thumbsElement.removeEventListener(eventName, onThumbsSwiper);\n                        init();\n                        update(true);\n                        thumbs.swiper.update();\n                        swiper.update();\n                    };\n                    thumbsElement.addEventListener(eventName, onThumbsSwiper);\n                }\n                return thumbsElement;\n            };\n            const watchForThumbsToAppear = ()=>{\n                if (swiper.destroyed) return;\n                const thumbsElement = getThumbsElementAndInit();\n                if (!thumbsElement) {\n                    requestAnimationFrame(watchForThumbsToAppear);\n                }\n            };\n            requestAnimationFrame(watchForThumbsToAppear);\n        } else {\n            init();\n            update(true);\n        }\n    });\n    on(\"slideChange update resize observerUpdate\", ()=>{\n        update();\n    });\n    on(\"setTransition\", (_s, duration)=>{\n        const thumbsSwiper = swiper.thumbs.swiper;\n        if (!thumbsSwiper || thumbsSwiper.destroyed) return;\n        thumbsSwiper.setTransition(duration);\n    });\n    on(\"beforeDestroy\", ()=>{\n        const thumbsSwiper = swiper.thumbs.swiper;\n        if (!thumbsSwiper || thumbsSwiper.destroyed) return;\n        if (swiperCreated) {\n            thumbsSwiper.destroy();\n        }\n    });\n    Object.assign(swiper.thumbs, {\n        init,\n        update\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvdGh1bWJzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBZ0U7QUFDVTtBQUUxRSxTQUFTTSxNQUFNLEVBQ2JDLE1BQU0sRUFDTkMsWUFBWSxFQUNaQyxFQUFFLEVBQ0g7SUFDQ0QsYUFBYTtRQUNYRSxRQUFRO1lBQ05ILFFBQVE7WUFDUkksc0JBQXNCO1lBQ3RCQyxrQkFBa0I7WUFDbEJDLHVCQUF1QjtZQUN2QkMsc0JBQXNCO1FBQ3hCO0lBQ0Y7SUFDQSxJQUFJQyxjQUFjO0lBQ2xCLElBQUlDLGdCQUFnQjtJQUNwQlQsT0FBT0csTUFBTSxHQUFHO1FBQ2RILFFBQVE7SUFDVjtJQUNBLFNBQVNVO1FBQ1AsTUFBTUMsZUFBZVgsT0FBT0csTUFBTSxDQUFDSCxNQUFNO1FBQ3pDLElBQUksQ0FBQ1csZ0JBQWdCQSxhQUFhQyxTQUFTLEVBQUU7UUFDN0MsTUFBTUMsZUFBZUYsYUFBYUUsWUFBWTtRQUM5QyxNQUFNQyxlQUFlSCxhQUFhRyxZQUFZO1FBQzlDLElBQUlBLGdCQUFnQkEsYUFBYUMsU0FBUyxDQUFDQyxRQUFRLENBQUNoQixPQUFPaUIsTUFBTSxDQUFDZCxNQUFNLENBQUNHLHFCQUFxQixHQUFHO1FBQ2pHLElBQUksT0FBT08saUJBQWlCLGVBQWVBLGlCQUFpQixNQUFNO1FBQ2xFLElBQUlLO1FBQ0osSUFBSVAsYUFBYU0sTUFBTSxDQUFDRSxJQUFJLEVBQUU7WUFDNUJELGVBQWVFLFNBQVNULGFBQWFHLFlBQVksQ0FBQ08sWUFBWSxDQUFDLDRCQUE0QjtRQUM3RixPQUFPO1lBQ0xILGVBQWVMO1FBQ2pCO1FBQ0EsSUFBSWIsT0FBT2lCLE1BQU0sQ0FBQ0UsSUFBSSxFQUFFO1lBQ3RCbkIsT0FBT3NCLFdBQVcsQ0FBQ0o7UUFDckIsT0FBTztZQUNMbEIsT0FBT3VCLE9BQU8sQ0FBQ0w7UUFDakI7SUFDRjtJQUNBLFNBQVNNO1FBQ1AsTUFBTSxFQUNKckIsUUFBUXNCLFlBQVksRUFDckIsR0FBR3pCLE9BQU9pQixNQUFNO1FBQ2pCLElBQUlULGFBQWEsT0FBTztRQUN4QkEsY0FBYztRQUNkLE1BQU1rQixjQUFjMUIsT0FBTzJCLFdBQVc7UUFDdEMsSUFBSUYsYUFBYXpCLE1BQU0sWUFBWTBCLGFBQWE7WUFDOUMsSUFBSUQsYUFBYXpCLE1BQU0sQ0FBQ1ksU0FBUyxFQUFFO2dCQUNqQ0osY0FBYztnQkFDZCxPQUFPO1lBQ1Q7WUFDQVIsT0FBT0csTUFBTSxDQUFDSCxNQUFNLEdBQUd5QixhQUFhekIsTUFBTTtZQUMxQzRCLE9BQU9DLE1BQU0sQ0FBQzdCLE9BQU9HLE1BQU0sQ0FBQ0gsTUFBTSxDQUFDOEIsY0FBYyxFQUFFO2dCQUNqREMscUJBQXFCO2dCQUNyQkMscUJBQXFCO1lBQ3ZCO1lBQ0FKLE9BQU9DLE1BQU0sQ0FBQzdCLE9BQU9HLE1BQU0sQ0FBQ0gsTUFBTSxDQUFDaUIsTUFBTSxFQUFFO2dCQUN6Q2MscUJBQXFCO2dCQUNyQkMscUJBQXFCO1lBQ3ZCO1lBQ0FoQyxPQUFPRyxNQUFNLENBQUNILE1BQU0sQ0FBQ2lDLE1BQU07UUFDN0IsT0FBTyxJQUFJckMsb0RBQVFBLENBQUM2QixhQUFhekIsTUFBTSxHQUFHO1lBQ3hDLE1BQU1rQyxxQkFBcUJOLE9BQU9DLE1BQU0sQ0FBQyxDQUFDLEdBQUdKLGFBQWF6QixNQUFNO1lBQ2hFNEIsT0FBT0MsTUFBTSxDQUFDSyxvQkFBb0I7Z0JBQ2hDSCxxQkFBcUI7Z0JBQ3JCQyxxQkFBcUI7WUFDdkI7WUFDQWhDLE9BQU9HLE1BQU0sQ0FBQ0gsTUFBTSxHQUFHLElBQUkwQixZQUFZUTtZQUN2Q3pCLGdCQUFnQjtRQUNsQjtRQUNBVCxPQUFPRyxNQUFNLENBQUNILE1BQU0sQ0FBQ21DLEVBQUUsQ0FBQ3BCLFNBQVMsQ0FBQ3FCLEdBQUcsQ0FBQ3BDLE9BQU9pQixNQUFNLENBQUNkLE1BQU0sQ0FBQ0ksb0JBQW9CO1FBQy9FUCxPQUFPRyxNQUFNLENBQUNILE1BQU0sQ0FBQ0UsRUFBRSxDQUFDLE9BQU9RO1FBQy9CLE9BQU87SUFDVDtJQUNBLFNBQVN1QixPQUFPSSxPQUFPO1FBQ3JCLE1BQU0xQixlQUFlWCxPQUFPRyxNQUFNLENBQUNILE1BQU07UUFDekMsSUFBSSxDQUFDVyxnQkFBZ0JBLGFBQWFDLFNBQVMsRUFBRTtRQUM3QyxNQUFNMEIsZ0JBQWdCM0IsYUFBYU0sTUFBTSxDQUFDcUIsYUFBYSxLQUFLLFNBQVMzQixhQUFhNEIsb0JBQW9CLEtBQUs1QixhQUFhTSxNQUFNLENBQUNxQixhQUFhO1FBRTVJLGtCQUFrQjtRQUNsQixJQUFJRSxtQkFBbUI7UUFDdkIsTUFBTUMsbUJBQW1CekMsT0FBT2lCLE1BQU0sQ0FBQ2QsTUFBTSxDQUFDRyxxQkFBcUI7UUFDbkUsSUFBSU4sT0FBT2lCLE1BQU0sQ0FBQ3FCLGFBQWEsR0FBRyxLQUFLLENBQUN0QyxPQUFPaUIsTUFBTSxDQUFDeUIsY0FBYyxFQUFFO1lBQ3BFRixtQkFBbUJ4QyxPQUFPaUIsTUFBTSxDQUFDcUIsYUFBYTtRQUNoRDtRQUNBLElBQUksQ0FBQ3RDLE9BQU9pQixNQUFNLENBQUNkLE1BQU0sQ0FBQ0Msb0JBQW9CLEVBQUU7WUFDOUNvQyxtQkFBbUI7UUFDckI7UUFDQUEsbUJBQW1CRyxLQUFLQyxLQUFLLENBQUNKO1FBQzlCN0IsYUFBYWtDLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDQyxDQUFBQSxVQUFXQSxRQUFRaEMsU0FBUyxDQUFDaUMsTUFBTSxDQUFDUDtRQUNoRSxJQUFJOUIsYUFBYU0sTUFBTSxDQUFDRSxJQUFJLElBQUlSLGFBQWFNLE1BQU0sQ0FBQ2dDLE9BQU8sSUFBSXRDLGFBQWFNLE1BQU0sQ0FBQ2dDLE9BQU8sQ0FBQ0MsT0FBTyxFQUFFO1lBQ2xHLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJWCxrQkFBa0JXLEtBQUssRUFBRztnQkFDNUNyRCxvREFBZUEsQ0FBQ2EsYUFBYXlDLFFBQVEsRUFBRSxDQUFDLDBCQUEwQixFQUFFcEQsT0FBT3FELFNBQVMsR0FBR0YsRUFBRSxFQUFFLENBQUMsRUFBRUwsT0FBTyxDQUFDQyxDQUFBQTtvQkFDcEdBLFFBQVFoQyxTQUFTLENBQUNxQixHQUFHLENBQUNLO2dCQUN4QjtZQUNGO1FBQ0YsT0FBTztZQUNMLElBQUssSUFBSVUsSUFBSSxHQUFHQSxJQUFJWCxrQkFBa0JXLEtBQUssRUFBRztnQkFDNUMsSUFBSXhDLGFBQWFrQyxNQUFNLENBQUM3QyxPQUFPcUQsU0FBUyxHQUFHRixFQUFFLEVBQUU7b0JBQzdDeEMsYUFBYWtDLE1BQU0sQ0FBQzdDLE9BQU9xRCxTQUFTLEdBQUdGLEVBQUUsQ0FBQ3BDLFNBQVMsQ0FBQ3FCLEdBQUcsQ0FBQ0s7Z0JBQzFEO1lBQ0Y7UUFDRjtRQUNBLE1BQU1wQyxtQkFBbUJMLE9BQU9pQixNQUFNLENBQUNkLE1BQU0sQ0FBQ0UsZ0JBQWdCO1FBQzlELE1BQU1pRCxZQUFZakQsb0JBQW9CLENBQUNNLGFBQWFNLE1BQU0sQ0FBQ0UsSUFBSTtRQUMvRCxJQUFJbkIsT0FBT3FELFNBQVMsS0FBSzFDLGFBQWEwQyxTQUFTLElBQUlDLFdBQVc7WUFDNUQsTUFBTUMscUJBQXFCNUMsYUFBYTZDLFdBQVc7WUFDbkQsSUFBSUM7WUFDSixJQUFJQztZQUNKLElBQUkvQyxhQUFhTSxNQUFNLENBQUNFLElBQUksRUFBRTtnQkFDNUIsTUFBTXdDLGlCQUFpQmhELGFBQWFrQyxNQUFNLENBQUNlLElBQUksQ0FBQ2IsQ0FBQUEsVUFBV0EsUUFBUTFCLFlBQVksQ0FBQywrQkFBK0IsQ0FBQyxFQUFFckIsT0FBT3FELFNBQVMsQ0FBQyxDQUFDO2dCQUNwSUksaUJBQWlCOUMsYUFBYWtDLE1BQU0sQ0FBQ2dCLE9BQU8sQ0FBQ0Y7Z0JBQzdDRCxZQUFZMUQsT0FBT3dELFdBQVcsR0FBR3hELE9BQU84RCxhQUFhLEdBQUcsU0FBUztZQUNuRSxPQUFPO2dCQUNMTCxpQkFBaUJ6RCxPQUFPcUQsU0FBUztnQkFDakNLLFlBQVlELGlCQUFpQnpELE9BQU84RCxhQUFhLEdBQUcsU0FBUztZQUMvRDtZQUNBLElBQUlSLFdBQVc7Z0JBQ2JHLGtCQUFrQkMsY0FBYyxTQUFTckQsbUJBQW1CLENBQUMsSUFBSUE7WUFDbkU7WUFDQSxJQUFJTSxhQUFhb0Qsb0JBQW9CLElBQUlwRCxhQUFhb0Qsb0JBQW9CLENBQUNGLE9BQU8sQ0FBQ0osa0JBQWtCLEdBQUc7Z0JBQ3RHLElBQUk5QyxhQUFhTSxNQUFNLENBQUN5QixjQUFjLEVBQUU7b0JBQ3RDLElBQUllLGlCQUFpQkYsb0JBQW9CO3dCQUN2Q0UsaUJBQWlCQSxpQkFBaUJkLEtBQUtDLEtBQUssQ0FBQ04sZ0JBQWdCLEtBQUs7b0JBQ3BFLE9BQU87d0JBQ0xtQixpQkFBaUJBLGlCQUFpQmQsS0FBS0MsS0FBSyxDQUFDTixnQkFBZ0IsS0FBSztvQkFDcEU7Z0JBQ0YsT0FBTyxJQUFJbUIsaUJBQWlCRixzQkFBc0I1QyxhQUFhTSxNQUFNLENBQUMrQyxjQUFjLEtBQUs7Z0JBQ3pGckQsYUFBYVksT0FBTyxDQUFDa0MsZ0JBQWdCcEIsVUFBVSxJQUFJNEI7WUFDckQ7UUFDRjtJQUNGO0lBQ0EvRCxHQUFHLGNBQWM7UUFDZixNQUFNLEVBQ0pDLE1BQU0sRUFDUCxHQUFHSCxPQUFPaUIsTUFBTTtRQUNqQixJQUFJLENBQUNkLFVBQVUsQ0FBQ0EsT0FBT0gsTUFBTSxFQUFFO1FBQy9CLElBQUksT0FBT0csT0FBT0gsTUFBTSxLQUFLLFlBQVlHLE9BQU9ILE1BQU0sWUFBWWtFLGFBQWE7WUFDN0UsTUFBTUMsV0FBV3pFLDZEQUFXQTtZQUM1QixNQUFNMEUsMEJBQTBCO2dCQUM5QixNQUFNQyxnQkFBZ0IsT0FBT2xFLE9BQU9ILE1BQU0sS0FBSyxXQUFXbUUsU0FBU0csYUFBYSxDQUFDbkUsT0FBT0gsTUFBTSxJQUFJRyxPQUFPSCxNQUFNO2dCQUMvRyxJQUFJcUUsaUJBQWlCQSxjQUFjckUsTUFBTSxFQUFFO29CQUN6Q0csT0FBT0gsTUFBTSxHQUFHcUUsY0FBY3JFLE1BQU07b0JBQ3BDd0I7b0JBQ0FTLE9BQU87Z0JBQ1QsT0FBTyxJQUFJb0MsZUFBZTtvQkFDeEIsTUFBTUUsWUFBWSxDQUFDLEVBQUV2RSxPQUFPaUIsTUFBTSxDQUFDdUQsWUFBWSxDQUFDLElBQUksQ0FBQztvQkFDckQsTUFBTUMsaUJBQWlCNUUsQ0FBQUE7d0JBQ3JCTSxPQUFPSCxNQUFNLEdBQUdILEVBQUU2RSxNQUFNLENBQUMsRUFBRTt3QkFDM0JMLGNBQWNNLG1CQUFtQixDQUFDSixXQUFXRTt3QkFDN0NqRDt3QkFDQVMsT0FBTzt3QkFDUDlCLE9BQU9ILE1BQU0sQ0FBQ2lDLE1BQU07d0JBQ3BCakMsT0FBT2lDLE1BQU07b0JBQ2Y7b0JBQ0FvQyxjQUFjTyxnQkFBZ0IsQ0FBQ0wsV0FBV0U7Z0JBQzVDO2dCQUNBLE9BQU9KO1lBQ1Q7WUFDQSxNQUFNUSx5QkFBeUI7Z0JBQzdCLElBQUk3RSxPQUFPWSxTQUFTLEVBQUU7Z0JBQ3RCLE1BQU15RCxnQkFBZ0JEO2dCQUN0QixJQUFJLENBQUNDLGVBQWU7b0JBQ2xCUyxzQkFBc0JEO2dCQUN4QjtZQUNGO1lBQ0FDLHNCQUFzQkQ7UUFDeEIsT0FBTztZQUNMckQ7WUFDQVMsT0FBTztRQUNUO0lBQ0Y7SUFDQS9CLEdBQUcsNENBQTRDO1FBQzdDK0I7SUFDRjtJQUNBL0IsR0FBRyxpQkFBaUIsQ0FBQzZFLElBQUlDO1FBQ3ZCLE1BQU1yRSxlQUFlWCxPQUFPRyxNQUFNLENBQUNILE1BQU07UUFDekMsSUFBSSxDQUFDVyxnQkFBZ0JBLGFBQWFDLFNBQVMsRUFBRTtRQUM3Q0QsYUFBYXNFLGFBQWEsQ0FBQ0Q7SUFDN0I7SUFDQTlFLEdBQUcsaUJBQWlCO1FBQ2xCLE1BQU1TLGVBQWVYLE9BQU9HLE1BQU0sQ0FBQ0gsTUFBTTtRQUN6QyxJQUFJLENBQUNXLGdCQUFnQkEsYUFBYUMsU0FBUyxFQUFFO1FBQzdDLElBQUlILGVBQWU7WUFDakJFLGFBQWF1RSxPQUFPO1FBQ3RCO0lBQ0Y7SUFDQXRELE9BQU9DLE1BQU0sQ0FBQzdCLE9BQU9HLE1BQU0sRUFBRTtRQUMzQnFCO1FBQ0FTO0lBQ0Y7QUFDRjtBQUU0QiIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJidWNrcy10dXJrZXktY2xvbmUvLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvdGh1bWJzLm1qcz9iMTJkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGcgYXMgZ2V0RG9jdW1lbnQgfSBmcm9tICcuLi9zaGFyZWQvc3NyLXdpbmRvdy5lc20ubWpzJztcbmltcG9ydCB7IHAgYXMgaXNPYmplY3QsIGUgYXMgZWxlbWVudENoaWxkcmVuIH0gZnJvbSAnLi4vc2hhcmVkL3V0aWxzLm1qcyc7XG5cbmZ1bmN0aW9uIFRodW1iKHtcbiAgc3dpcGVyLFxuICBleHRlbmRQYXJhbXMsXG4gIG9uXG59KSB7XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgdGh1bWJzOiB7XG4gICAgICBzd2lwZXI6IG51bGwsXG4gICAgICBtdWx0aXBsZUFjdGl2ZVRodW1iczogdHJ1ZSxcbiAgICAgIGF1dG9TY3JvbGxPZmZzZXQ6IDAsXG4gICAgICBzbGlkZVRodW1iQWN0aXZlQ2xhc3M6ICdzd2lwZXItc2xpZGUtdGh1bWItYWN0aXZlJyxcbiAgICAgIHRodW1ic0NvbnRhaW5lckNsYXNzOiAnc3dpcGVyLXRodW1icydcbiAgICB9XG4gIH0pO1xuICBsZXQgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgbGV0IHN3aXBlckNyZWF0ZWQgPSBmYWxzZTtcbiAgc3dpcGVyLnRodW1icyA9IHtcbiAgICBzd2lwZXI6IG51bGxcbiAgfTtcbiAgZnVuY3Rpb24gb25UaHVtYkNsaWNrKCkge1xuICAgIGNvbnN0IHRodW1ic1N3aXBlciA9IHN3aXBlci50aHVtYnMuc3dpcGVyO1xuICAgIGlmICghdGh1bWJzU3dpcGVyIHx8IHRodW1ic1N3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICBjb25zdCBjbGlja2VkSW5kZXggPSB0aHVtYnNTd2lwZXIuY2xpY2tlZEluZGV4O1xuICAgIGNvbnN0IGNsaWNrZWRTbGlkZSA9IHRodW1ic1N3aXBlci5jbGlja2VkU2xpZGU7XG4gICAgaWYgKGNsaWNrZWRTbGlkZSAmJiBjbGlja2VkU2xpZGUuY2xhc3NMaXN0LmNvbnRhaW5zKHN3aXBlci5wYXJhbXMudGh1bWJzLnNsaWRlVGh1bWJBY3RpdmVDbGFzcykpIHJldHVybjtcbiAgICBpZiAodHlwZW9mIGNsaWNrZWRJbmRleCA9PT0gJ3VuZGVmaW5lZCcgfHwgY2xpY2tlZEluZGV4ID09PSBudWxsKSByZXR1cm47XG4gICAgbGV0IHNsaWRlVG9JbmRleDtcbiAgICBpZiAodGh1bWJzU3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICBzbGlkZVRvSW5kZXggPSBwYXJzZUludCh0aHVtYnNTd2lwZXIuY2xpY2tlZFNsaWRlLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSwgMTApO1xuICAgIH0gZWxzZSB7XG4gICAgICBzbGlkZVRvSW5kZXggPSBjbGlja2VkSW5kZXg7XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvTG9vcChzbGlkZVRvSW5kZXgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHRodW1iczogdGh1bWJzUGFyYW1zXG4gICAgfSA9IHN3aXBlci5wYXJhbXM7XG4gICAgaWYgKGluaXRpYWxpemVkKSByZXR1cm4gZmFsc2U7XG4gICAgaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgIGNvbnN0IFN3aXBlckNsYXNzID0gc3dpcGVyLmNvbnN0cnVjdG9yO1xuICAgIGlmICh0aHVtYnNQYXJhbXMuc3dpcGVyIGluc3RhbmNlb2YgU3dpcGVyQ2xhc3MpIHtcbiAgICAgIGlmICh0aHVtYnNQYXJhbXMuc3dpcGVyLmRlc3Ryb3llZCkge1xuICAgICAgICBpbml0aWFsaXplZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBzd2lwZXIudGh1bWJzLnN3aXBlciA9IHRodW1ic1BhcmFtcy5zd2lwZXI7XG4gICAgICBPYmplY3QuYXNzaWduKHN3aXBlci50aHVtYnMuc3dpcGVyLm9yaWdpbmFsUGFyYW1zLCB7XG4gICAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICAgIHNsaWRlVG9DbGlja2VkU2xpZGU6IGZhbHNlXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLnRodW1icy5zd2lwZXIucGFyYW1zLCB7XG4gICAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICAgIHNsaWRlVG9DbGlja2VkU2xpZGU6IGZhbHNlXG4gICAgICB9KTtcbiAgICAgIHN3aXBlci50aHVtYnMuc3dpcGVyLnVwZGF0ZSgpO1xuICAgIH0gZWxzZSBpZiAoaXNPYmplY3QodGh1bWJzUGFyYW1zLnN3aXBlcikpIHtcbiAgICAgIGNvbnN0IHRodW1ic1N3aXBlclBhcmFtcyA9IE9iamVjdC5hc3NpZ24oe30sIHRodW1ic1BhcmFtcy5zd2lwZXIpO1xuICAgICAgT2JqZWN0LmFzc2lnbih0aHVtYnNTd2lwZXJQYXJhbXMsIHtcbiAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgICAgc2xpZGVUb0NsaWNrZWRTbGlkZTogZmFsc2VcbiAgICAgIH0pO1xuICAgICAgc3dpcGVyLnRodW1icy5zd2lwZXIgPSBuZXcgU3dpcGVyQ2xhc3ModGh1bWJzU3dpcGVyUGFyYW1zKTtcbiAgICAgIHN3aXBlckNyZWF0ZWQgPSB0cnVlO1xuICAgIH1cbiAgICBzd2lwZXIudGh1bWJzLnN3aXBlci5lbC5jbGFzc0xpc3QuYWRkKHN3aXBlci5wYXJhbXMudGh1bWJzLnRodW1ic0NvbnRhaW5lckNsYXNzKTtcbiAgICBzd2lwZXIudGh1bWJzLnN3aXBlci5vbigndGFwJywgb25UaHVtYkNsaWNrKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBmdW5jdGlvbiB1cGRhdGUoaW5pdGlhbCkge1xuICAgIGNvbnN0IHRodW1ic1N3aXBlciA9IHN3aXBlci50aHVtYnMuc3dpcGVyO1xuICAgIGlmICghdGh1bWJzU3dpcGVyIHx8IHRodW1ic1N3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICBjb25zdCBzbGlkZXNQZXJWaWV3ID0gdGh1bWJzU3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgPyB0aHVtYnNTd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoKSA6IHRodW1ic1N3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldztcblxuICAgIC8vIEFjdGl2YXRlIHRodW1ic1xuICAgIGxldCB0aHVtYnNUb0FjdGl2YXRlID0gMTtcbiAgICBjb25zdCB0aHVtYkFjdGl2ZUNsYXNzID0gc3dpcGVyLnBhcmFtcy50aHVtYnMuc2xpZGVUaHVtYkFjdGl2ZUNsYXNzO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgPiAxICYmICFzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICB0aHVtYnNUb0FjdGl2YXRlID0gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgIH1cbiAgICBpZiAoIXN3aXBlci5wYXJhbXMudGh1bWJzLm11bHRpcGxlQWN0aXZlVGh1bWJzKSB7XG4gICAgICB0aHVtYnNUb0FjdGl2YXRlID0gMTtcbiAgICB9XG4gICAgdGh1bWJzVG9BY3RpdmF0ZSA9IE1hdGguZmxvb3IodGh1bWJzVG9BY3RpdmF0ZSk7XG4gICAgdGh1bWJzU3dpcGVyLnNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4gc2xpZGVFbC5jbGFzc0xpc3QucmVtb3ZlKHRodW1iQWN0aXZlQ2xhc3MpKTtcbiAgICBpZiAodGh1bWJzU3dpcGVyLnBhcmFtcy5sb29wIHx8IHRodW1ic1N3aXBlci5wYXJhbXMudmlydHVhbCAmJiB0aHVtYnNTd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aHVtYnNUb0FjdGl2YXRlOyBpICs9IDEpIHtcbiAgICAgICAgZWxlbWVudENoaWxkcmVuKHRodW1ic1N3aXBlci5zbGlkZXNFbCwgYFtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7c3dpcGVyLnJlYWxJbmRleCArIGl9XCJdYCkuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICAgICAgICBzbGlkZUVsLmNsYXNzTGlzdC5hZGQodGh1bWJBY3RpdmVDbGFzcyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRodW1ic1RvQWN0aXZhdGU7IGkgKz0gMSkge1xuICAgICAgICBpZiAodGh1bWJzU3dpcGVyLnNsaWRlc1tzd2lwZXIucmVhbEluZGV4ICsgaV0pIHtcbiAgICAgICAgICB0aHVtYnNTd2lwZXIuc2xpZGVzW3N3aXBlci5yZWFsSW5kZXggKyBpXS5jbGFzc0xpc3QuYWRkKHRodW1iQWN0aXZlQ2xhc3MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGF1dG9TY3JvbGxPZmZzZXQgPSBzd2lwZXIucGFyYW1zLnRodW1icy5hdXRvU2Nyb2xsT2Zmc2V0O1xuICAgIGNvbnN0IHVzZU9mZnNldCA9IGF1dG9TY3JvbGxPZmZzZXQgJiYgIXRodW1ic1N3aXBlci5wYXJhbXMubG9vcDtcbiAgICBpZiAoc3dpcGVyLnJlYWxJbmRleCAhPT0gdGh1bWJzU3dpcGVyLnJlYWxJbmRleCB8fCB1c2VPZmZzZXQpIHtcbiAgICAgIGNvbnN0IGN1cnJlbnRUaHVtYnNJbmRleCA9IHRodW1ic1N3aXBlci5hY3RpdmVJbmRleDtcbiAgICAgIGxldCBuZXdUaHVtYnNJbmRleDtcbiAgICAgIGxldCBkaXJlY3Rpb247XG4gICAgICBpZiAodGh1bWJzU3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgIGNvbnN0IG5ld1RodW1ic1NsaWRlID0gdGh1bWJzU3dpcGVyLnNsaWRlcy5maW5kKHNsaWRlRWwgPT4gc2xpZGVFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykgPT09IGAke3N3aXBlci5yZWFsSW5kZXh9YCk7XG4gICAgICAgIG5ld1RodW1ic0luZGV4ID0gdGh1bWJzU3dpcGVyLnNsaWRlcy5pbmRleE9mKG5ld1RodW1ic1NsaWRlKTtcbiAgICAgICAgZGlyZWN0aW9uID0gc3dpcGVyLmFjdGl2ZUluZGV4ID4gc3dpcGVyLnByZXZpb3VzSW5kZXggPyAnbmV4dCcgOiAncHJldic7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdUaHVtYnNJbmRleCA9IHN3aXBlci5yZWFsSW5kZXg7XG4gICAgICAgIGRpcmVjdGlvbiA9IG5ld1RodW1ic0luZGV4ID4gc3dpcGVyLnByZXZpb3VzSW5kZXggPyAnbmV4dCcgOiAncHJldic7XG4gICAgICB9XG4gICAgICBpZiAodXNlT2Zmc2V0KSB7XG4gICAgICAgIG5ld1RodW1ic0luZGV4ICs9IGRpcmVjdGlvbiA9PT0gJ25leHQnID8gYXV0b1Njcm9sbE9mZnNldCA6IC0xICogYXV0b1Njcm9sbE9mZnNldDtcbiAgICAgIH1cbiAgICAgIGlmICh0aHVtYnNTd2lwZXIudmlzaWJsZVNsaWRlc0luZGV4ZXMgJiYgdGh1bWJzU3dpcGVyLnZpc2libGVTbGlkZXNJbmRleGVzLmluZGV4T2YobmV3VGh1bWJzSW5kZXgpIDwgMCkge1xuICAgICAgICBpZiAodGh1bWJzU3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgICAgIGlmIChuZXdUaHVtYnNJbmRleCA+IGN1cnJlbnRUaHVtYnNJbmRleCkge1xuICAgICAgICAgICAgbmV3VGh1bWJzSW5kZXggPSBuZXdUaHVtYnNJbmRleCAtIE1hdGguZmxvb3Ioc2xpZGVzUGVyVmlldyAvIDIpICsgMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3VGh1bWJzSW5kZXggPSBuZXdUaHVtYnNJbmRleCArIE1hdGguZmxvb3Ioc2xpZGVzUGVyVmlldyAvIDIpIC0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobmV3VGh1bWJzSW5kZXggPiBjdXJyZW50VGh1bWJzSW5kZXggJiYgdGh1bWJzU3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMSkgO1xuICAgICAgICB0aHVtYnNTd2lwZXIuc2xpZGVUbyhuZXdUaHVtYnNJbmRleCwgaW5pdGlhbCA/IDAgOiB1bmRlZmluZWQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBvbignYmVmb3JlSW5pdCcsICgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICB0aHVtYnNcbiAgICB9ID0gc3dpcGVyLnBhcmFtcztcbiAgICBpZiAoIXRodW1icyB8fCAhdGh1bWJzLnN3aXBlcikgcmV0dXJuO1xuICAgIGlmICh0eXBlb2YgdGh1bWJzLnN3aXBlciA9PT0gJ3N0cmluZycgfHwgdGh1bWJzLnN3aXBlciBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgICBjb25zdCBnZXRUaHVtYnNFbGVtZW50QW5kSW5pdCA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgdGh1bWJzRWxlbWVudCA9IHR5cGVvZiB0aHVtYnMuc3dpcGVyID09PSAnc3RyaW5nJyA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGh1bWJzLnN3aXBlcikgOiB0aHVtYnMuc3dpcGVyO1xuICAgICAgICBpZiAodGh1bWJzRWxlbWVudCAmJiB0aHVtYnNFbGVtZW50LnN3aXBlcikge1xuICAgICAgICAgIHRodW1icy5zd2lwZXIgPSB0aHVtYnNFbGVtZW50LnN3aXBlcjtcbiAgICAgICAgICBpbml0KCk7XG4gICAgICAgICAgdXBkYXRlKHRydWUpO1xuICAgICAgICB9IGVsc2UgaWYgKHRodW1ic0VsZW1lbnQpIHtcbiAgICAgICAgICBjb25zdCBldmVudE5hbWUgPSBgJHtzd2lwZXIucGFyYW1zLmV2ZW50c1ByZWZpeH1pbml0YDtcbiAgICAgICAgICBjb25zdCBvblRodW1ic1N3aXBlciA9IGUgPT4ge1xuICAgICAgICAgICAgdGh1bWJzLnN3aXBlciA9IGUuZGV0YWlsWzBdO1xuICAgICAgICAgICAgdGh1bWJzRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgb25UaHVtYnNTd2lwZXIpO1xuICAgICAgICAgICAgaW5pdCgpO1xuICAgICAgICAgICAgdXBkYXRlKHRydWUpO1xuICAgICAgICAgICAgdGh1bWJzLnN3aXBlci51cGRhdGUoKTtcbiAgICAgICAgICAgIHN3aXBlci51cGRhdGUoKTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIHRodW1ic0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIG9uVGh1bWJzU3dpcGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGh1bWJzRWxlbWVudDtcbiAgICAgIH07XG4gICAgICBjb25zdCB3YXRjaEZvclRodW1ic1RvQXBwZWFyID0gKCkgPT4ge1xuICAgICAgICBpZiAoc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICBjb25zdCB0aHVtYnNFbGVtZW50ID0gZ2V0VGh1bWJzRWxlbWVudEFuZEluaXQoKTtcbiAgICAgICAgaWYgKCF0aHVtYnNFbGVtZW50KSB7XG4gICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHdhdGNoRm9yVGh1bWJzVG9BcHBlYXIpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHdhdGNoRm9yVGh1bWJzVG9BcHBlYXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbml0KCk7XG4gICAgICB1cGRhdGUodHJ1ZSk7XG4gICAgfVxuICB9KTtcbiAgb24oJ3NsaWRlQ2hhbmdlIHVwZGF0ZSByZXNpemUgb2JzZXJ2ZXJVcGRhdGUnLCAoKSA9PiB7XG4gICAgdXBkYXRlKCk7XG4gIH0pO1xuICBvbignc2V0VHJhbnNpdGlvbicsIChfcywgZHVyYXRpb24pID0+IHtcbiAgICBjb25zdCB0aHVtYnNTd2lwZXIgPSBzd2lwZXIudGh1bWJzLnN3aXBlcjtcbiAgICBpZiAoIXRodW1ic1N3aXBlciB8fCB0aHVtYnNTd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgdGh1bWJzU3dpcGVyLnNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICB9KTtcbiAgb24oJ2JlZm9yZURlc3Ryb3knLCAoKSA9PiB7XG4gICAgY29uc3QgdGh1bWJzU3dpcGVyID0gc3dpcGVyLnRodW1icy5zd2lwZXI7XG4gICAgaWYgKCF0aHVtYnNTd2lwZXIgfHwgdGh1bWJzU3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgIGlmIChzd2lwZXJDcmVhdGVkKSB7XG4gICAgICB0aHVtYnNTd2lwZXIuZGVzdHJveSgpO1xuICAgIH1cbiAgfSk7XG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLnRodW1icywge1xuICAgIGluaXQsXG4gICAgdXBkYXRlXG4gIH0pO1xufVxuXG5leHBvcnQgeyBUaHVtYiBhcyBkZWZhdWx0IH07XG4iXSwibmFtZXMiOlsiZyIsImdldERvY3VtZW50IiwicCIsImlzT2JqZWN0IiwiZSIsImVsZW1lbnRDaGlsZHJlbiIsIlRodW1iIiwic3dpcGVyIiwiZXh0ZW5kUGFyYW1zIiwib24iLCJ0aHVtYnMiLCJtdWx0aXBsZUFjdGl2ZVRodW1icyIsImF1dG9TY3JvbGxPZmZzZXQiLCJzbGlkZVRodW1iQWN0aXZlQ2xhc3MiLCJ0aHVtYnNDb250YWluZXJDbGFzcyIsImluaXRpYWxpemVkIiwic3dpcGVyQ3JlYXRlZCIsIm9uVGh1bWJDbGljayIsInRodW1ic1N3aXBlciIsImRlc3Ryb3llZCIsImNsaWNrZWRJbmRleCIsImNsaWNrZWRTbGlkZSIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwicGFyYW1zIiwic2xpZGVUb0luZGV4IiwibG9vcCIsInBhcnNlSW50IiwiZ2V0QXR0cmlidXRlIiwic2xpZGVUb0xvb3AiLCJzbGlkZVRvIiwiaW5pdCIsInRodW1ic1BhcmFtcyIsIlN3aXBlckNsYXNzIiwiY29uc3RydWN0b3IiLCJPYmplY3QiLCJhc3NpZ24iLCJvcmlnaW5hbFBhcmFtcyIsIndhdGNoU2xpZGVzUHJvZ3Jlc3MiLCJzbGlkZVRvQ2xpY2tlZFNsaWRlIiwidXBkYXRlIiwidGh1bWJzU3dpcGVyUGFyYW1zIiwiZWwiLCJhZGQiLCJpbml0aWFsIiwic2xpZGVzUGVyVmlldyIsInNsaWRlc1BlclZpZXdEeW5hbWljIiwidGh1bWJzVG9BY3RpdmF0ZSIsInRodW1iQWN0aXZlQ2xhc3MiLCJjZW50ZXJlZFNsaWRlcyIsIk1hdGgiLCJmbG9vciIsInNsaWRlcyIsImZvckVhY2giLCJzbGlkZUVsIiwicmVtb3ZlIiwidmlydHVhbCIsImVuYWJsZWQiLCJpIiwic2xpZGVzRWwiLCJyZWFsSW5kZXgiLCJ1c2VPZmZzZXQiLCJjdXJyZW50VGh1bWJzSW5kZXgiLCJhY3RpdmVJbmRleCIsIm5ld1RodW1ic0luZGV4IiwiZGlyZWN0aW9uIiwibmV3VGh1bWJzU2xpZGUiLCJmaW5kIiwiaW5kZXhPZiIsInByZXZpb3VzSW5kZXgiLCJ2aXNpYmxlU2xpZGVzSW5kZXhlcyIsInNsaWRlc1Blckdyb3VwIiwidW5kZWZpbmVkIiwiSFRNTEVsZW1lbnQiLCJkb2N1bWVudCIsImdldFRodW1ic0VsZW1lbnRBbmRJbml0IiwidGh1bWJzRWxlbWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJldmVudE5hbWUiLCJldmVudHNQcmVmaXgiLCJvblRodW1ic1N3aXBlciIsImRldGFpbCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJhZGRFdmVudExpc3RlbmVyIiwid2F0Y2hGb3JUaHVtYnNUb0FwcGVhciIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIl9zIiwiZHVyYXRpb24iLCJzZXRUcmFuc2l0aW9uIiwiZGVzdHJveSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/thumbs.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/virtual.mjs":
/*!*************************************************!*\
  !*** ./node_modules/swiper/modules/virtual.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Virtual)\n/* harmony export */ });\n/* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/ssr-window.esm.mjs */ \"(ssr)/./node_modules/swiper/shared/ssr-window.esm.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\n\nfunction Virtual({ swiper, extendParams, on, emit }) {\n    extendParams({\n        virtual: {\n            enabled: false,\n            slides: [],\n            cache: true,\n            slidesPerViewAutoSlideSize: 320,\n            renderSlide: null,\n            renderExternal: null,\n            renderExternalUpdate: true,\n            addSlidesBefore: 0,\n            addSlidesAfter: 0\n        }\n    });\n    let cssModeTimeout;\n    const document = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n    swiper.virtual = {\n        cache: {},\n        from: undefined,\n        to: undefined,\n        slides: [],\n        offset: 0,\n        slidesGrid: []\n    };\n    const tempDOM = document.createElement(\"div\");\n    function renderSlide(slide, index) {\n        const params = swiper.params.virtual;\n        if (params.cache && swiper.virtual.cache[index]) {\n            return swiper.virtual.cache[index];\n        }\n        // eslint-disable-next-line\n        let slideEl;\n        if (params.renderSlide) {\n            slideEl = params.renderSlide.call(swiper, slide, index);\n            if (typeof slideEl === \"string\") {\n                (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.s)(tempDOM, slideEl);\n                slideEl = tempDOM.children[0];\n            }\n        } else if (swiper.isElement) {\n            slideEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(\"swiper-slide\");\n        } else {\n            slideEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(\"div\", swiper.params.slideClass);\n        }\n        slideEl.setAttribute(\"data-swiper-slide-index\", index);\n        if (!params.renderSlide) {\n            (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.s)(slideEl, slide);\n        }\n        if (params.cache) {\n            swiper.virtual.cache[index] = slideEl;\n        }\n        return slideEl;\n    }\n    function update(force, beforeInit, forceActiveIndex) {\n        const { slidesPerGroup, centeredSlides, slidesPerView, loop: isLoop, initialSlide } = swiper.params;\n        if (beforeInit && !isLoop && initialSlide > 0) {\n            return;\n        }\n        const { addSlidesBefore, addSlidesAfter, slidesPerViewAutoSlideSize } = swiper.params.virtual;\n        const { from: previousFrom, to: previousTo, slides, slidesGrid: previousSlidesGrid, offset: previousOffset } = swiper.virtual;\n        if (!swiper.params.cssMode) {\n            swiper.updateActiveIndex();\n        }\n        const activeIndex = typeof forceActiveIndex === \"undefined\" ? swiper.activeIndex || 0 : forceActiveIndex;\n        let offsetProp;\n        if (swiper.rtlTranslate) offsetProp = \"right\";\n        else offsetProp = swiper.isHorizontal() ? \"left\" : \"top\";\n        let slidesPerViewNumeric;\n        if (slidesPerView === \"auto\") {\n            if (slidesPerViewAutoSlideSize) {\n                let swiperSize = swiper.size;\n                if (!swiperSize) {\n                    swiperSize = swiper.isHorizontal() ? swiper.el.getBoundingClientRect().width : swiper.el.getBoundingClientRect().height;\n                }\n                slidesPerViewNumeric = Math.max(1, Math.ceil(swiperSize / slidesPerViewAutoSlideSize));\n            } else {\n                slidesPerViewNumeric = 1;\n            }\n        } else {\n            slidesPerViewNumeric = slidesPerView;\n        }\n        let slidesAfter;\n        let slidesBefore;\n        if (centeredSlides) {\n            slidesAfter = Math.floor(slidesPerViewNumeric / 2) + slidesPerGroup + addSlidesAfter;\n            slidesBefore = Math.floor(slidesPerViewNumeric / 2) + slidesPerGroup + addSlidesBefore;\n        } else {\n            slidesAfter = slidesPerViewNumeric + (slidesPerGroup - 1) + addSlidesAfter;\n            slidesBefore = (isLoop ? slidesPerViewNumeric : slidesPerGroup) + addSlidesBefore;\n        }\n        let from = activeIndex - slidesBefore;\n        let to = activeIndex + slidesAfter;\n        if (!isLoop) {\n            from = Math.max(from, 0);\n            to = Math.min(to, slides.length - 1);\n        }\n        let offset = (swiper.slidesGrid[from] || 0) - (swiper.slidesGrid[0] || 0);\n        if (isLoop && activeIndex >= slidesBefore) {\n            from -= slidesBefore;\n            if (!centeredSlides) offset += swiper.slidesGrid[0];\n        } else if (isLoop && activeIndex < slidesBefore) {\n            from = -slidesBefore;\n            if (centeredSlides) offset += swiper.slidesGrid[0];\n        }\n        Object.assign(swiper.virtual, {\n            from,\n            to,\n            offset,\n            slidesGrid: swiper.slidesGrid,\n            slidesBefore,\n            slidesAfter\n        });\n        function onRendered() {\n            swiper.updateSlides();\n            swiper.updateProgress();\n            swiper.updateSlidesClasses();\n            emit(\"virtualUpdate\");\n        }\n        if (previousFrom === from && previousTo === to && !force) {\n            if (swiper.slidesGrid !== previousSlidesGrid && offset !== previousOffset) {\n                swiper.slides.forEach((slideEl)=>{\n                    slideEl.style[offsetProp] = `${offset - Math.abs(swiper.cssOverflowAdjustment())}px`;\n                });\n            }\n            swiper.updateProgress();\n            emit(\"virtualUpdate\");\n            return;\n        }\n        if (swiper.params.virtual.renderExternal) {\n            swiper.params.virtual.renderExternal.call(swiper, {\n                offset,\n                from,\n                to,\n                slides: function getSlides() {\n                    const slidesToRender = [];\n                    for(let i = from; i <= to; i += 1){\n                        slidesToRender.push(slides[i]);\n                    }\n                    return slidesToRender;\n                }()\n            });\n            if (swiper.params.virtual.renderExternalUpdate) {\n                onRendered();\n            } else {\n                emit(\"virtualUpdate\");\n            }\n            return;\n        }\n        const prependIndexes = [];\n        const appendIndexes = [];\n        const getSlideIndex = (index)=>{\n            let slideIndex = index;\n            if (index < 0) {\n                slideIndex = slides.length + index;\n            } else if (slideIndex >= slides.length) {\n                // eslint-disable-next-line\n                slideIndex = slideIndex - slides.length;\n            }\n            return slideIndex;\n        };\n        if (force) {\n            swiper.slides.filter((el)=>el.matches(`.${swiper.params.slideClass}, swiper-slide`)).forEach((slideEl)=>{\n                slideEl.remove();\n            });\n        } else {\n            for(let i = previousFrom; i <= previousTo; i += 1){\n                if (i < from || i > to) {\n                    const slideIndex = getSlideIndex(i);\n                    swiper.slides.filter((el)=>el.matches(`.${swiper.params.slideClass}[data-swiper-slide-index=\"${slideIndex}\"], swiper-slide[data-swiper-slide-index=\"${slideIndex}\"]`)).forEach((slideEl)=>{\n                        slideEl.remove();\n                    });\n                }\n            }\n        }\n        const loopFrom = isLoop ? -slides.length : 0;\n        const loopTo = isLoop ? slides.length * 2 : slides.length;\n        for(let i = loopFrom; i < loopTo; i += 1){\n            if (i >= from && i <= to) {\n                const slideIndex = getSlideIndex(i);\n                if (typeof previousTo === \"undefined\" || force) {\n                    appendIndexes.push(slideIndex);\n                } else {\n                    if (i > previousTo) appendIndexes.push(slideIndex);\n                    if (i < previousFrom) prependIndexes.push(slideIndex);\n                }\n            }\n        }\n        appendIndexes.forEach((index)=>{\n            swiper.slidesEl.append(renderSlide(slides[index], index));\n        });\n        if (isLoop) {\n            for(let i = prependIndexes.length - 1; i >= 0; i -= 1){\n                const index = prependIndexes[i];\n                swiper.slidesEl.prepend(renderSlide(slides[index], index));\n            }\n        } else {\n            prependIndexes.sort((a, b)=>b - a);\n            prependIndexes.forEach((index)=>{\n                swiper.slidesEl.prepend(renderSlide(slides[index], index));\n            });\n        }\n        (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(swiper.slidesEl, \".swiper-slide, swiper-slide\").forEach((slideEl)=>{\n            slideEl.style[offsetProp] = `${offset - Math.abs(swiper.cssOverflowAdjustment())}px`;\n        });\n        onRendered();\n    }\n    function appendSlide(slides) {\n        if (typeof slides === \"object\" && \"length\" in slides) {\n            for(let i = 0; i < slides.length; i += 1){\n                if (slides[i]) swiper.virtual.slides.push(slides[i]);\n            }\n        } else {\n            swiper.virtual.slides.push(slides);\n        }\n        update(true);\n    }\n    function prependSlide(slides) {\n        const activeIndex = swiper.activeIndex;\n        let newActiveIndex = activeIndex + 1;\n        let numberOfNewSlides = 1;\n        if (Array.isArray(slides)) {\n            for(let i = 0; i < slides.length; i += 1){\n                if (slides[i]) swiper.virtual.slides.unshift(slides[i]);\n            }\n            newActiveIndex = activeIndex + slides.length;\n            numberOfNewSlides = slides.length;\n        } else {\n            swiper.virtual.slides.unshift(slides);\n        }\n        if (swiper.params.virtual.cache) {\n            const cache = swiper.virtual.cache;\n            const newCache = {};\n            Object.keys(cache).forEach((cachedIndex)=>{\n                const cachedEl = cache[cachedIndex];\n                const cachedElIndex = cachedEl.getAttribute(\"data-swiper-slide-index\");\n                if (cachedElIndex) {\n                    cachedEl.setAttribute(\"data-swiper-slide-index\", parseInt(cachedElIndex, 10) + numberOfNewSlides);\n                }\n                newCache[parseInt(cachedIndex, 10) + numberOfNewSlides] = cachedEl;\n            });\n            swiper.virtual.cache = newCache;\n        }\n        update(true);\n        swiper.slideTo(newActiveIndex, 0);\n    }\n    function removeSlide(slidesIndexes) {\n        if (typeof slidesIndexes === \"undefined\" || slidesIndexes === null) return;\n        let activeIndex = swiper.activeIndex;\n        if (Array.isArray(slidesIndexes)) {\n            for(let i = slidesIndexes.length - 1; i >= 0; i -= 1){\n                if (swiper.params.virtual.cache) {\n                    delete swiper.virtual.cache[slidesIndexes[i]];\n                    // shift cache indexes\n                    Object.keys(swiper.virtual.cache).forEach((key)=>{\n                        if (key > slidesIndexes) {\n                            swiper.virtual.cache[key - 1] = swiper.virtual.cache[key];\n                            swiper.virtual.cache[key - 1].setAttribute(\"data-swiper-slide-index\", key - 1);\n                            delete swiper.virtual.cache[key];\n                        }\n                    });\n                }\n                swiper.virtual.slides.splice(slidesIndexes[i], 1);\n                if (slidesIndexes[i] < activeIndex) activeIndex -= 1;\n                activeIndex = Math.max(activeIndex, 0);\n            }\n        } else {\n            if (swiper.params.virtual.cache) {\n                delete swiper.virtual.cache[slidesIndexes];\n                // shift cache indexes\n                Object.keys(swiper.virtual.cache).forEach((key)=>{\n                    if (key > slidesIndexes) {\n                        swiper.virtual.cache[key - 1] = swiper.virtual.cache[key];\n                        swiper.virtual.cache[key - 1].setAttribute(\"data-swiper-slide-index\", key - 1);\n                        delete swiper.virtual.cache[key];\n                    }\n                });\n            }\n            swiper.virtual.slides.splice(slidesIndexes, 1);\n            if (slidesIndexes < activeIndex) activeIndex -= 1;\n            activeIndex = Math.max(activeIndex, 0);\n        }\n        update(true);\n        swiper.slideTo(activeIndex, 0);\n    }\n    function removeAllSlides() {\n        swiper.virtual.slides = [];\n        if (swiper.params.virtual.cache) {\n            swiper.virtual.cache = {};\n        }\n        update(true);\n        swiper.slideTo(0, 0);\n    }\n    on(\"beforeInit\", ()=>{\n        if (!swiper.params.virtual.enabled) return;\n        let domSlidesAssigned;\n        if (typeof swiper.passedParams.virtual.slides === \"undefined\") {\n            const slides = [\n                ...swiper.slidesEl.children\n            ].filter((el)=>el.matches(`.${swiper.params.slideClass}, swiper-slide`));\n            if (slides && slides.length) {\n                swiper.virtual.slides = [\n                    ...slides\n                ];\n                domSlidesAssigned = true;\n                slides.forEach((slideEl, slideIndex)=>{\n                    slideEl.setAttribute(\"data-swiper-slide-index\", slideIndex);\n                    swiper.virtual.cache[slideIndex] = slideEl;\n                    slideEl.remove();\n                });\n            }\n        }\n        if (!domSlidesAssigned) {\n            swiper.virtual.slides = swiper.params.virtual.slides;\n        }\n        swiper.classNames.push(`${swiper.params.containerModifierClass}virtual`);\n        swiper.params.watchSlidesProgress = true;\n        swiper.originalParams.watchSlidesProgress = true;\n        update(false, true);\n    });\n    on(\"setTranslate\", ()=>{\n        if (!swiper.params.virtual.enabled) return;\n        if (swiper.params.cssMode && !swiper._immediateVirtual) {\n            clearTimeout(cssModeTimeout);\n            cssModeTimeout = setTimeout(()=>{\n                update();\n            }, 100);\n        } else {\n            update();\n        }\n    });\n    on(\"init update resize\", ()=>{\n        if (!swiper.params.virtual.enabled) return;\n        if (swiper.params.cssMode) {\n            (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(swiper.wrapperEl, \"--swiper-virtual-size\", `${swiper.virtualSize}px`);\n        }\n    });\n    Object.assign(swiper.virtual, {\n        appendSlide,\n        prependSlide,\n        removeSlide,\n        removeAllSlides,\n        update\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/virtual.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/modules/zoom.mjs":
/*!**********************************************!*\
  !*** ./node_modules/swiper/modules/zoom.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Zoom)\n/* harmony export */ });\n/* harmony import */ var _shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/ssr-window.esm.mjs */ \"(ssr)/./node_modules/swiper/shared/ssr-window.esm.mjs\");\n/* harmony import */ var _shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\n\nfunction Zoom({ swiper, extendParams, on, emit }) {\n    const window = (0,_shared_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    extendParams({\n        zoom: {\n            enabled: false,\n            limitToOriginalSize: false,\n            maxRatio: 3,\n            minRatio: 1,\n            panOnMouseMove: false,\n            toggle: true,\n            containerClass: \"swiper-zoom-container\",\n            zoomedSlideClass: \"swiper-slide-zoomed\"\n        }\n    });\n    swiper.zoom = {\n        enabled: false\n    };\n    let currentScale = 1;\n    let isScaling = false;\n    let isPanningWithMouse = false;\n    let mousePanStart = {\n        x: 0,\n        y: 0\n    };\n    const mousePanSensitivity = -3; // Negative to invert pan direction\n    let fakeGestureTouched;\n    let fakeGestureMoved;\n    const evCache = [];\n    const gesture = {\n        originX: 0,\n        originY: 0,\n        slideEl: undefined,\n        slideWidth: undefined,\n        slideHeight: undefined,\n        imageEl: undefined,\n        imageWrapEl: undefined,\n        maxRatio: 3\n    };\n    const image = {\n        isTouched: undefined,\n        isMoved: undefined,\n        currentX: undefined,\n        currentY: undefined,\n        minX: undefined,\n        minY: undefined,\n        maxX: undefined,\n        maxY: undefined,\n        width: undefined,\n        height: undefined,\n        startX: undefined,\n        startY: undefined,\n        touchesStart: {},\n        touchesCurrent: {}\n    };\n    const velocity = {\n        x: undefined,\n        y: undefined,\n        prevPositionX: undefined,\n        prevPositionY: undefined,\n        prevTime: undefined\n    };\n    let scale = 1;\n    Object.defineProperty(swiper.zoom, \"scale\", {\n        get () {\n            return scale;\n        },\n        set (value) {\n            if (scale !== value) {\n                const imageEl = gesture.imageEl;\n                const slideEl = gesture.slideEl;\n                emit(\"zoomChange\", value, imageEl, slideEl);\n            }\n            scale = value;\n        }\n    });\n    function getDistanceBetweenTouches() {\n        if (evCache.length < 2) return 1;\n        const x1 = evCache[0].pageX;\n        const y1 = evCache[0].pageY;\n        const x2 = evCache[1].pageX;\n        const y2 = evCache[1].pageY;\n        const distance = Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);\n        return distance;\n    }\n    function getMaxRatio() {\n        const params = swiper.params.zoom;\n        const maxRatio = gesture.imageWrapEl.getAttribute(\"data-swiper-zoom\") || params.maxRatio;\n        if (params.limitToOriginalSize && gesture.imageEl && gesture.imageEl.naturalWidth) {\n            const imageMaxRatio = gesture.imageEl.naturalWidth / gesture.imageEl.offsetWidth;\n            return Math.min(imageMaxRatio, maxRatio);\n        }\n        return maxRatio;\n    }\n    function getScaleOrigin() {\n        if (evCache.length < 2) return {\n            x: null,\n            y: null\n        };\n        const box = gesture.imageEl.getBoundingClientRect();\n        return [\n            (evCache[0].pageX + (evCache[1].pageX - evCache[0].pageX) / 2 - box.x - window.scrollX) / currentScale,\n            (evCache[0].pageY + (evCache[1].pageY - evCache[0].pageY) / 2 - box.y - window.scrollY) / currentScale\n        ];\n    }\n    function getSlideSelector() {\n        return swiper.isElement ? `swiper-slide` : `.${swiper.params.slideClass}`;\n    }\n    function eventWithinSlide(e) {\n        const slideSelector = getSlideSelector();\n        if (e.target.matches(slideSelector)) return true;\n        if (swiper.slides.filter((slideEl)=>slideEl.contains(e.target)).length > 0) return true;\n        return false;\n    }\n    function eventWithinZoomContainer(e) {\n        const selector = `.${swiper.params.zoom.containerClass}`;\n        if (e.target.matches(selector)) return true;\n        if ([\n            ...swiper.hostEl.querySelectorAll(selector)\n        ].filter((containerEl)=>containerEl.contains(e.target)).length > 0) return true;\n        return false;\n    }\n    // Events\n    function onGestureStart(e) {\n        if (e.pointerType === \"mouse\") {\n            evCache.splice(0, evCache.length);\n        }\n        if (!eventWithinSlide(e)) return;\n        const params = swiper.params.zoom;\n        fakeGestureTouched = false;\n        fakeGestureMoved = false;\n        evCache.push(e);\n        if (evCache.length < 2) {\n            return;\n        }\n        fakeGestureTouched = true;\n        gesture.scaleStart = getDistanceBetweenTouches();\n        if (!gesture.slideEl) {\n            gesture.slideEl = e.target.closest(`.${swiper.params.slideClass}, swiper-slide`);\n            if (!gesture.slideEl) gesture.slideEl = swiper.slides[swiper.activeIndex];\n            let imageEl = gesture.slideEl.querySelector(`.${params.containerClass}`);\n            if (imageEl) {\n                imageEl = imageEl.querySelectorAll(\"picture, img, svg, canvas, .swiper-zoom-target\")[0];\n            }\n            gesture.imageEl = imageEl;\n            if (imageEl) {\n                gesture.imageWrapEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.d)(gesture.imageEl, `.${params.containerClass}`)[0];\n            } else {\n                gesture.imageWrapEl = undefined;\n            }\n            if (!gesture.imageWrapEl) {\n                gesture.imageEl = undefined;\n                return;\n            }\n            gesture.maxRatio = getMaxRatio();\n        }\n        if (gesture.imageEl) {\n            const [originX, originY] = getScaleOrigin();\n            gesture.originX = originX;\n            gesture.originY = originY;\n            gesture.imageEl.style.transitionDuration = \"0ms\";\n        }\n        isScaling = true;\n    }\n    function onGestureChange(e) {\n        if (!eventWithinSlide(e)) return;\n        const params = swiper.params.zoom;\n        const zoom = swiper.zoom;\n        const pointerIndex = evCache.findIndex((cachedEv)=>cachedEv.pointerId === e.pointerId);\n        if (pointerIndex >= 0) evCache[pointerIndex] = e;\n        if (evCache.length < 2) {\n            return;\n        }\n        fakeGestureMoved = true;\n        gesture.scaleMove = getDistanceBetweenTouches();\n        if (!gesture.imageEl) {\n            return;\n        }\n        zoom.scale = gesture.scaleMove / gesture.scaleStart * currentScale;\n        if (zoom.scale > gesture.maxRatio) {\n            zoom.scale = gesture.maxRatio - 1 + (zoom.scale - gesture.maxRatio + 1) ** 0.5;\n        }\n        if (zoom.scale < params.minRatio) {\n            zoom.scale = params.minRatio + 1 - (params.minRatio - zoom.scale + 1) ** 0.5;\n        }\n        gesture.imageEl.style.transform = `translate3d(0,0,0) scale(${zoom.scale})`;\n    }\n    function onGestureEnd(e) {\n        if (!eventWithinSlide(e)) return;\n        if (e.pointerType === \"mouse\" && e.type === \"pointerout\") return;\n        const params = swiper.params.zoom;\n        const zoom = swiper.zoom;\n        const pointerIndex = evCache.findIndex((cachedEv)=>cachedEv.pointerId === e.pointerId);\n        if (pointerIndex >= 0) evCache.splice(pointerIndex, 1);\n        if (!fakeGestureTouched || !fakeGestureMoved) {\n            return;\n        }\n        fakeGestureTouched = false;\n        fakeGestureMoved = false;\n        if (!gesture.imageEl) return;\n        zoom.scale = Math.max(Math.min(zoom.scale, gesture.maxRatio), params.minRatio);\n        gesture.imageEl.style.transitionDuration = `${swiper.params.speed}ms`;\n        gesture.imageEl.style.transform = `translate3d(0,0,0) scale(${zoom.scale})`;\n        currentScale = zoom.scale;\n        isScaling = false;\n        if (zoom.scale > 1 && gesture.slideEl) {\n            gesture.slideEl.classList.add(`${params.zoomedSlideClass}`);\n        } else if (zoom.scale <= 1 && gesture.slideEl) {\n            gesture.slideEl.classList.remove(`${params.zoomedSlideClass}`);\n        }\n        if (zoom.scale === 1) {\n            gesture.originX = 0;\n            gesture.originY = 0;\n            gesture.slideEl = undefined;\n        }\n    }\n    let allowTouchMoveTimeout;\n    function allowTouchMove() {\n        swiper.touchEventsData.preventTouchMoveFromPointerMove = false;\n    }\n    function preventTouchMove() {\n        clearTimeout(allowTouchMoveTimeout);\n        swiper.touchEventsData.preventTouchMoveFromPointerMove = true;\n        allowTouchMoveTimeout = setTimeout(()=>{\n            if (swiper.destroyed) return;\n            allowTouchMove();\n        });\n    }\n    function onTouchStart(e) {\n        const device = swiper.device;\n        if (!gesture.imageEl) return;\n        if (image.isTouched) return;\n        if (device.android && e.cancelable) e.preventDefault();\n        image.isTouched = true;\n        const event = evCache.length > 0 ? evCache[0] : e;\n        image.touchesStart.x = event.pageX;\n        image.touchesStart.y = event.pageY;\n    }\n    function onTouchMove(e) {\n        const isMouseEvent = e.pointerType === \"mouse\";\n        const isMousePan = isMouseEvent && swiper.params.zoom.panOnMouseMove;\n        if (!eventWithinSlide(e) || !eventWithinZoomContainer(e)) {\n            return;\n        }\n        const zoom = swiper.zoom;\n        if (!gesture.imageEl) {\n            return;\n        }\n        if (!image.isTouched || !gesture.slideEl) {\n            if (isMousePan) onMouseMove(e);\n            return;\n        }\n        if (isMousePan) {\n            onMouseMove(e);\n            return;\n        }\n        if (!image.isMoved) {\n            image.width = gesture.imageEl.offsetWidth || gesture.imageEl.clientWidth;\n            image.height = gesture.imageEl.offsetHeight || gesture.imageEl.clientHeight;\n            image.startX = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.l)(gesture.imageWrapEl, \"x\") || 0;\n            image.startY = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.l)(gesture.imageWrapEl, \"y\") || 0;\n            gesture.slideWidth = gesture.slideEl.offsetWidth;\n            gesture.slideHeight = gesture.slideEl.offsetHeight;\n            gesture.imageWrapEl.style.transitionDuration = \"0ms\";\n        }\n        // Define if we need image drag\n        const scaledWidth = image.width * zoom.scale;\n        const scaledHeight = image.height * zoom.scale;\n        image.minX = Math.min(gesture.slideWidth / 2 - scaledWidth / 2, 0);\n        image.maxX = -image.minX;\n        image.minY = Math.min(gesture.slideHeight / 2 - scaledHeight / 2, 0);\n        image.maxY = -image.minY;\n        image.touchesCurrent.x = evCache.length > 0 ? evCache[0].pageX : e.pageX;\n        image.touchesCurrent.y = evCache.length > 0 ? evCache[0].pageY : e.pageY;\n        const touchesDiff = Math.max(Math.abs(image.touchesCurrent.x - image.touchesStart.x), Math.abs(image.touchesCurrent.y - image.touchesStart.y));\n        if (touchesDiff > 5) {\n            swiper.allowClick = false;\n        }\n        if (!image.isMoved && !isScaling) {\n            if (swiper.isHorizontal() && (Math.floor(image.minX) === Math.floor(image.startX) && image.touchesCurrent.x < image.touchesStart.x || Math.floor(image.maxX) === Math.floor(image.startX) && image.touchesCurrent.x > image.touchesStart.x)) {\n                image.isTouched = false;\n                allowTouchMove();\n                return;\n            }\n            if (!swiper.isHorizontal() && (Math.floor(image.minY) === Math.floor(image.startY) && image.touchesCurrent.y < image.touchesStart.y || Math.floor(image.maxY) === Math.floor(image.startY) && image.touchesCurrent.y > image.touchesStart.y)) {\n                image.isTouched = false;\n                allowTouchMove();\n                return;\n            }\n        }\n        if (e.cancelable) {\n            e.preventDefault();\n        }\n        e.stopPropagation();\n        preventTouchMove();\n        image.isMoved = true;\n        const scaleRatio = (zoom.scale - currentScale) / (gesture.maxRatio - swiper.params.zoom.minRatio);\n        const { originX, originY } = gesture;\n        image.currentX = image.touchesCurrent.x - image.touchesStart.x + image.startX + scaleRatio * (image.width - originX * 2);\n        image.currentY = image.touchesCurrent.y - image.touchesStart.y + image.startY + scaleRatio * (image.height - originY * 2);\n        if (image.currentX < image.minX) {\n            image.currentX = image.minX + 1 - (image.minX - image.currentX + 1) ** 0.8;\n        }\n        if (image.currentX > image.maxX) {\n            image.currentX = image.maxX - 1 + (image.currentX - image.maxX + 1) ** 0.8;\n        }\n        if (image.currentY < image.minY) {\n            image.currentY = image.minY + 1 - (image.minY - image.currentY + 1) ** 0.8;\n        }\n        if (image.currentY > image.maxY) {\n            image.currentY = image.maxY - 1 + (image.currentY - image.maxY + 1) ** 0.8;\n        }\n        // Velocity\n        if (!velocity.prevPositionX) velocity.prevPositionX = image.touchesCurrent.x;\n        if (!velocity.prevPositionY) velocity.prevPositionY = image.touchesCurrent.y;\n        if (!velocity.prevTime) velocity.prevTime = Date.now();\n        velocity.x = (image.touchesCurrent.x - velocity.prevPositionX) / (Date.now() - velocity.prevTime) / 2;\n        velocity.y = (image.touchesCurrent.y - velocity.prevPositionY) / (Date.now() - velocity.prevTime) / 2;\n        if (Math.abs(image.touchesCurrent.x - velocity.prevPositionX) < 2) velocity.x = 0;\n        if (Math.abs(image.touchesCurrent.y - velocity.prevPositionY) < 2) velocity.y = 0;\n        velocity.prevPositionX = image.touchesCurrent.x;\n        velocity.prevPositionY = image.touchesCurrent.y;\n        velocity.prevTime = Date.now();\n        gesture.imageWrapEl.style.transform = `translate3d(${image.currentX}px, ${image.currentY}px,0)`;\n    }\n    function onTouchEnd() {\n        const zoom = swiper.zoom;\n        evCache.length = 0;\n        if (!gesture.imageEl) return;\n        if (!image.isTouched || !image.isMoved) {\n            image.isTouched = false;\n            image.isMoved = false;\n            return;\n        }\n        image.isTouched = false;\n        image.isMoved = false;\n        let momentumDurationX = 300;\n        let momentumDurationY = 300;\n        const momentumDistanceX = velocity.x * momentumDurationX;\n        const newPositionX = image.currentX + momentumDistanceX;\n        const momentumDistanceY = velocity.y * momentumDurationY;\n        const newPositionY = image.currentY + momentumDistanceY;\n        // Fix duration\n        if (velocity.x !== 0) momentumDurationX = Math.abs((newPositionX - image.currentX) / velocity.x);\n        if (velocity.y !== 0) momentumDurationY = Math.abs((newPositionY - image.currentY) / velocity.y);\n        const momentumDuration = Math.max(momentumDurationX, momentumDurationY);\n        image.currentX = newPositionX;\n        image.currentY = newPositionY;\n        // Define if we need image drag\n        const scaledWidth = image.width * zoom.scale;\n        const scaledHeight = image.height * zoom.scale;\n        image.minX = Math.min(gesture.slideWidth / 2 - scaledWidth / 2, 0);\n        image.maxX = -image.minX;\n        image.minY = Math.min(gesture.slideHeight / 2 - scaledHeight / 2, 0);\n        image.maxY = -image.minY;\n        image.currentX = Math.max(Math.min(image.currentX, image.maxX), image.minX);\n        image.currentY = Math.max(Math.min(image.currentY, image.maxY), image.minY);\n        gesture.imageWrapEl.style.transitionDuration = `${momentumDuration}ms`;\n        gesture.imageWrapEl.style.transform = `translate3d(${image.currentX}px, ${image.currentY}px,0)`;\n    }\n    function onTransitionEnd() {\n        const zoom = swiper.zoom;\n        if (gesture.slideEl && swiper.activeIndex !== swiper.slides.indexOf(gesture.slideEl)) {\n            if (gesture.imageEl) {\n                gesture.imageEl.style.transform = \"translate3d(0,0,0) scale(1)\";\n            }\n            if (gesture.imageWrapEl) {\n                gesture.imageWrapEl.style.transform = \"translate3d(0,0,0)\";\n            }\n            gesture.slideEl.classList.remove(`${swiper.params.zoom.zoomedSlideClass}`);\n            zoom.scale = 1;\n            currentScale = 1;\n            gesture.slideEl = undefined;\n            gesture.imageEl = undefined;\n            gesture.imageWrapEl = undefined;\n            gesture.originX = 0;\n            gesture.originY = 0;\n        }\n    }\n    function onMouseMove(e) {\n        // Only pan if zoomed in and mouse panning is enabled\n        if (currentScale <= 1 || !gesture.imageWrapEl) return;\n        if (!eventWithinSlide(e) || !eventWithinZoomContainer(e)) return;\n        const currentTransform = window.getComputedStyle(gesture.imageWrapEl).transform;\n        const matrix = new window.DOMMatrix(currentTransform);\n        if (!isPanningWithMouse) {\n            isPanningWithMouse = true;\n            mousePanStart.x = e.clientX;\n            mousePanStart.y = e.clientY;\n            image.startX = matrix.e;\n            image.startY = matrix.f;\n            image.width = gesture.imageEl.offsetWidth || gesture.imageEl.clientWidth;\n            image.height = gesture.imageEl.offsetHeight || gesture.imageEl.clientHeight;\n            gesture.slideWidth = gesture.slideEl.offsetWidth;\n            gesture.slideHeight = gesture.slideEl.offsetHeight;\n            return;\n        }\n        const deltaX = (e.clientX - mousePanStart.x) * mousePanSensitivity;\n        const deltaY = (e.clientY - mousePanStart.y) * mousePanSensitivity;\n        const scaledWidth = image.width * currentScale;\n        const scaledHeight = image.height * currentScale;\n        const slideWidth = gesture.slideWidth;\n        const slideHeight = gesture.slideHeight;\n        const minX = Math.min(slideWidth / 2 - scaledWidth / 2, 0);\n        const maxX = -minX;\n        const minY = Math.min(slideHeight / 2 - scaledHeight / 2, 0);\n        const maxY = -minY;\n        const newX = Math.max(Math.min(image.startX + deltaX, maxX), minX);\n        const newY = Math.max(Math.min(image.startY + deltaY, maxY), minY);\n        gesture.imageWrapEl.style.transitionDuration = \"0ms\";\n        gesture.imageWrapEl.style.transform = `translate3d(${newX}px, ${newY}px, 0)`;\n        mousePanStart.x = e.clientX;\n        mousePanStart.y = e.clientY;\n        image.startX = newX;\n        image.startY = newY;\n        image.currentX = newX;\n        image.currentY = newY;\n    }\n    function zoomIn(e) {\n        const zoom = swiper.zoom;\n        const params = swiper.params.zoom;\n        if (!gesture.slideEl) {\n            if (e && e.target) {\n                gesture.slideEl = e.target.closest(`.${swiper.params.slideClass}, swiper-slide`);\n            }\n            if (!gesture.slideEl) {\n                if (swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual) {\n                    gesture.slideEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(swiper.slidesEl, `.${swiper.params.slideActiveClass}`)[0];\n                } else {\n                    gesture.slideEl = swiper.slides[swiper.activeIndex];\n                }\n            }\n            let imageEl = gesture.slideEl.querySelector(`.${params.containerClass}`);\n            if (imageEl) {\n                imageEl = imageEl.querySelectorAll(\"picture, img, svg, canvas, .swiper-zoom-target\")[0];\n            }\n            gesture.imageEl = imageEl;\n            if (imageEl) {\n                gesture.imageWrapEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.d)(gesture.imageEl, `.${params.containerClass}`)[0];\n            } else {\n                gesture.imageWrapEl = undefined;\n            }\n        }\n        if (!gesture.imageEl || !gesture.imageWrapEl) return;\n        if (swiper.params.cssMode) {\n            swiper.wrapperEl.style.overflow = \"hidden\";\n            swiper.wrapperEl.style.touchAction = \"none\";\n        }\n        gesture.slideEl.classList.add(`${params.zoomedSlideClass}`);\n        let touchX;\n        let touchY;\n        let offsetX;\n        let offsetY;\n        let diffX;\n        let diffY;\n        let translateX;\n        let translateY;\n        let imageWidth;\n        let imageHeight;\n        let scaledWidth;\n        let scaledHeight;\n        let translateMinX;\n        let translateMinY;\n        let translateMaxX;\n        let translateMaxY;\n        let slideWidth;\n        let slideHeight;\n        if (typeof image.touchesStart.x === \"undefined\" && e) {\n            touchX = e.pageX;\n            touchY = e.pageY;\n        } else {\n            touchX = image.touchesStart.x;\n            touchY = image.touchesStart.y;\n        }\n        const prevScale = currentScale;\n        const forceZoomRatio = typeof e === \"number\" ? e : null;\n        if (currentScale === 1 && forceZoomRatio) {\n            touchX = undefined;\n            touchY = undefined;\n            image.touchesStart.x = undefined;\n            image.touchesStart.y = undefined;\n        }\n        const maxRatio = getMaxRatio();\n        zoom.scale = forceZoomRatio || maxRatio;\n        currentScale = forceZoomRatio || maxRatio;\n        if (e && !(currentScale === 1 && forceZoomRatio)) {\n            slideWidth = gesture.slideEl.offsetWidth;\n            slideHeight = gesture.slideEl.offsetHeight;\n            offsetX = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.f)(gesture.slideEl).left + window.scrollX;\n            offsetY = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.f)(gesture.slideEl).top + window.scrollY;\n            diffX = offsetX + slideWidth / 2 - touchX;\n            diffY = offsetY + slideHeight / 2 - touchY;\n            imageWidth = gesture.imageEl.offsetWidth || gesture.imageEl.clientWidth;\n            imageHeight = gesture.imageEl.offsetHeight || gesture.imageEl.clientHeight;\n            scaledWidth = imageWidth * zoom.scale;\n            scaledHeight = imageHeight * zoom.scale;\n            translateMinX = Math.min(slideWidth / 2 - scaledWidth / 2, 0);\n            translateMinY = Math.min(slideHeight / 2 - scaledHeight / 2, 0);\n            translateMaxX = -translateMinX;\n            translateMaxY = -translateMinY;\n            if (prevScale > 0 && forceZoomRatio && typeof image.currentX === \"number\" && typeof image.currentY === \"number\") {\n                translateX = image.currentX * zoom.scale / prevScale;\n                translateY = image.currentY * zoom.scale / prevScale;\n            } else {\n                translateX = diffX * zoom.scale;\n                translateY = diffY * zoom.scale;\n            }\n            if (translateX < translateMinX) {\n                translateX = translateMinX;\n            }\n            if (translateX > translateMaxX) {\n                translateX = translateMaxX;\n            }\n            if (translateY < translateMinY) {\n                translateY = translateMinY;\n            }\n            if (translateY > translateMaxY) {\n                translateY = translateMaxY;\n            }\n        } else {\n            translateX = 0;\n            translateY = 0;\n        }\n        if (forceZoomRatio && zoom.scale === 1) {\n            gesture.originX = 0;\n            gesture.originY = 0;\n        }\n        image.currentX = translateX;\n        image.currentY = translateY;\n        gesture.imageWrapEl.style.transitionDuration = \"300ms\";\n        gesture.imageWrapEl.style.transform = `translate3d(${translateX}px, ${translateY}px,0)`;\n        gesture.imageEl.style.transitionDuration = \"300ms\";\n        gesture.imageEl.style.transform = `translate3d(0,0,0) scale(${zoom.scale})`;\n    }\n    function zoomOut() {\n        const zoom = swiper.zoom;\n        const params = swiper.params.zoom;\n        if (!gesture.slideEl) {\n            if (swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual) {\n                gesture.slideEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(swiper.slidesEl, `.${swiper.params.slideActiveClass}`)[0];\n            } else {\n                gesture.slideEl = swiper.slides[swiper.activeIndex];\n            }\n            let imageEl = gesture.slideEl.querySelector(`.${params.containerClass}`);\n            if (imageEl) {\n                imageEl = imageEl.querySelectorAll(\"picture, img, svg, canvas, .swiper-zoom-target\")[0];\n            }\n            gesture.imageEl = imageEl;\n            if (imageEl) {\n                gesture.imageWrapEl = (0,_shared_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.d)(gesture.imageEl, `.${params.containerClass}`)[0];\n            } else {\n                gesture.imageWrapEl = undefined;\n            }\n        }\n        if (!gesture.imageEl || !gesture.imageWrapEl) return;\n        if (swiper.params.cssMode) {\n            swiper.wrapperEl.style.overflow = \"\";\n            swiper.wrapperEl.style.touchAction = \"\";\n        }\n        zoom.scale = 1;\n        currentScale = 1;\n        image.currentX = undefined;\n        image.currentY = undefined;\n        image.touchesStart.x = undefined;\n        image.touchesStart.y = undefined;\n        gesture.imageWrapEl.style.transitionDuration = \"300ms\";\n        gesture.imageWrapEl.style.transform = \"translate3d(0,0,0)\";\n        gesture.imageEl.style.transitionDuration = \"300ms\";\n        gesture.imageEl.style.transform = \"translate3d(0,0,0) scale(1)\";\n        gesture.slideEl.classList.remove(`${params.zoomedSlideClass}`);\n        gesture.slideEl = undefined;\n        gesture.originX = 0;\n        gesture.originY = 0;\n        if (swiper.params.zoom.panOnMouseMove) {\n            mousePanStart = {\n                x: 0,\n                y: 0\n            };\n            if (isPanningWithMouse) {\n                isPanningWithMouse = false;\n                image.startX = 0;\n                image.startY = 0;\n            }\n        }\n    }\n    // Toggle Zoom\n    function zoomToggle(e) {\n        const zoom = swiper.zoom;\n        if (zoom.scale && zoom.scale !== 1) {\n            // Zoom Out\n            zoomOut();\n        } else {\n            // Zoom In\n            zoomIn(e);\n        }\n    }\n    function getListeners() {\n        const passiveListener = swiper.params.passiveListeners ? {\n            passive: true,\n            capture: false\n        } : false;\n        const activeListenerWithCapture = swiper.params.passiveListeners ? {\n            passive: false,\n            capture: true\n        } : true;\n        return {\n            passiveListener,\n            activeListenerWithCapture\n        };\n    }\n    // Attach/Detach Events\n    function enable() {\n        const zoom = swiper.zoom;\n        if (zoom.enabled) return;\n        zoom.enabled = true;\n        const { passiveListener, activeListenerWithCapture } = getListeners();\n        // Scale image\n        swiper.wrapperEl.addEventListener(\"pointerdown\", onGestureStart, passiveListener);\n        swiper.wrapperEl.addEventListener(\"pointermove\", onGestureChange, activeListenerWithCapture);\n        [\n            \"pointerup\",\n            \"pointercancel\",\n            \"pointerout\"\n        ].forEach((eventName)=>{\n            swiper.wrapperEl.addEventListener(eventName, onGestureEnd, passiveListener);\n        });\n        // Move image\n        swiper.wrapperEl.addEventListener(\"pointermove\", onTouchMove, activeListenerWithCapture);\n    }\n    function disable() {\n        const zoom = swiper.zoom;\n        if (!zoom.enabled) return;\n        zoom.enabled = false;\n        const { passiveListener, activeListenerWithCapture } = getListeners();\n        // Scale image\n        swiper.wrapperEl.removeEventListener(\"pointerdown\", onGestureStart, passiveListener);\n        swiper.wrapperEl.removeEventListener(\"pointermove\", onGestureChange, activeListenerWithCapture);\n        [\n            \"pointerup\",\n            \"pointercancel\",\n            \"pointerout\"\n        ].forEach((eventName)=>{\n            swiper.wrapperEl.removeEventListener(eventName, onGestureEnd, passiveListener);\n        });\n        // Move image\n        swiper.wrapperEl.removeEventListener(\"pointermove\", onTouchMove, activeListenerWithCapture);\n    }\n    on(\"init\", ()=>{\n        if (swiper.params.zoom.enabled) {\n            enable();\n        }\n    });\n    on(\"destroy\", ()=>{\n        disable();\n    });\n    on(\"touchStart\", (_s, e)=>{\n        if (!swiper.zoom.enabled) return;\n        onTouchStart(e);\n    });\n    on(\"touchEnd\", (_s, e)=>{\n        if (!swiper.zoom.enabled) return;\n        onTouchEnd();\n    });\n    on(\"doubleTap\", (_s, e)=>{\n        if (!swiper.animating && swiper.params.zoom.enabled && swiper.zoom.enabled && swiper.params.zoom.toggle) {\n            zoomToggle(e);\n        }\n    });\n    on(\"transitionEnd\", ()=>{\n        if (swiper.zoom.enabled && swiper.params.zoom.enabled) {\n            onTransitionEnd();\n        }\n    });\n    on(\"slideChange\", ()=>{\n        if (swiper.zoom.enabled && swiper.params.zoom.enabled && swiper.params.cssMode) {\n            onTransitionEnd();\n        }\n    });\n    Object.assign(swiper.zoom, {\n        enable,\n        disable,\n        in: zoomIn,\n        out: zoomOut,\n        toggle: zoomToggle\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/modules/zoom.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/shared/classes-to-selector.mjs":
/*!************************************************************!*\
  !*** ./node_modules/swiper/shared/classes-to-selector.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ classesToSelector)\n/* harmony export */ });\nfunction classesToSelector(classes = \"\") {\n    return `.${classes.trim().replace(/([\\.:!+\\/()[\\]])/g, \"\\\\$1\") // eslint-disable-line\n    .replace(/ /g, \".\")}`;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9jbGFzc2VzLXRvLXNlbGVjdG9yLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsU0FBU0Esa0JBQWtCQyxVQUFVLEVBQUU7SUFDckMsT0FBTyxDQUFDLENBQUMsRUFBRUEsUUFBUUMsSUFBSSxHQUFHQyxPQUFPLENBQUMscUJBQXFCLFFBQVEsc0JBQXNCO0tBQ3BGQSxPQUFPLENBQUMsTUFBTSxLQUFLLENBQUM7QUFDdkI7QUFFa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFyYnVja3MtdHVya2V5LWNsb25lLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvY2xhc3Nlcy10by1zZWxlY3Rvci5tanM/ZTU5OSJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBjbGFzc2VzVG9TZWxlY3RvcihjbGFzc2VzID0gJycpIHtcbiAgcmV0dXJuIGAuJHtjbGFzc2VzLnRyaW0oKS5yZXBsYWNlKC8oW1xcLjohK1xcLygpW1xcXV0pL2csICdcXFxcJDEnKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIC5yZXBsYWNlKC8gL2csICcuJyl9YDtcbn1cblxuZXhwb3J0IHsgY2xhc3Nlc1RvU2VsZWN0b3IgYXMgYyB9O1xuIl0sIm5hbWVzIjpbImNsYXNzZXNUb1NlbGVjdG9yIiwiY2xhc3NlcyIsInRyaW0iLCJyZXBsYWNlIiwiYyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/shared/classes-to-selector.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/shared/create-element-if-not-defined.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/swiper/shared/create-element-if-not-defined.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ createElementIfNotDefined)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\nfunction createElementIfNotDefined(swiper, originalParams, params, checkProps) {\n    if (swiper.params.createElements) {\n        Object.keys(checkProps).forEach((key)=>{\n            if (!params[key] && params.auto === true) {\n                let element = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.e)(swiper.el, `.${checkProps[key]}`)[0];\n                if (!element) {\n                    element = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(\"div\", checkProps[key]);\n                    element.className = checkProps[key];\n                    swiper.el.append(element);\n                }\n                params[key] = element;\n                originalParams[key] = element;\n            }\n        });\n    }\n    return params;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9jcmVhdGUtZWxlbWVudC1pZi1ub3QtZGVmaW5lZC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBdUU7QUFFdkUsU0FBU0ksMEJBQTBCQyxNQUFNLEVBQUVDLGNBQWMsRUFBRUMsTUFBTSxFQUFFQyxVQUFVO0lBQzNFLElBQUlILE9BQU9FLE1BQU0sQ0FBQ0UsY0FBYyxFQUFFO1FBQ2hDQyxPQUFPQyxJQUFJLENBQUNILFlBQVlJLE9BQU8sQ0FBQ0MsQ0FBQUE7WUFDOUIsSUFBSSxDQUFDTixNQUFNLENBQUNNLElBQUksSUFBSU4sT0FBT08sSUFBSSxLQUFLLE1BQU07Z0JBQ3hDLElBQUlDLFVBQVVkLDZDQUFlQSxDQUFDSSxPQUFPVyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUVSLFVBQVUsQ0FBQ0ssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ2xFLElBQUksQ0FBQ0UsU0FBUztvQkFDWkEsVUFBVVosNkNBQWFBLENBQUMsT0FBT0ssVUFBVSxDQUFDSyxJQUFJO29CQUM5Q0UsUUFBUUUsU0FBUyxHQUFHVCxVQUFVLENBQUNLLElBQUk7b0JBQ25DUixPQUFPVyxFQUFFLENBQUNFLE1BQU0sQ0FBQ0g7Z0JBQ25CO2dCQUNBUixNQUFNLENBQUNNLElBQUksR0FBR0U7Z0JBQ2RULGNBQWMsQ0FBQ08sSUFBSSxHQUFHRTtZQUN4QjtRQUNGO0lBQ0Y7SUFDQSxPQUFPUjtBQUNUO0FBRTBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhcmJ1Y2tzLXR1cmtleS1jbG9uZS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL2NyZWF0ZS1lbGVtZW50LWlmLW5vdC1kZWZpbmVkLm1qcz85MDY1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGUgYXMgZWxlbWVudENoaWxkcmVuLCBjIGFzIGNyZWF0ZUVsZW1lbnQgfSBmcm9tICcuL3V0aWxzLm1qcyc7XG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQoc3dpcGVyLCBvcmlnaW5hbFBhcmFtcywgcGFyYW1zLCBjaGVja1Byb3BzKSB7XG4gIGlmIChzd2lwZXIucGFyYW1zLmNyZWF0ZUVsZW1lbnRzKSB7XG4gICAgT2JqZWN0LmtleXMoY2hlY2tQcm9wcykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgaWYgKCFwYXJhbXNba2V5XSAmJiBwYXJhbXMuYXV0byA9PT0gdHJ1ZSkge1xuICAgICAgICBsZXQgZWxlbWVudCA9IGVsZW1lbnRDaGlsZHJlbihzd2lwZXIuZWwsIGAuJHtjaGVja1Byb3BzW2tleV19YClbMF07XG4gICAgICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICAgIGVsZW1lbnQgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCBjaGVja1Byb3BzW2tleV0pO1xuICAgICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gY2hlY2tQcm9wc1trZXldO1xuICAgICAgICAgIHN3aXBlci5lbC5hcHBlbmQoZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgcGFyYW1zW2tleV0gPSBlbGVtZW50O1xuICAgICAgICBvcmlnaW5hbFBhcmFtc1trZXldID0gZWxlbWVudDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICByZXR1cm4gcGFyYW1zO1xufVxuXG5leHBvcnQgeyBjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkIGFzIGMgfTtcbiJdLCJuYW1lcyI6WyJlIiwiZWxlbWVudENoaWxkcmVuIiwiYyIsImNyZWF0ZUVsZW1lbnQiLCJjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkIiwic3dpcGVyIiwib3JpZ2luYWxQYXJhbXMiLCJwYXJhbXMiLCJjaGVja1Byb3BzIiwiY3JlYXRlRWxlbWVudHMiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsImF1dG8iLCJlbGVtZW50IiwiZWwiLCJjbGFzc05hbWUiLCJhcHBlbmQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/shared/create-element-if-not-defined.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/shared/create-shadow.mjs":
/*!******************************************************!*\
  !*** ./node_modules/swiper/shared/create-shadow.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ createShadow)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\nfunction createShadow(suffix, slideEl, side) {\n    const shadowClass = `swiper-slide-shadow${side ? `-${side}` : \"\"}${suffix ? ` swiper-slide-shadow-${suffix}` : \"\"}`;\n    const shadowContainer = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(slideEl);\n    let shadowEl = shadowContainer.querySelector(`.${shadowClass.split(\" \").join(\".\")}`);\n    if (!shadowEl) {\n        shadowEl = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(\"div\", shadowClass.split(\" \"));\n        shadowContainer.append(shadowEl);\n    }\n    return shadowEl;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9jcmVhdGUtc2hhZG93Lm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUEyRTtBQUUzRSxTQUFTSSxhQUFhQyxNQUFNLEVBQUVDLE9BQU8sRUFBRUMsSUFBSTtJQUN6QyxNQUFNQyxjQUFjLENBQUMsbUJBQW1CLEVBQUVELE9BQU8sQ0FBQyxDQUFDLEVBQUVBLEtBQUssQ0FBQyxHQUFHLEdBQUcsRUFBRUYsU0FBUyxDQUFDLHFCQUFxQixFQUFFQSxPQUFPLENBQUMsR0FBRyxHQUFHLENBQUM7SUFDbkgsTUFBTUksa0JBQWtCUiw2Q0FBbUJBLENBQUNLO0lBQzVDLElBQUlJLFdBQVdELGdCQUFnQkUsYUFBYSxDQUFDLENBQUMsQ0FBQyxFQUFFSCxZQUFZSSxLQUFLLENBQUMsS0FBS0MsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNuRixJQUFJLENBQUNILFVBQVU7UUFDYkEsV0FBV1AsNkNBQWFBLENBQUMsT0FBT0ssWUFBWUksS0FBSyxDQUFDO1FBQ2xESCxnQkFBZ0JLLE1BQU0sQ0FBQ0o7SUFDekI7SUFDQSxPQUFPQTtBQUNUO0FBRTZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhcmJ1Y2tzLXR1cmtleS1jbG9uZS8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL2NyZWF0ZS1zaGFkb3cubWpzPzYxMTIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZyBhcyBnZXRTbGlkZVRyYW5zZm9ybUVsLCBjIGFzIGNyZWF0ZUVsZW1lbnQgfSBmcm9tICcuL3V0aWxzLm1qcyc7XG5cbmZ1bmN0aW9uIGNyZWF0ZVNoYWRvdyhzdWZmaXgsIHNsaWRlRWwsIHNpZGUpIHtcbiAgY29uc3Qgc2hhZG93Q2xhc3MgPSBgc3dpcGVyLXNsaWRlLXNoYWRvdyR7c2lkZSA/IGAtJHtzaWRlfWAgOiAnJ30ke3N1ZmZpeCA/IGAgc3dpcGVyLXNsaWRlLXNoYWRvdy0ke3N1ZmZpeH1gIDogJyd9YDtcbiAgY29uc3Qgc2hhZG93Q29udGFpbmVyID0gZ2V0U2xpZGVUcmFuc2Zvcm1FbChzbGlkZUVsKTtcbiAgbGV0IHNoYWRvd0VsID0gc2hhZG93Q29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoYC4ke3NoYWRvd0NsYXNzLnNwbGl0KCcgJykuam9pbignLicpfWApO1xuICBpZiAoIXNoYWRvd0VsKSB7XG4gICAgc2hhZG93RWwgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCBzaGFkb3dDbGFzcy5zcGxpdCgnICcpKTtcbiAgICBzaGFkb3dDb250YWluZXIuYXBwZW5kKHNoYWRvd0VsKTtcbiAgfVxuICByZXR1cm4gc2hhZG93RWw7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZVNoYWRvdyBhcyBjIH07XG4iXSwibmFtZXMiOlsiZyIsImdldFNsaWRlVHJhbnNmb3JtRWwiLCJjIiwiY3JlYXRlRWxlbWVudCIsImNyZWF0ZVNoYWRvdyIsInN1ZmZpeCIsInNsaWRlRWwiLCJzaWRlIiwic2hhZG93Q2xhc3MiLCJzaGFkb3dDb250YWluZXIiLCJzaGFkb3dFbCIsInF1ZXJ5U2VsZWN0b3IiLCJzcGxpdCIsImpvaW4iLCJhcHBlbmQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/shared/create-shadow.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/shared/effect-init.mjs":
/*!****************************************************!*\
  !*** ./node_modules/swiper/shared/effect-init.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   e: () => (/* binding */ effectInit)\n/* harmony export */ });\nfunction effectInit(params) {\n    const { effect, swiper, on, setTranslate, setTransition, overwriteParams, perspective, recreateShadows, getEffectParams } = params;\n    on(\"beforeInit\", ()=>{\n        if (swiper.params.effect !== effect) return;\n        swiper.classNames.push(`${swiper.params.containerModifierClass}${effect}`);\n        if (perspective && perspective()) {\n            swiper.classNames.push(`${swiper.params.containerModifierClass}3d`);\n        }\n        const overwriteParamsResult = overwriteParams ? overwriteParams() : {};\n        Object.assign(swiper.params, overwriteParamsResult);\n        Object.assign(swiper.originalParams, overwriteParamsResult);\n    });\n    on(\"setTranslate _virtualUpdated\", ()=>{\n        if (swiper.params.effect !== effect) return;\n        setTranslate();\n    });\n    on(\"setTransition\", (_s, duration)=>{\n        if (swiper.params.effect !== effect) return;\n        setTransition(duration);\n    });\n    on(\"transitionEnd\", ()=>{\n        if (swiper.params.effect !== effect) return;\n        if (recreateShadows) {\n            if (!getEffectParams || !getEffectParams().slideShadows) return;\n            // remove shadows\n            swiper.slides.forEach((slideEl)=>{\n                slideEl.querySelectorAll(\".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left\").forEach((shadowEl)=>shadowEl.remove());\n            });\n            // create new one\n            recreateShadows();\n        }\n    });\n    let requireUpdateOnVirtual;\n    on(\"virtualUpdate\", ()=>{\n        if (swiper.params.effect !== effect) return;\n        if (!swiper.slides.length) {\n            requireUpdateOnVirtual = true;\n        }\n        requestAnimationFrame(()=>{\n            if (requireUpdateOnVirtual && swiper.slides && swiper.slides.length) {\n                setTranslate();\n                requireUpdateOnVirtual = false;\n            }\n        });\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9lZmZlY3QtaW5pdC5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLFNBQVNBLFdBQVdDLE1BQU07SUFDeEIsTUFBTSxFQUNKQyxNQUFNLEVBQ05DLE1BQU0sRUFDTkMsRUFBRSxFQUNGQyxZQUFZLEVBQ1pDLGFBQWEsRUFDYkMsZUFBZSxFQUNmQyxXQUFXLEVBQ1hDLGVBQWUsRUFDZkMsZUFBZSxFQUNoQixHQUFHVDtJQUNKRyxHQUFHLGNBQWM7UUFDZixJQUFJRCxPQUFPRixNQUFNLENBQUNDLE1BQU0sS0FBS0EsUUFBUTtRQUNyQ0MsT0FBT1EsVUFBVSxDQUFDQyxJQUFJLENBQUMsQ0FBQyxFQUFFVCxPQUFPRixNQUFNLENBQUNZLHNCQUFzQixDQUFDLEVBQUVYLE9BQU8sQ0FBQztRQUN6RSxJQUFJTSxlQUFlQSxlQUFlO1lBQ2hDTCxPQUFPUSxVQUFVLENBQUNDLElBQUksQ0FBQyxDQUFDLEVBQUVULE9BQU9GLE1BQU0sQ0FBQ1ksc0JBQXNCLENBQUMsRUFBRSxDQUFDO1FBQ3BFO1FBQ0EsTUFBTUMsd0JBQXdCUCxrQkFBa0JBLG9CQUFvQixDQUFDO1FBQ3JFUSxPQUFPQyxNQUFNLENBQUNiLE9BQU9GLE1BQU0sRUFBRWE7UUFDN0JDLE9BQU9DLE1BQU0sQ0FBQ2IsT0FBT2MsY0FBYyxFQUFFSDtJQUN2QztJQUNBVixHQUFHLGdDQUFnQztRQUNqQyxJQUFJRCxPQUFPRixNQUFNLENBQUNDLE1BQU0sS0FBS0EsUUFBUTtRQUNyQ0c7SUFDRjtJQUNBRCxHQUFHLGlCQUFpQixDQUFDYyxJQUFJQztRQUN2QixJQUFJaEIsT0FBT0YsTUFBTSxDQUFDQyxNQUFNLEtBQUtBLFFBQVE7UUFDckNJLGNBQWNhO0lBQ2hCO0lBQ0FmLEdBQUcsaUJBQWlCO1FBQ2xCLElBQUlELE9BQU9GLE1BQU0sQ0FBQ0MsTUFBTSxLQUFLQSxRQUFRO1FBQ3JDLElBQUlPLGlCQUFpQjtZQUNuQixJQUFJLENBQUNDLG1CQUFtQixDQUFDQSxrQkFBa0JVLFlBQVksRUFBRTtZQUN6RCxpQkFBaUI7WUFDakJqQixPQUFPa0IsTUFBTSxDQUFDQyxPQUFPLENBQUNDLENBQUFBO2dCQUNwQkEsUUFBUUMsZ0JBQWdCLENBQUMsZ0hBQWdIRixPQUFPLENBQUNHLENBQUFBLFdBQVlBLFNBQVNDLE1BQU07WUFDOUs7WUFDQSxpQkFBaUI7WUFDakJqQjtRQUNGO0lBQ0Y7SUFDQSxJQUFJa0I7SUFDSnZCLEdBQUcsaUJBQWlCO1FBQ2xCLElBQUlELE9BQU9GLE1BQU0sQ0FBQ0MsTUFBTSxLQUFLQSxRQUFRO1FBQ3JDLElBQUksQ0FBQ0MsT0FBT2tCLE1BQU0sQ0FBQ08sTUFBTSxFQUFFO1lBQ3pCRCx5QkFBeUI7UUFDM0I7UUFDQUUsc0JBQXNCO1lBQ3BCLElBQUlGLDBCQUEwQnhCLE9BQU9rQixNQUFNLElBQUlsQixPQUFPa0IsTUFBTSxDQUFDTyxNQUFNLEVBQUU7Z0JBQ25FdkI7Z0JBQ0FzQix5QkFBeUI7WUFDM0I7UUFDRjtJQUNGO0FBQ0Y7QUFFMkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFyYnVja3MtdHVya2V5LWNsb25lLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvZWZmZWN0LWluaXQubWpzP2Y5MzYiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gZWZmZWN0SW5pdChwYXJhbXMpIHtcbiAgY29uc3Qge1xuICAgIGVmZmVjdCxcbiAgICBzd2lwZXIsXG4gICAgb24sXG4gICAgc2V0VHJhbnNsYXRlLFxuICAgIHNldFRyYW5zaXRpb24sXG4gICAgb3ZlcndyaXRlUGFyYW1zLFxuICAgIHBlcnNwZWN0aXZlLFxuICAgIHJlY3JlYXRlU2hhZG93cyxcbiAgICBnZXRFZmZlY3RQYXJhbXNcbiAgfSA9IHBhcmFtcztcbiAgb24oJ2JlZm9yZUluaXQnLCAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSBlZmZlY3QpIHJldHVybjtcbiAgICBzd2lwZXIuY2xhc3NOYW1lcy5wdXNoKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc30ke2VmZmVjdH1gKTtcbiAgICBpZiAocGVyc3BlY3RpdmUgJiYgcGVyc3BlY3RpdmUoKSkge1xuICAgICAgc3dpcGVyLmNsYXNzTmFtZXMucHVzaChgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9M2RgKTtcbiAgICB9XG4gICAgY29uc3Qgb3ZlcndyaXRlUGFyYW1zUmVzdWx0ID0gb3ZlcndyaXRlUGFyYW1zID8gb3ZlcndyaXRlUGFyYW1zKCkgOiB7fTtcbiAgICBPYmplY3QuYXNzaWduKHN3aXBlci5wYXJhbXMsIG92ZXJ3cml0ZVBhcmFtc1Jlc3VsdCk7XG4gICAgT2JqZWN0LmFzc2lnbihzd2lwZXIub3JpZ2luYWxQYXJhbXMsIG92ZXJ3cml0ZVBhcmFtc1Jlc3VsdCk7XG4gIH0pO1xuICBvbignc2V0VHJhbnNsYXRlIF92aXJ0dWFsVXBkYXRlZCcsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09IGVmZmVjdCkgcmV0dXJuO1xuICAgIHNldFRyYW5zbGF0ZSgpO1xuICB9KTtcbiAgb24oJ3NldFRyYW5zaXRpb24nLCAoX3MsIGR1cmF0aW9uKSA9PiB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSBlZmZlY3QpIHJldHVybjtcbiAgICBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgfSk7XG4gIG9uKCd0cmFuc2l0aW9uRW5kJywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gZWZmZWN0KSByZXR1cm47XG4gICAgaWYgKHJlY3JlYXRlU2hhZG93cykge1xuICAgICAgaWYgKCFnZXRFZmZlY3RQYXJhbXMgfHwgIWdldEVmZmVjdFBhcmFtcygpLnNsaWRlU2hhZG93cykgcmV0dXJuO1xuICAgICAgLy8gcmVtb3ZlIHNoYWRvd3NcbiAgICAgIHN3aXBlci5zbGlkZXMuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICAgICAgc2xpZGVFbC5xdWVyeVNlbGVjdG9yQWxsKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AsIC5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0LCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20sIC5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKS5mb3JFYWNoKHNoYWRvd0VsID0+IHNoYWRvd0VsLnJlbW92ZSgpKTtcbiAgICAgIH0pO1xuICAgICAgLy8gY3JlYXRlIG5ldyBvbmVcbiAgICAgIHJlY3JlYXRlU2hhZG93cygpO1xuICAgIH1cbiAgfSk7XG4gIGxldCByZXF1aXJlVXBkYXRlT25WaXJ0dWFsO1xuICBvbigndmlydHVhbFVwZGF0ZScsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09IGVmZmVjdCkgcmV0dXJuO1xuICAgIGlmICghc3dpcGVyLnNsaWRlcy5sZW5ndGgpIHtcbiAgICAgIHJlcXVpcmVVcGRhdGVPblZpcnR1YWwgPSB0cnVlO1xuICAgIH1cbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgaWYgKHJlcXVpcmVVcGRhdGVPblZpcnR1YWwgJiYgc3dpcGVyLnNsaWRlcyAmJiBzd2lwZXIuc2xpZGVzLmxlbmd0aCkge1xuICAgICAgICBzZXRUcmFuc2xhdGUoKTtcbiAgICAgICAgcmVxdWlyZVVwZGF0ZU9uVmlydHVhbCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cblxuZXhwb3J0IHsgZWZmZWN0SW5pdCBhcyBlIH07XG4iXSwibmFtZXMiOlsiZWZmZWN0SW5pdCIsInBhcmFtcyIsImVmZmVjdCIsInN3aXBlciIsIm9uIiwic2V0VHJhbnNsYXRlIiwic2V0VHJhbnNpdGlvbiIsIm92ZXJ3cml0ZVBhcmFtcyIsInBlcnNwZWN0aXZlIiwicmVjcmVhdGVTaGFkb3dzIiwiZ2V0RWZmZWN0UGFyYW1zIiwiY2xhc3NOYW1lcyIsInB1c2giLCJjb250YWluZXJNb2RpZmllckNsYXNzIiwib3ZlcndyaXRlUGFyYW1zUmVzdWx0IiwiT2JqZWN0IiwiYXNzaWduIiwib3JpZ2luYWxQYXJhbXMiLCJfcyIsImR1cmF0aW9uIiwic2xpZGVTaGFkb3dzIiwic2xpZGVzIiwiZm9yRWFjaCIsInNsaWRlRWwiLCJxdWVyeVNlbGVjdG9yQWxsIiwic2hhZG93RWwiLCJyZW1vdmUiLCJyZXF1aXJlVXBkYXRlT25WaXJ0dWFsIiwibGVuZ3RoIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/shared/effect-init.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/shared/effect-target.mjs":
/*!******************************************************!*\
  !*** ./node_modules/swiper/shared/effect-target.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   e: () => (/* binding */ effectTarget)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\nfunction effectTarget(effectParams, slideEl) {\n    const transformEl = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(slideEl);\n    if (transformEl !== slideEl) {\n        transformEl.style.backfaceVisibility = \"hidden\";\n        transformEl.style[\"-webkit-backface-visibility\"] = \"hidden\";\n    }\n    return transformEl;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9lZmZlY3QtdGFyZ2V0Lm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF1RDtBQUV2RCxTQUFTRSxhQUFhQyxZQUFZLEVBQUVDLE9BQU87SUFDekMsTUFBTUMsY0FBY0osNkNBQW1CQSxDQUFDRztJQUN4QyxJQUFJQyxnQkFBZ0JELFNBQVM7UUFDM0JDLFlBQVlDLEtBQUssQ0FBQ0Msa0JBQWtCLEdBQUc7UUFDdkNGLFlBQVlDLEtBQUssQ0FBQyw4QkFBOEIsR0FBRztJQUNyRDtJQUNBLE9BQU9EO0FBQ1Q7QUFFNkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFyYnVja3MtdHVya2V5LWNsb25lLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvZWZmZWN0LXRhcmdldC5tanM/YmZmOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnIGFzIGdldFNsaWRlVHJhbnNmb3JtRWwgfSBmcm9tICcuL3V0aWxzLm1qcyc7XG5cbmZ1bmN0aW9uIGVmZmVjdFRhcmdldChlZmZlY3RQYXJhbXMsIHNsaWRlRWwpIHtcbiAgY29uc3QgdHJhbnNmb3JtRWwgPSBnZXRTbGlkZVRyYW5zZm9ybUVsKHNsaWRlRWwpO1xuICBpZiAodHJhbnNmb3JtRWwgIT09IHNsaWRlRWwpIHtcbiAgICB0cmFuc2Zvcm1FbC5zdHlsZS5iYWNrZmFjZVZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICB0cmFuc2Zvcm1FbC5zdHlsZVsnLXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5J10gPSAnaGlkZGVuJztcbiAgfVxuICByZXR1cm4gdHJhbnNmb3JtRWw7XG59XG5cbmV4cG9ydCB7IGVmZmVjdFRhcmdldCBhcyBlIH07XG4iXSwibmFtZXMiOlsiZyIsImdldFNsaWRlVHJhbnNmb3JtRWwiLCJlZmZlY3RUYXJnZXQiLCJlZmZlY3RQYXJhbXMiLCJzbGlkZUVsIiwidHJhbnNmb3JtRWwiLCJzdHlsZSIsImJhY2tmYWNlVmlzaWJpbGl0eSIsImUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/shared/effect-target.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/shared/effect-virtual-transition-end.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/swiper/shared/effect-virtual-transition-end.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   e: () => (/* binding */ effectVirtualTransitionEnd)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\nfunction effectVirtualTransitionEnd({ swiper, duration, transformElements, allSlides }) {\n    const { activeIndex } = swiper;\n    const getSlide = (el)=>{\n        if (!el.parentElement) {\n            // assume shadow root\n            const slide = swiper.slides.find((slideEl)=>slideEl.shadowRoot && slideEl.shadowRoot === el.parentNode);\n            return slide;\n        }\n        return el.parentElement;\n    };\n    if (swiper.params.virtualTranslate && duration !== 0) {\n        let eventTriggered = false;\n        let transitionEndTarget;\n        if (allSlides) {\n            transitionEndTarget = transformElements;\n        } else {\n            transitionEndTarget = transformElements.filter((transformEl)=>{\n                const el = transformEl.classList.contains(\"swiper-slide-transform\") ? getSlide(transformEl) : transformEl;\n                return swiper.getSlideIndex(el) === activeIndex;\n            });\n        }\n        transitionEndTarget.forEach((el)=>{\n            (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(el, ()=>{\n                if (eventTriggered) return;\n                if (!swiper || swiper.destroyed) return;\n                eventTriggered = true;\n                swiper.animating = false;\n                const evt = new window.CustomEvent(\"transitionend\", {\n                    bubbles: true,\n                    cancelable: true\n                });\n                swiper.wrapperEl.dispatchEvent(evt);\n            });\n        });\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9lZmZlY3QtdmlydHVhbC10cmFuc2l0aW9uLWVuZC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBd0Q7QUFFeEQsU0FBU0UsMkJBQTJCLEVBQ2xDQyxNQUFNLEVBQ05DLFFBQVEsRUFDUkMsaUJBQWlCLEVBQ2pCQyxTQUFTLEVBQ1Y7SUFDQyxNQUFNLEVBQ0pDLFdBQVcsRUFDWixHQUFHSjtJQUNKLE1BQU1LLFdBQVdDLENBQUFBO1FBQ2YsSUFBSSxDQUFDQSxHQUFHQyxhQUFhLEVBQUU7WUFDckIscUJBQXFCO1lBQ3JCLE1BQU1DLFFBQVFSLE9BQU9TLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDQyxDQUFBQSxVQUFXQSxRQUFRQyxVQUFVLElBQUlELFFBQVFDLFVBQVUsS0FBS04sR0FBR08sVUFBVTtZQUN0RyxPQUFPTDtRQUNUO1FBQ0EsT0FBT0YsR0FBR0MsYUFBYTtJQUN6QjtJQUNBLElBQUlQLE9BQU9jLE1BQU0sQ0FBQ0MsZ0JBQWdCLElBQUlkLGFBQWEsR0FBRztRQUNwRCxJQUFJZSxpQkFBaUI7UUFDckIsSUFBSUM7UUFDSixJQUFJZCxXQUFXO1lBQ2JjLHNCQUFzQmY7UUFDeEIsT0FBTztZQUNMZSxzQkFBc0JmLGtCQUFrQmdCLE1BQU0sQ0FBQ0MsQ0FBQUE7Z0JBQzdDLE1BQU1iLEtBQUthLFlBQVlDLFNBQVMsQ0FBQ0MsUUFBUSxDQUFDLDRCQUE0QmhCLFNBQVNjLGVBQWVBO2dCQUM5RixPQUFPbkIsT0FBT3NCLGFBQWEsQ0FBQ2hCLFFBQVFGO1lBQ3RDO1FBQ0Y7UUFDQWEsb0JBQW9CTSxPQUFPLENBQUNqQixDQUFBQTtZQUMxQlIsNkNBQW9CQSxDQUFDUSxJQUFJO2dCQUN2QixJQUFJVSxnQkFBZ0I7Z0JBQ3BCLElBQUksQ0FBQ2hCLFVBQVVBLE9BQU93QixTQUFTLEVBQUU7Z0JBQ2pDUixpQkFBaUI7Z0JBQ2pCaEIsT0FBT3lCLFNBQVMsR0FBRztnQkFDbkIsTUFBTUMsTUFBTSxJQUFJQyxPQUFPQyxXQUFXLENBQUMsaUJBQWlCO29CQUNsREMsU0FBUztvQkFDVEMsWUFBWTtnQkFDZDtnQkFDQTlCLE9BQU8rQixTQUFTLENBQUNDLGFBQWEsQ0FBQ047WUFDakM7UUFDRjtJQUNGO0FBQ0Y7QUFFMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFyYnVja3MtdHVya2V5LWNsb25lLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvZWZmZWN0LXZpcnR1YWwtdHJhbnNpdGlvbi1lbmQubWpzPzM1ZDUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbyBhcyBlbGVtZW50VHJhbnNpdGlvbkVuZCB9IGZyb20gJy4vdXRpbHMubWpzJztcblxuZnVuY3Rpb24gZWZmZWN0VmlydHVhbFRyYW5zaXRpb25FbmQoe1xuICBzd2lwZXIsXG4gIGR1cmF0aW9uLFxuICB0cmFuc2Zvcm1FbGVtZW50cyxcbiAgYWxsU2xpZGVzXG59KSB7XG4gIGNvbnN0IHtcbiAgICBhY3RpdmVJbmRleFxuICB9ID0gc3dpcGVyO1xuICBjb25zdCBnZXRTbGlkZSA9IGVsID0+IHtcbiAgICBpZiAoIWVsLnBhcmVudEVsZW1lbnQpIHtcbiAgICAgIC8vIGFzc3VtZSBzaGFkb3cgcm9vdFxuICAgICAgY29uc3Qgc2xpZGUgPSBzd2lwZXIuc2xpZGVzLmZpbmQoc2xpZGVFbCA9PiBzbGlkZUVsLnNoYWRvd1Jvb3QgJiYgc2xpZGVFbC5zaGFkb3dSb290ID09PSBlbC5wYXJlbnROb2RlKTtcbiAgICAgIHJldHVybiBzbGlkZTtcbiAgICB9XG4gICAgcmV0dXJuIGVsLnBhcmVudEVsZW1lbnQ7XG4gIH07XG4gIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUgJiYgZHVyYXRpb24gIT09IDApIHtcbiAgICBsZXQgZXZlbnRUcmlnZ2VyZWQgPSBmYWxzZTtcbiAgICBsZXQgdHJhbnNpdGlvbkVuZFRhcmdldDtcbiAgICBpZiAoYWxsU2xpZGVzKSB7XG4gICAgICB0cmFuc2l0aW9uRW5kVGFyZ2V0ID0gdHJhbnNmb3JtRWxlbWVudHM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyYW5zaXRpb25FbmRUYXJnZXQgPSB0cmFuc2Zvcm1FbGVtZW50cy5maWx0ZXIodHJhbnNmb3JtRWwgPT4ge1xuICAgICAgICBjb25zdCBlbCA9IHRyYW5zZm9ybUVsLmNsYXNzTGlzdC5jb250YWlucygnc3dpcGVyLXNsaWRlLXRyYW5zZm9ybScpID8gZ2V0U2xpZGUodHJhbnNmb3JtRWwpIDogdHJhbnNmb3JtRWw7XG4gICAgICAgIHJldHVybiBzd2lwZXIuZ2V0U2xpZGVJbmRleChlbCkgPT09IGFjdGl2ZUluZGV4O1xuICAgICAgfSk7XG4gICAgfVxuICAgIHRyYW5zaXRpb25FbmRUYXJnZXQuZm9yRWFjaChlbCA9PiB7XG4gICAgICBlbGVtZW50VHJhbnNpdGlvbkVuZChlbCwgKCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnRUcmlnZ2VyZWQpIHJldHVybjtcbiAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICBldmVudFRyaWdnZXJlZCA9IHRydWU7XG4gICAgICAgIHN3aXBlci5hbmltYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgY29uc3QgZXZ0ID0gbmV3IHdpbmRvdy5DdXN0b21FdmVudCgndHJhbnNpdGlvbmVuZCcsIHtcbiAgICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIHN3aXBlci53cmFwcGVyRWwuZGlzcGF0Y2hFdmVudChldnQpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IHsgZWZmZWN0VmlydHVhbFRyYW5zaXRpb25FbmQgYXMgZSB9O1xuIl0sIm5hbWVzIjpbIm8iLCJlbGVtZW50VHJhbnNpdGlvbkVuZCIsImVmZmVjdFZpcnR1YWxUcmFuc2l0aW9uRW5kIiwic3dpcGVyIiwiZHVyYXRpb24iLCJ0cmFuc2Zvcm1FbGVtZW50cyIsImFsbFNsaWRlcyIsImFjdGl2ZUluZGV4IiwiZ2V0U2xpZGUiLCJlbCIsInBhcmVudEVsZW1lbnQiLCJzbGlkZSIsInNsaWRlcyIsImZpbmQiLCJzbGlkZUVsIiwic2hhZG93Um9vdCIsInBhcmVudE5vZGUiLCJwYXJhbXMiLCJ2aXJ0dWFsVHJhbnNsYXRlIiwiZXZlbnRUcmlnZ2VyZWQiLCJ0cmFuc2l0aW9uRW5kVGFyZ2V0IiwiZmlsdGVyIiwidHJhbnNmb3JtRWwiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsImdldFNsaWRlSW5kZXgiLCJmb3JFYWNoIiwiZGVzdHJveWVkIiwiYW5pbWF0aW5nIiwiZXZ0Iiwid2luZG93IiwiQ3VzdG9tRXZlbnQiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsIndyYXBwZXJFbCIsImRpc3BhdGNoRXZlbnQiLCJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/shared/effect-virtual-transition-end.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/shared/ssr-window.esm.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/swiper/shared/ssr-window.esm.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ getWindow),\n/* harmony export */   g: () => (/* binding */ getDocument)\n/* harmony export */ });\n/**\n * SSR Window 5.0.1\n * Better handling for window object in SSR environment\n * https://github.com/nolimits4web/ssr-window\n *\n * Copyright 2025, Vladimir Kharlampidi\n *\n * Licensed under MIT\n *\n * Released on: June 27, 2025\n */ /* eslint-disable no-param-reassign */ function isObject(obj) {\n    return obj !== null && typeof obj === \"object\" && \"constructor\" in obj && obj.constructor === Object;\n}\nfunction extend(target = {}, src = {}) {\n    const noExtend = [\n        \"__proto__\",\n        \"constructor\",\n        \"prototype\"\n    ];\n    Object.keys(src).filter((key)=>noExtend.indexOf(key) < 0).forEach((key)=>{\n        if (typeof target[key] === \"undefined\") target[key] = src[key];\n        else if (isObject(src[key]) && isObject(target[key]) && Object.keys(src[key]).length > 0) {\n            extend(target[key], src[key]);\n        }\n    });\n}\nconst ssrDocument = {\n    body: {},\n    addEventListener () {},\n    removeEventListener () {},\n    activeElement: {\n        blur () {},\n        nodeName: \"\"\n    },\n    querySelector () {\n        return null;\n    },\n    querySelectorAll () {\n        return [];\n    },\n    getElementById () {\n        return null;\n    },\n    createEvent () {\n        return {\n            initEvent () {}\n        };\n    },\n    createElement () {\n        return {\n            children: [],\n            childNodes: [],\n            style: {},\n            setAttribute () {},\n            getElementsByTagName () {\n                return [];\n            }\n        };\n    },\n    createElementNS () {\n        return {};\n    },\n    importNode () {\n        return null;\n    },\n    location: {\n        hash: \"\",\n        host: \"\",\n        hostname: \"\",\n        href: \"\",\n        origin: \"\",\n        pathname: \"\",\n        protocol: \"\",\n        search: \"\"\n    }\n};\nfunction getDocument() {\n    const doc = typeof document !== \"undefined\" ? document : {};\n    extend(doc, ssrDocument);\n    return doc;\n}\nconst ssrWindow = {\n    document: ssrDocument,\n    navigator: {\n        userAgent: \"\"\n    },\n    location: {\n        hash: \"\",\n        host: \"\",\n        hostname: \"\",\n        href: \"\",\n        origin: \"\",\n        pathname: \"\",\n        protocol: \"\",\n        search: \"\"\n    },\n    history: {\n        replaceState () {},\n        pushState () {},\n        go () {},\n        back () {}\n    },\n    CustomEvent: function CustomEvent() {\n        return this;\n    },\n    addEventListener () {},\n    removeEventListener () {},\n    getComputedStyle () {\n        return {\n            getPropertyValue () {\n                return \"\";\n            }\n        };\n    },\n    Image () {},\n    Date () {},\n    screen: {},\n    setTimeout () {},\n    clearTimeout () {},\n    matchMedia () {\n        return {};\n    },\n    requestAnimationFrame (callback) {\n        if (typeof setTimeout === \"undefined\") {\n            callback();\n            return null;\n        }\n        return setTimeout(callback, 0);\n    },\n    cancelAnimationFrame (id) {\n        if (typeof setTimeout === \"undefined\") {\n            return;\n        }\n        clearTimeout(id);\n    }\n};\nfunction getWindow() {\n    const win =  false ? 0 : {};\n    extend(win, ssrWindow);\n    return win;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9zc3Itd2luZG93LmVzbS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Ozs7OztDQVVDLEdBQ0Qsb0NBQW9DLEdBQ3BDLFNBQVNBLFNBQVNDLEdBQUc7SUFDbkIsT0FBT0EsUUFBUSxRQUFRLE9BQU9BLFFBQVEsWUFBWSxpQkFBaUJBLE9BQU9BLElBQUlDLFdBQVcsS0FBS0M7QUFDaEc7QUFDQSxTQUFTQyxPQUFPQyxTQUFTLENBQUMsQ0FBQyxFQUFFQyxNQUFNLENBQUMsQ0FBQztJQUNuQyxNQUFNQyxXQUFXO1FBQUM7UUFBYTtRQUFlO0tBQVk7SUFDMURKLE9BQU9LLElBQUksQ0FBQ0YsS0FBS0csTUFBTSxDQUFDQyxDQUFBQSxNQUFPSCxTQUFTSSxPQUFPLENBQUNELE9BQU8sR0FBR0UsT0FBTyxDQUFDRixDQUFBQTtRQUNoRSxJQUFJLE9BQU9MLE1BQU0sQ0FBQ0ssSUFBSSxLQUFLLGFBQWFMLE1BQU0sQ0FBQ0ssSUFBSSxHQUFHSixHQUFHLENBQUNJLElBQUk7YUFBTSxJQUFJVixTQUFTTSxHQUFHLENBQUNJLElBQUksS0FBS1YsU0FBU0ssTUFBTSxDQUFDSyxJQUFJLEtBQUtQLE9BQU9LLElBQUksQ0FBQ0YsR0FBRyxDQUFDSSxJQUFJLEVBQUVHLE1BQU0sR0FBRyxHQUFHO1lBQ3ZKVCxPQUFPQyxNQUFNLENBQUNLLElBQUksRUFBRUosR0FBRyxDQUFDSSxJQUFJO1FBQzlCO0lBQ0Y7QUFDRjtBQUNBLE1BQU1JLGNBQWM7SUFDbEJDLE1BQU0sQ0FBQztJQUNQQyxxQkFBb0I7SUFDcEJDLHdCQUF1QjtJQUN2QkMsZUFBZTtRQUNiQyxTQUFRO1FBQ1JDLFVBQVU7SUFDWjtJQUNBQztRQUNFLE9BQU87SUFDVDtJQUNBQztRQUNFLE9BQU8sRUFBRTtJQUNYO0lBQ0FDO1FBQ0UsT0FBTztJQUNUO0lBQ0FDO1FBQ0UsT0FBTztZQUNMQyxjQUFhO1FBQ2Y7SUFDRjtJQUNBQztRQUNFLE9BQU87WUFDTEMsVUFBVSxFQUFFO1lBQ1pDLFlBQVksRUFBRTtZQUNkQyxPQUFPLENBQUM7WUFDUkMsaUJBQWdCO1lBQ2hCQztnQkFDRSxPQUFPLEVBQUU7WUFDWDtRQUNGO0lBQ0Y7SUFDQUM7UUFDRSxPQUFPLENBQUM7SUFDVjtJQUNBQztRQUNFLE9BQU87SUFDVDtJQUNBQyxVQUFVO1FBQ1JDLE1BQU07UUFDTkMsTUFBTTtRQUNOQyxVQUFVO1FBQ1ZDLE1BQU07UUFDTkMsUUFBUTtRQUNSQyxVQUFVO1FBQ1ZDLFVBQVU7UUFDVkMsUUFBUTtJQUNWO0FBQ0Y7QUFDQSxTQUFTQztJQUNQLE1BQU1DLE1BQU0sT0FBT0MsYUFBYSxjQUFjQSxXQUFXLENBQUM7SUFDMUR6QyxPQUFPd0MsS0FBSzlCO0lBQ1osT0FBTzhCO0FBQ1Q7QUFDQSxNQUFNRSxZQUFZO0lBQ2hCRCxVQUFVL0I7SUFDVmlDLFdBQVc7UUFDVEMsV0FBVztJQUNiO0lBQ0FkLFVBQVU7UUFDUkMsTUFBTTtRQUNOQyxNQUFNO1FBQ05DLFVBQVU7UUFDVkMsTUFBTTtRQUNOQyxRQUFRO1FBQ1JDLFVBQVU7UUFDVkMsVUFBVTtRQUNWQyxRQUFRO0lBQ1Y7SUFDQU8sU0FBUztRQUNQQyxpQkFBZ0I7UUFDaEJDLGNBQWE7UUFDYkMsT0FBTTtRQUNOQyxTQUFRO0lBQ1Y7SUFDQUMsYUFBYSxTQUFTQTtRQUNwQixPQUFPLElBQUk7SUFDYjtJQUNBdEMscUJBQW9CO0lBQ3BCQyx3QkFBdUI7SUFDdkJzQztRQUNFLE9BQU87WUFDTEM7Z0JBQ0UsT0FBTztZQUNUO1FBQ0Y7SUFDRjtJQUNBQyxVQUFTO0lBQ1RDLFNBQVE7SUFDUkMsUUFBUSxDQUFDO0lBQ1RDLGVBQWM7SUFDZEMsaUJBQWdCO0lBQ2hCQztRQUNFLE9BQU8sQ0FBQztJQUNWO0lBQ0FDLHVCQUFzQkMsUUFBUTtRQUM1QixJQUFJLE9BQU9KLGVBQWUsYUFBYTtZQUNyQ0k7WUFDQSxPQUFPO1FBQ1Q7UUFDQSxPQUFPSixXQUFXSSxVQUFVO0lBQzlCO0lBQ0FDLHNCQUFxQkMsRUFBRTtRQUNyQixJQUFJLE9BQU9OLGVBQWUsYUFBYTtZQUNyQztRQUNGO1FBQ0FDLGFBQWFLO0lBQ2Y7QUFDRjtBQUNBLFNBQVNDO0lBQ1AsTUFBTUMsTUFBTSxNQUFrQixHQUFjQyxDQUFNQSxHQUFHLENBQUM7SUFDdERqRSxPQUFPZ0UsS0FBS3RCO0lBQ1osT0FBT3NCO0FBQ1Q7QUFFNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFyYnVja3MtdHVya2V5LWNsb25lLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvc3NyLXdpbmRvdy5lc20ubWpzP2U3ODciXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBTU1IgV2luZG93IDUuMC4xXG4gKiBCZXR0ZXIgaGFuZGxpbmcgZm9yIHdpbmRvdyBvYmplY3QgaW4gU1NSIGVudmlyb25tZW50XG4gKiBodHRwczovL2dpdGh1Yi5jb20vbm9saW1pdHM0d2ViL3Nzci13aW5kb3dcbiAqXG4gKiBDb3B5cmlnaHQgMjAyNSwgVmxhZGltaXIgS2hhcmxhbXBpZGlcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciBNSVRcbiAqXG4gKiBSZWxlYXNlZCBvbjogSnVuZSAyNywgMjAyNVxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wYXJhbS1yZWFzc2lnbiAqL1xuZnVuY3Rpb24gaXNPYmplY3Qob2JqKSB7XG4gIHJldHVybiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgJ2NvbnN0cnVjdG9yJyBpbiBvYmogJiYgb2JqLmNvbnN0cnVjdG9yID09PSBPYmplY3Q7XG59XG5mdW5jdGlvbiBleHRlbmQodGFyZ2V0ID0ge30sIHNyYyA9IHt9KSB7XG4gIGNvbnN0IG5vRXh0ZW5kID0gWydfX3Byb3RvX18nLCAnY29uc3RydWN0b3InLCAncHJvdG90eXBlJ107XG4gIE9iamVjdC5rZXlzKHNyYykuZmlsdGVyKGtleSA9PiBub0V4dGVuZC5pbmRleE9mKGtleSkgPCAwKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgaWYgKHR5cGVvZiB0YXJnZXRba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHRhcmdldFtrZXldID0gc3JjW2tleV07ZWxzZSBpZiAoaXNPYmplY3Qoc3JjW2tleV0pICYmIGlzT2JqZWN0KHRhcmdldFtrZXldKSAmJiBPYmplY3Qua2V5cyhzcmNba2V5XSkubGVuZ3RoID4gMCkge1xuICAgICAgZXh0ZW5kKHRhcmdldFtrZXldLCBzcmNba2V5XSk7XG4gICAgfVxuICB9KTtcbn1cbmNvbnN0IHNzckRvY3VtZW50ID0ge1xuICBib2R5OiB7fSxcbiAgYWRkRXZlbnRMaXN0ZW5lcigpIHt9LFxuICByZW1vdmVFdmVudExpc3RlbmVyKCkge30sXG4gIGFjdGl2ZUVsZW1lbnQ6IHtcbiAgICBibHVyKCkge30sXG4gICAgbm9kZU5hbWU6ICcnXG4gIH0sXG4gIHF1ZXJ5U2VsZWN0b3IoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG4gIHF1ZXJ5U2VsZWN0b3JBbGwoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9LFxuICBnZXRFbGVtZW50QnlJZCgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcbiAgY3JlYXRlRXZlbnQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGluaXRFdmVudCgpIHt9XG4gICAgfTtcbiAgfSxcbiAgY3JlYXRlRWxlbWVudCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY2hpbGRyZW46IFtdLFxuICAgICAgY2hpbGROb2RlczogW10sXG4gICAgICBzdHlsZToge30sXG4gICAgICBzZXRBdHRyaWJ1dGUoKSB7fSxcbiAgICAgIGdldEVsZW1lbnRzQnlUYWdOYW1lKCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgfTtcbiAgfSxcbiAgY3JlYXRlRWxlbWVudE5TKCkge1xuICAgIHJldHVybiB7fTtcbiAgfSxcbiAgaW1wb3J0Tm9kZSgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcbiAgbG9jYXRpb246IHtcbiAgICBoYXNoOiAnJyxcbiAgICBob3N0OiAnJyxcbiAgICBob3N0bmFtZTogJycsXG4gICAgaHJlZjogJycsXG4gICAgb3JpZ2luOiAnJyxcbiAgICBwYXRobmFtZTogJycsXG4gICAgcHJvdG9jb2w6ICcnLFxuICAgIHNlYXJjaDogJydcbiAgfVxufTtcbmZ1bmN0aW9uIGdldERvY3VtZW50KCkge1xuICBjb25zdCBkb2MgPSB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnID8gZG9jdW1lbnQgOiB7fTtcbiAgZXh0ZW5kKGRvYywgc3NyRG9jdW1lbnQpO1xuICByZXR1cm4gZG9jO1xufVxuY29uc3Qgc3NyV2luZG93ID0ge1xuICBkb2N1bWVudDogc3NyRG9jdW1lbnQsXG4gIG5hdmlnYXRvcjoge1xuICAgIHVzZXJBZ2VudDogJydcbiAgfSxcbiAgbG9jYXRpb246IHtcbiAgICBoYXNoOiAnJyxcbiAgICBob3N0OiAnJyxcbiAgICBob3N0bmFtZTogJycsXG4gICAgaHJlZjogJycsXG4gICAgb3JpZ2luOiAnJyxcbiAgICBwYXRobmFtZTogJycsXG4gICAgcHJvdG9jb2w6ICcnLFxuICAgIHNlYXJjaDogJydcbiAgfSxcbiAgaGlzdG9yeToge1xuICAgIHJlcGxhY2VTdGF0ZSgpIHt9LFxuICAgIHB1c2hTdGF0ZSgpIHt9LFxuICAgIGdvKCkge30sXG4gICAgYmFjaygpIHt9XG4gIH0sXG4gIEN1c3RvbUV2ZW50OiBmdW5jdGlvbiBDdXN0b21FdmVudCgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgYWRkRXZlbnRMaXN0ZW5lcigpIHt9LFxuICByZW1vdmVFdmVudExpc3RlbmVyKCkge30sXG4gIGdldENvbXB1dGVkU3R5bGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGdldFByb3BlcnR5VmFsdWUoKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICB9O1xuICB9LFxuICBJbWFnZSgpIHt9LFxuICBEYXRlKCkge30sXG4gIHNjcmVlbjoge30sXG4gIHNldFRpbWVvdXQoKSB7fSxcbiAgY2xlYXJUaW1lb3V0KCkge30sXG4gIG1hdGNoTWVkaWEoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9LFxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2FsbGJhY2spIHtcbiAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBzZXRUaW1lb3V0KGNhbGxiYWNrLCAwKTtcbiAgfSxcbiAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoaWQpIHtcbiAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNsZWFyVGltZW91dChpZCk7XG4gIH1cbn07XG5mdW5jdGlvbiBnZXRXaW5kb3coKSB7XG4gIGNvbnN0IHdpbiA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDoge307XG4gIGV4dGVuZCh3aW4sIHNzcldpbmRvdyk7XG4gIHJldHVybiB3aW47XG59XG5cbmV4cG9ydCB7IGdldFdpbmRvdyBhcyBhLCBnZXREb2N1bWVudCBhcyBnIH07XG4iXSwibmFtZXMiOlsiaXNPYmplY3QiLCJvYmoiLCJjb25zdHJ1Y3RvciIsIk9iamVjdCIsImV4dGVuZCIsInRhcmdldCIsInNyYyIsIm5vRXh0ZW5kIiwia2V5cyIsImZpbHRlciIsImtleSIsImluZGV4T2YiLCJmb3JFYWNoIiwibGVuZ3RoIiwic3NyRG9jdW1lbnQiLCJib2R5IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJhY3RpdmVFbGVtZW50IiwiYmx1ciIsIm5vZGVOYW1lIiwicXVlcnlTZWxlY3RvciIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJnZXRFbGVtZW50QnlJZCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiY3JlYXRlRWxlbWVudCIsImNoaWxkcmVuIiwiY2hpbGROb2RlcyIsInN0eWxlIiwic2V0QXR0cmlidXRlIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJjcmVhdGVFbGVtZW50TlMiLCJpbXBvcnROb2RlIiwibG9jYXRpb24iLCJoYXNoIiwiaG9zdCIsImhvc3RuYW1lIiwiaHJlZiIsIm9yaWdpbiIsInBhdGhuYW1lIiwicHJvdG9jb2wiLCJzZWFyY2giLCJnZXREb2N1bWVudCIsImRvYyIsImRvY3VtZW50Iiwic3NyV2luZG93IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiaGlzdG9yeSIsInJlcGxhY2VTdGF0ZSIsInB1c2hTdGF0ZSIsImdvIiwiYmFjayIsIkN1c3RvbUV2ZW50IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJJbWFnZSIsIkRhdGUiLCJzY3JlZW4iLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwibWF0Y2hNZWRpYSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbGxiYWNrIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJpZCIsImdldFdpbmRvdyIsIndpbiIsIndpbmRvdyIsImEiLCJnIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/shared/ssr-window.esm.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/shared/swiper-core.mjs":
/*!****************************************************!*\
  !*** ./node_modules/swiper/shared/swiper-core.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   S: () => (/* binding */ Swiper),\n/* harmony export */   d: () => (/* binding */ defaults)\n/* harmony export */ });\n/* harmony import */ var _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ssr-window.esm.mjs */ \"(ssr)/./node_modules/swiper/shared/ssr-window.esm.mjs\");\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\n\nlet support;\nfunction calcSupport() {\n    const window1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    const document1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n    return {\n        smoothScroll: document1.documentElement && document1.documentElement.style && \"scrollBehavior\" in document1.documentElement.style,\n        touch: !!(\"ontouchstart\" in window1 || window1.DocumentTouch && document1 instanceof window1.DocumentTouch)\n    };\n}\nfunction getSupport() {\n    if (!support) {\n        support = calcSupport();\n    }\n    return support;\n}\nlet deviceCached;\nfunction calcDevice({ userAgent } = {}) {\n    const support = getSupport();\n    const window1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    const platform = window1.navigator.platform;\n    const ua = userAgent || window1.navigator.userAgent;\n    const device = {\n        ios: false,\n        android: false\n    };\n    const screenWidth = window1.screen.width;\n    const screenHeight = window1.screen.height;\n    const android = ua.match(/(Android);?[\\s\\/]+([\\d.]+)?/); // eslint-disable-line\n    let ipad = ua.match(/(iPad)(?!\\1).*OS\\s([\\d_]+)/);\n    const ipod = ua.match(/(iPod)(.*OS\\s([\\d_]+))?/);\n    const iphone = !ipad && ua.match(/(iPhone\\sOS|iOS)\\s([\\d_]+)/);\n    const windows = platform === \"Win32\";\n    let macos = platform === \"MacIntel\";\n    // iPadOs 13 fix\n    const iPadScreens = [\n        \"1024x1366\",\n        \"1366x1024\",\n        \"834x1194\",\n        \"1194x834\",\n        \"834x1112\",\n        \"1112x834\",\n        \"768x1024\",\n        \"1024x768\",\n        \"820x1180\",\n        \"1180x820\",\n        \"810x1080\",\n        \"1080x810\"\n    ];\n    if (!ipad && macos && support.touch && iPadScreens.indexOf(`${screenWidth}x${screenHeight}`) >= 0) {\n        ipad = ua.match(/(Version)\\/([\\d.]+)/);\n        if (!ipad) ipad = [\n            0,\n            1,\n            \"13_0_0\"\n        ];\n        macos = false;\n    }\n    // Android\n    if (android && !windows) {\n        device.os = \"android\";\n        device.android = true;\n    }\n    if (ipad || iphone || ipod) {\n        device.os = \"ios\";\n        device.ios = true;\n    }\n    // Export object\n    return device;\n}\nfunction getDevice(overrides = {}) {\n    if (!deviceCached) {\n        deviceCached = calcDevice(overrides);\n    }\n    return deviceCached;\n}\nlet browser;\nfunction calcBrowser() {\n    const window1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    const device = getDevice();\n    let needPerspectiveFix = false;\n    function isSafari() {\n        const ua = window1.navigator.userAgent.toLowerCase();\n        return ua.indexOf(\"safari\") >= 0 && ua.indexOf(\"chrome\") < 0 && ua.indexOf(\"android\") < 0;\n    }\n    if (isSafari()) {\n        const ua = String(window1.navigator.userAgent);\n        if (ua.includes(\"Version/\")) {\n            const [major, minor] = ua.split(\"Version/\")[1].split(\" \")[0].split(\".\").map((num)=>Number(num));\n            needPerspectiveFix = major < 16 || major === 16 && minor < 2;\n        }\n    }\n    const isWebView = /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(window1.navigator.userAgent);\n    const isSafariBrowser = isSafari();\n    const need3dFix = isSafariBrowser || isWebView && device.ios;\n    return {\n        isSafari: needPerspectiveFix || isSafariBrowser,\n        needPerspectiveFix,\n        need3dFix,\n        isWebView\n    };\n}\nfunction getBrowser() {\n    if (!browser) {\n        browser = calcBrowser();\n    }\n    return browser;\n}\nfunction Resize({ swiper, on, emit }) {\n    const window1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    let observer = null;\n    let animationFrame = null;\n    const resizeHandler = ()=>{\n        if (!swiper || swiper.destroyed || !swiper.initialized) return;\n        emit(\"beforeResize\");\n        emit(\"resize\");\n    };\n    const createObserver = ()=>{\n        if (!swiper || swiper.destroyed || !swiper.initialized) return;\n        observer = new ResizeObserver((entries)=>{\n            animationFrame = window1.requestAnimationFrame(()=>{\n                const { width, height } = swiper;\n                let newWidth = width;\n                let newHeight = height;\n                entries.forEach(({ contentBoxSize, contentRect, target })=>{\n                    if (target && target !== swiper.el) return;\n                    newWidth = contentRect ? contentRect.width : (contentBoxSize[0] || contentBoxSize).inlineSize;\n                    newHeight = contentRect ? contentRect.height : (contentBoxSize[0] || contentBoxSize).blockSize;\n                });\n                if (newWidth !== width || newHeight !== height) {\n                    resizeHandler();\n                }\n            });\n        });\n        observer.observe(swiper.el);\n    };\n    const removeObserver = ()=>{\n        if (animationFrame) {\n            window1.cancelAnimationFrame(animationFrame);\n        }\n        if (observer && observer.unobserve && swiper.el) {\n            observer.unobserve(swiper.el);\n            observer = null;\n        }\n    };\n    const orientationChangeHandler = ()=>{\n        if (!swiper || swiper.destroyed || !swiper.initialized) return;\n        emit(\"orientationchange\");\n    };\n    on(\"init\", ()=>{\n        if (swiper.params.resizeObserver && typeof window1.ResizeObserver !== \"undefined\") {\n            createObserver();\n            return;\n        }\n        window1.addEventListener(\"resize\", resizeHandler);\n        window1.addEventListener(\"orientationchange\", orientationChangeHandler);\n    });\n    on(\"destroy\", ()=>{\n        removeObserver();\n        window1.removeEventListener(\"resize\", resizeHandler);\n        window1.removeEventListener(\"orientationchange\", orientationChangeHandler);\n    });\n}\nfunction Observer({ swiper, extendParams, on, emit }) {\n    const observers = [];\n    const window1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    const attach = (target, options = {})=>{\n        const ObserverFunc = window1.MutationObserver || window1.WebkitMutationObserver;\n        const observer = new ObserverFunc((mutations)=>{\n            // The observerUpdate event should only be triggered\n            // once despite the number of mutations.  Additional\n            // triggers are redundant and are very costly\n            if (swiper.__preventObserver__) return;\n            if (mutations.length === 1) {\n                emit(\"observerUpdate\", mutations[0]);\n                return;\n            }\n            const observerUpdate = function observerUpdate() {\n                emit(\"observerUpdate\", mutations[0]);\n            };\n            if (window1.requestAnimationFrame) {\n                window1.requestAnimationFrame(observerUpdate);\n            } else {\n                window1.setTimeout(observerUpdate, 0);\n            }\n        });\n        observer.observe(target, {\n            attributes: typeof options.attributes === \"undefined\" ? true : options.attributes,\n            childList: swiper.isElement || (typeof options.childList === \"undefined\" ? true : options).childList,\n            characterData: typeof options.characterData === \"undefined\" ? true : options.characterData\n        });\n        observers.push(observer);\n    };\n    const init = ()=>{\n        if (!swiper.params.observer) return;\n        if (swiper.params.observeParents) {\n            const containerParents = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.d)(swiper.hostEl);\n            for(let i = 0; i < containerParents.length; i += 1){\n                attach(containerParents[i]);\n            }\n        }\n        // Observe container\n        attach(swiper.hostEl, {\n            childList: swiper.params.observeSlideChildren\n        });\n        // Observe wrapper\n        attach(swiper.wrapperEl, {\n            attributes: false\n        });\n    };\n    const destroy = ()=>{\n        observers.forEach((observer)=>{\n            observer.disconnect();\n        });\n        observers.splice(0, observers.length);\n    };\n    extendParams({\n        observer: false,\n        observeParents: false,\n        observeSlideChildren: false\n    });\n    on(\"init\", init);\n    on(\"destroy\", destroy);\n}\n/* eslint-disable no-underscore-dangle */ var eventsEmitter = {\n    on (events, handler, priority) {\n        const self = this;\n        if (!self.eventsListeners || self.destroyed) return self;\n        if (typeof handler !== \"function\") return self;\n        const method = priority ? \"unshift\" : \"push\";\n        events.split(\" \").forEach((event)=>{\n            if (!self.eventsListeners[event]) self.eventsListeners[event] = [];\n            self.eventsListeners[event][method](handler);\n        });\n        return self;\n    },\n    once (events, handler, priority) {\n        const self = this;\n        if (!self.eventsListeners || self.destroyed) return self;\n        if (typeof handler !== \"function\") return self;\n        function onceHandler(...args) {\n            self.off(events, onceHandler);\n            if (onceHandler.__emitterProxy) {\n                delete onceHandler.__emitterProxy;\n            }\n            handler.apply(self, args);\n        }\n        onceHandler.__emitterProxy = handler;\n        return self.on(events, onceHandler, priority);\n    },\n    onAny (handler, priority) {\n        const self = this;\n        if (!self.eventsListeners || self.destroyed) return self;\n        if (typeof handler !== \"function\") return self;\n        const method = priority ? \"unshift\" : \"push\";\n        if (self.eventsAnyListeners.indexOf(handler) < 0) {\n            self.eventsAnyListeners[method](handler);\n        }\n        return self;\n    },\n    offAny (handler) {\n        const self = this;\n        if (!self.eventsListeners || self.destroyed) return self;\n        if (!self.eventsAnyListeners) return self;\n        const index = self.eventsAnyListeners.indexOf(handler);\n        if (index >= 0) {\n            self.eventsAnyListeners.splice(index, 1);\n        }\n        return self;\n    },\n    off (events, handler) {\n        const self = this;\n        if (!self.eventsListeners || self.destroyed) return self;\n        if (!self.eventsListeners) return self;\n        events.split(\" \").forEach((event)=>{\n            if (typeof handler === \"undefined\") {\n                self.eventsListeners[event] = [];\n            } else if (self.eventsListeners[event]) {\n                self.eventsListeners[event].forEach((eventHandler, index)=>{\n                    if (eventHandler === handler || eventHandler.__emitterProxy && eventHandler.__emitterProxy === handler) {\n                        self.eventsListeners[event].splice(index, 1);\n                    }\n                });\n            }\n        });\n        return self;\n    },\n    emit (...args) {\n        const self = this;\n        if (!self.eventsListeners || self.destroyed) return self;\n        if (!self.eventsListeners) return self;\n        let events;\n        let data;\n        let context;\n        if (typeof args[0] === \"string\" || Array.isArray(args[0])) {\n            events = args[0];\n            data = args.slice(1, args.length);\n            context = self;\n        } else {\n            events = args[0].events;\n            data = args[0].data;\n            context = args[0].context || self;\n        }\n        data.unshift(context);\n        const eventsArray = Array.isArray(events) ? events : events.split(\" \");\n        eventsArray.forEach((event)=>{\n            if (self.eventsAnyListeners && self.eventsAnyListeners.length) {\n                self.eventsAnyListeners.forEach((eventHandler)=>{\n                    eventHandler.apply(context, [\n                        event,\n                        ...data\n                    ]);\n                });\n            }\n            if (self.eventsListeners && self.eventsListeners[event]) {\n                self.eventsListeners[event].forEach((eventHandler)=>{\n                    eventHandler.apply(context, data);\n                });\n            }\n        });\n        return self;\n    }\n};\nfunction updateSize() {\n    const swiper = this;\n    let width;\n    let height;\n    const el = swiper.el;\n    if (typeof swiper.params.width !== \"undefined\" && swiper.params.width !== null) {\n        width = swiper.params.width;\n    } else {\n        width = el.clientWidth;\n    }\n    if (typeof swiper.params.height !== \"undefined\" && swiper.params.height !== null) {\n        height = swiper.params.height;\n    } else {\n        height = el.clientHeight;\n    }\n    if (width === 0 && swiper.isHorizontal() || height === 0 && swiper.isVertical()) {\n        return;\n    }\n    // Subtract paddings\n    width = width - parseInt((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.q)(el, \"padding-left\") || 0, 10) - parseInt((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.q)(el, \"padding-right\") || 0, 10);\n    height = height - parseInt((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.q)(el, \"padding-top\") || 0, 10) - parseInt((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.q)(el, \"padding-bottom\") || 0, 10);\n    if (Number.isNaN(width)) width = 0;\n    if (Number.isNaN(height)) height = 0;\n    Object.assign(swiper, {\n        width,\n        height,\n        size: swiper.isHorizontal() ? width : height\n    });\n}\nfunction updateSlides() {\n    const swiper = this;\n    function getDirectionPropertyValue(node, label) {\n        return parseFloat(node.getPropertyValue(swiper.getDirectionLabel(label)) || 0);\n    }\n    const params = swiper.params;\n    const { wrapperEl, slidesEl, rtlTranslate: rtl, wrongRTL } = swiper;\n    const isVirtual = swiper.virtual && params.virtual.enabled;\n    const previousSlidesLength = isVirtual ? swiper.virtual.slides.length : swiper.slides.length;\n    const slides = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(slidesEl, `.${swiper.params.slideClass}, swiper-slide`);\n    const slidesLength = isVirtual ? swiper.virtual.slides.length : slides.length;\n    let snapGrid = [];\n    const slidesGrid = [];\n    const slidesSizesGrid = [];\n    let offsetBefore = params.slidesOffsetBefore;\n    if (typeof offsetBefore === \"function\") {\n        offsetBefore = params.slidesOffsetBefore.call(swiper);\n    }\n    let offsetAfter = params.slidesOffsetAfter;\n    if (typeof offsetAfter === \"function\") {\n        offsetAfter = params.slidesOffsetAfter.call(swiper);\n    }\n    const previousSnapGridLength = swiper.snapGrid.length;\n    const previousSlidesGridLength = swiper.slidesGrid.length;\n    const swiperSize = swiper.size - offsetBefore - offsetAfter;\n    let spaceBetween = params.spaceBetween;\n    let slidePosition = -offsetBefore;\n    let prevSlideSize = 0;\n    let index = 0;\n    if (typeof swiperSize === \"undefined\") {\n        return;\n    }\n    if (typeof spaceBetween === \"string\" && spaceBetween.indexOf(\"%\") >= 0) {\n        spaceBetween = parseFloat(spaceBetween.replace(\"%\", \"\")) / 100 * swiperSize;\n    } else if (typeof spaceBetween === \"string\") {\n        spaceBetween = parseFloat(spaceBetween);\n    }\n    swiper.virtualSize = -spaceBetween - offsetBefore - offsetAfter;\n    // reset margins\n    slides.forEach((slideEl)=>{\n        if (rtl) {\n            slideEl.style.marginLeft = \"\";\n        } else {\n            slideEl.style.marginRight = \"\";\n        }\n        slideEl.style.marginBottom = \"\";\n        slideEl.style.marginTop = \"\";\n    });\n    // reset cssMode offsets\n    if (params.centeredSlides && params.cssMode) {\n        (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(wrapperEl, \"--swiper-centered-offset-before\", \"\");\n        (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(wrapperEl, \"--swiper-centered-offset-after\", \"\");\n    }\n    const gridEnabled = params.grid && params.grid.rows > 1 && swiper.grid;\n    if (gridEnabled) {\n        swiper.grid.initSlides(slides);\n    } else if (swiper.grid) {\n        swiper.grid.unsetSlides();\n    }\n    // Calc slides\n    let slideSize;\n    const shouldResetSlideSize = params.slidesPerView === \"auto\" && params.breakpoints && Object.keys(params.breakpoints).filter((key)=>{\n        return typeof params.breakpoints[key].slidesPerView !== \"undefined\";\n    }).length > 0;\n    for(let i = 0; i < slidesLength; i += 1){\n        slideSize = 0;\n        const slide = slides[i];\n        if (slide) {\n            if (gridEnabled) {\n                swiper.grid.updateSlide(i, slide, slides);\n            }\n            if ((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.q)(slide, \"display\") === \"none\") continue; // eslint-disable-line\n        }\n        if (isVirtual && params.slidesPerView === \"auto\") {\n            if (params.virtual.slidesPerViewAutoSlideSize) {\n                slideSize = params.virtual.slidesPerViewAutoSlideSize;\n            }\n            if (slideSize && slide) {\n                if (params.roundLengths) slideSize = Math.floor(slideSize);\n                slide.style[swiper.getDirectionLabel(\"width\")] = `${slideSize}px`;\n            }\n        } else if (params.slidesPerView === \"auto\") {\n            if (shouldResetSlideSize) {\n                slide.style[swiper.getDirectionLabel(\"width\")] = ``;\n            }\n            const slideStyles = getComputedStyle(slide);\n            const currentTransform = slide.style.transform;\n            const currentWebKitTransform = slide.style.webkitTransform;\n            if (currentTransform) {\n                slide.style.transform = \"none\";\n            }\n            if (currentWebKitTransform) {\n                slide.style.webkitTransform = \"none\";\n            }\n            if (params.roundLengths) {\n                slideSize = swiper.isHorizontal() ? (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.i)(slide, \"width\", true) : (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.i)(slide, \"height\", true);\n            } else {\n                // eslint-disable-next-line\n                const width = getDirectionPropertyValue(slideStyles, \"width\");\n                const paddingLeft = getDirectionPropertyValue(slideStyles, \"padding-left\");\n                const paddingRight = getDirectionPropertyValue(slideStyles, \"padding-right\");\n                const marginLeft = getDirectionPropertyValue(slideStyles, \"margin-left\");\n                const marginRight = getDirectionPropertyValue(slideStyles, \"margin-right\");\n                const boxSizing = slideStyles.getPropertyValue(\"box-sizing\");\n                if (boxSizing && boxSizing === \"border-box\") {\n                    slideSize = width + marginLeft + marginRight;\n                } else {\n                    const { clientWidth, offsetWidth } = slide;\n                    slideSize = width + paddingLeft + paddingRight + marginLeft + marginRight + (offsetWidth - clientWidth);\n                }\n            }\n            if (currentTransform) {\n                slide.style.transform = currentTransform;\n            }\n            if (currentWebKitTransform) {\n                slide.style.webkitTransform = currentWebKitTransform;\n            }\n            if (params.roundLengths) slideSize = Math.floor(slideSize);\n        } else {\n            slideSize = (swiperSize - (params.slidesPerView - 1) * spaceBetween) / params.slidesPerView;\n            if (params.roundLengths) slideSize = Math.floor(slideSize);\n            if (slide) {\n                slide.style[swiper.getDirectionLabel(\"width\")] = `${slideSize}px`;\n            }\n        }\n        if (slide) {\n            slide.swiperSlideSize = slideSize;\n        }\n        slidesSizesGrid.push(slideSize);\n        if (params.centeredSlides) {\n            slidePosition = slidePosition + slideSize / 2 + prevSlideSize / 2 + spaceBetween;\n            if (prevSlideSize === 0 && i !== 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;\n            if (i === 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;\n            if (Math.abs(slidePosition) < 1 / 1000) slidePosition = 0;\n            if (params.roundLengths) slidePosition = Math.floor(slidePosition);\n            if (index % params.slidesPerGroup === 0) snapGrid.push(slidePosition);\n            slidesGrid.push(slidePosition);\n        } else {\n            if (params.roundLengths) slidePosition = Math.floor(slidePosition);\n            if ((index - Math.min(swiper.params.slidesPerGroupSkip, index)) % swiper.params.slidesPerGroup === 0) snapGrid.push(slidePosition);\n            slidesGrid.push(slidePosition);\n            slidePosition = slidePosition + slideSize + spaceBetween;\n        }\n        swiper.virtualSize += slideSize + spaceBetween;\n        prevSlideSize = slideSize;\n        index += 1;\n    }\n    swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter;\n    if (rtl && wrongRTL && (params.effect === \"slide\" || params.effect === \"coverflow\")) {\n        wrapperEl.style.width = `${swiper.virtualSize + spaceBetween}px`;\n    }\n    if (params.setWrapperSize) {\n        wrapperEl.style[swiper.getDirectionLabel(\"width\")] = `${swiper.virtualSize + spaceBetween}px`;\n    }\n    if (gridEnabled) {\n        swiper.grid.updateWrapperSize(slideSize, snapGrid);\n    }\n    // Remove last grid elements depending on width\n    if (!params.centeredSlides) {\n        const newSlidesGrid = [];\n        for(let i = 0; i < snapGrid.length; i += 1){\n            let slidesGridItem = snapGrid[i];\n            if (params.roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n            if (snapGrid[i] <= swiper.virtualSize - swiperSize) {\n                newSlidesGrid.push(slidesGridItem);\n            }\n        }\n        snapGrid = newSlidesGrid;\n        if (Math.floor(swiper.virtualSize - swiperSize) - Math.floor(snapGrid[snapGrid.length - 1]) > 1) {\n            snapGrid.push(swiper.virtualSize - swiperSize);\n        }\n    }\n    if (isVirtual && params.loop) {\n        const size = slidesSizesGrid[0] + spaceBetween;\n        if (params.slidesPerGroup > 1) {\n            const groups = Math.ceil((swiper.virtual.slidesBefore + swiper.virtual.slidesAfter) / params.slidesPerGroup);\n            const groupSize = size * params.slidesPerGroup;\n            for(let i = 0; i < groups; i += 1){\n                snapGrid.push(snapGrid[snapGrid.length - 1] + groupSize);\n            }\n        }\n        for(let i = 0; i < swiper.virtual.slidesBefore + swiper.virtual.slidesAfter; i += 1){\n            if (params.slidesPerGroup === 1) {\n                snapGrid.push(snapGrid[snapGrid.length - 1] + size);\n            }\n            slidesGrid.push(slidesGrid[slidesGrid.length - 1] + size);\n            swiper.virtualSize += size;\n        }\n    }\n    if (snapGrid.length === 0) snapGrid = [\n        0\n    ];\n    if (spaceBetween !== 0) {\n        const key = swiper.isHorizontal() && rtl ? \"marginLeft\" : swiper.getDirectionLabel(\"marginRight\");\n        slides.filter((_, slideIndex)=>{\n            if (!params.cssMode || params.loop) return true;\n            if (slideIndex === slides.length - 1) {\n                return false;\n            }\n            return true;\n        }).forEach((slideEl)=>{\n            slideEl.style[key] = `${spaceBetween}px`;\n        });\n    }\n    if (params.centeredSlides && params.centeredSlidesBounds) {\n        let allSlidesSize = 0;\n        slidesSizesGrid.forEach((slideSizeValue)=>{\n            allSlidesSize += slideSizeValue + (spaceBetween || 0);\n        });\n        allSlidesSize -= spaceBetween;\n        const maxSnap = allSlidesSize > swiperSize ? allSlidesSize - swiperSize : 0;\n        snapGrid = snapGrid.map((snap)=>{\n            if (snap <= 0) return -offsetBefore;\n            if (snap > maxSnap) return maxSnap + offsetAfter;\n            return snap;\n        });\n    }\n    if (params.centerInsufficientSlides) {\n        let allSlidesSize = 0;\n        slidesSizesGrid.forEach((slideSizeValue)=>{\n            allSlidesSize += slideSizeValue + (spaceBetween || 0);\n        });\n        allSlidesSize -= spaceBetween;\n        const offsetSize = (offsetBefore || 0) + (offsetAfter || 0);\n        if (allSlidesSize + offsetSize < swiperSize) {\n            const allSlidesOffset = (swiperSize - allSlidesSize - offsetSize) / 2;\n            snapGrid.forEach((snap, snapIndex)=>{\n                snapGrid[snapIndex] = snap - allSlidesOffset;\n            });\n            slidesGrid.forEach((snap, snapIndex)=>{\n                slidesGrid[snapIndex] = snap + allSlidesOffset;\n            });\n        }\n    }\n    Object.assign(swiper, {\n        slides,\n        snapGrid,\n        slidesGrid,\n        slidesSizesGrid\n    });\n    if (params.centeredSlides && params.cssMode && !params.centeredSlidesBounds) {\n        (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(wrapperEl, \"--swiper-centered-offset-before\", `${-snapGrid[0]}px`);\n        (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(wrapperEl, \"--swiper-centered-offset-after\", `${swiper.size / 2 - slidesSizesGrid[slidesSizesGrid.length - 1] / 2}px`);\n        const addToSnapGrid = -swiper.snapGrid[0];\n        const addToSlidesGrid = -swiper.slidesGrid[0];\n        swiper.snapGrid = swiper.snapGrid.map((v)=>v + addToSnapGrid);\n        swiper.slidesGrid = swiper.slidesGrid.map((v)=>v + addToSlidesGrid);\n    }\n    if (slidesLength !== previousSlidesLength) {\n        swiper.emit(\"slidesLengthChange\");\n    }\n    if (snapGrid.length !== previousSnapGridLength) {\n        if (swiper.params.watchOverflow) swiper.checkOverflow();\n        swiper.emit(\"snapGridLengthChange\");\n    }\n    if (slidesGrid.length !== previousSlidesGridLength) {\n        swiper.emit(\"slidesGridLengthChange\");\n    }\n    if (params.watchSlidesProgress) {\n        swiper.updateSlidesOffset();\n    }\n    swiper.emit(\"slidesUpdated\");\n    if (!isVirtual && !params.cssMode && (params.effect === \"slide\" || params.effect === \"fade\")) {\n        const backFaceHiddenClass = `${params.containerModifierClass}backface-hidden`;\n        const hasClassBackfaceClassAdded = swiper.el.classList.contains(backFaceHiddenClass);\n        if (slidesLength <= params.maxBackfaceHiddenSlides) {\n            if (!hasClassBackfaceClassAdded) swiper.el.classList.add(backFaceHiddenClass);\n        } else if (hasClassBackfaceClassAdded) {\n            swiper.el.classList.remove(backFaceHiddenClass);\n        }\n    }\n}\nfunction updateAutoHeight(speed) {\n    const swiper = this;\n    const activeSlides = [];\n    const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n    let newHeight = 0;\n    let i;\n    if (typeof speed === \"number\") {\n        swiper.setTransition(speed);\n    } else if (speed === true) {\n        swiper.setTransition(swiper.params.speed);\n    }\n    const getSlideByIndex = (index)=>{\n        if (isVirtual) {\n            return swiper.slides[swiper.getSlideIndexByData(index)];\n        }\n        return swiper.slides[index];\n    };\n    // Find slides currently in view\n    if (swiper.params.slidesPerView !== \"auto\" && swiper.params.slidesPerView > 1) {\n        if (swiper.params.centeredSlides) {\n            (swiper.visibleSlides || []).forEach((slide)=>{\n                activeSlides.push(slide);\n            });\n        } else {\n            for(i = 0; i < Math.ceil(swiper.params.slidesPerView); i += 1){\n                const index = swiper.activeIndex + i;\n                if (index > swiper.slides.length && !isVirtual) break;\n                activeSlides.push(getSlideByIndex(index));\n            }\n        }\n    } else {\n        activeSlides.push(getSlideByIndex(swiper.activeIndex));\n    }\n    // Find new height from highest slide in view\n    for(i = 0; i < activeSlides.length; i += 1){\n        if (typeof activeSlides[i] !== \"undefined\") {\n            const height = activeSlides[i].offsetHeight;\n            newHeight = height > newHeight ? height : newHeight;\n        }\n    }\n    // Update Height\n    if (newHeight || newHeight === 0) swiper.wrapperEl.style.height = `${newHeight}px`;\n}\nfunction updateSlidesOffset() {\n    const swiper = this;\n    const slides = swiper.slides;\n    // eslint-disable-next-line\n    const minusOffset = swiper.isElement ? swiper.isHorizontal() ? swiper.wrapperEl.offsetLeft : swiper.wrapperEl.offsetTop : 0;\n    for(let i = 0; i < slides.length; i += 1){\n        slides[i].swiperSlideOffset = (swiper.isHorizontal() ? slides[i].offsetLeft : slides[i].offsetTop) - minusOffset - swiper.cssOverflowAdjustment();\n    }\n}\nconst toggleSlideClasses$1 = (slideEl, condition, className)=>{\n    if (condition && !slideEl.classList.contains(className)) {\n        slideEl.classList.add(className);\n    } else if (!condition && slideEl.classList.contains(className)) {\n        slideEl.classList.remove(className);\n    }\n};\nfunction updateSlidesProgress(translate = this && this.translate || 0) {\n    const swiper = this;\n    const params = swiper.params;\n    const { slides, rtlTranslate: rtl, snapGrid } = swiper;\n    if (slides.length === 0) return;\n    if (typeof slides[0].swiperSlideOffset === \"undefined\") swiper.updateSlidesOffset();\n    let offsetCenter = -translate;\n    if (rtl) offsetCenter = translate;\n    swiper.visibleSlidesIndexes = [];\n    swiper.visibleSlides = [];\n    let spaceBetween = params.spaceBetween;\n    if (typeof spaceBetween === \"string\" && spaceBetween.indexOf(\"%\") >= 0) {\n        spaceBetween = parseFloat(spaceBetween.replace(\"%\", \"\")) / 100 * swiper.size;\n    } else if (typeof spaceBetween === \"string\") {\n        spaceBetween = parseFloat(spaceBetween);\n    }\n    for(let i = 0; i < slides.length; i += 1){\n        const slide = slides[i];\n        let slideOffset = slide.swiperSlideOffset;\n        if (params.cssMode && params.centeredSlides) {\n            slideOffset -= slides[0].swiperSlideOffset;\n        }\n        const slideProgress = (offsetCenter + (params.centeredSlides ? swiper.minTranslate() : 0) - slideOffset) / (slide.swiperSlideSize + spaceBetween);\n        const originalSlideProgress = (offsetCenter - snapGrid[0] + (params.centeredSlides ? swiper.minTranslate() : 0) - slideOffset) / (slide.swiperSlideSize + spaceBetween);\n        const slideBefore = -(offsetCenter - slideOffset);\n        const slideAfter = slideBefore + swiper.slidesSizesGrid[i];\n        const isFullyVisible = slideBefore >= 0 && slideBefore <= swiper.size - swiper.slidesSizesGrid[i];\n        const isVisible = slideBefore >= 0 && slideBefore < swiper.size - 1 || slideAfter > 1 && slideAfter <= swiper.size || slideBefore <= 0 && slideAfter >= swiper.size;\n        if (isVisible) {\n            swiper.visibleSlides.push(slide);\n            swiper.visibleSlidesIndexes.push(i);\n        }\n        toggleSlideClasses$1(slide, isVisible, params.slideVisibleClass);\n        toggleSlideClasses$1(slide, isFullyVisible, params.slideFullyVisibleClass);\n        slide.progress = rtl ? -slideProgress : slideProgress;\n        slide.originalProgress = rtl ? -originalSlideProgress : originalSlideProgress;\n    }\n}\nfunction updateProgress(translate) {\n    const swiper = this;\n    if (typeof translate === \"undefined\") {\n        const multiplier = swiper.rtlTranslate ? -1 : 1;\n        // eslint-disable-next-line\n        translate = swiper && swiper.translate && swiper.translate * multiplier || 0;\n    }\n    const params = swiper.params;\n    const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n    let { progress, isBeginning, isEnd, progressLoop } = swiper;\n    const wasBeginning = isBeginning;\n    const wasEnd = isEnd;\n    if (translatesDiff === 0) {\n        progress = 0;\n        isBeginning = true;\n        isEnd = true;\n    } else {\n        progress = (translate - swiper.minTranslate()) / translatesDiff;\n        const isBeginningRounded = Math.abs(translate - swiper.minTranslate()) < 1;\n        const isEndRounded = Math.abs(translate - swiper.maxTranslate()) < 1;\n        isBeginning = isBeginningRounded || progress <= 0;\n        isEnd = isEndRounded || progress >= 1;\n        if (isBeginningRounded) progress = 0;\n        if (isEndRounded) progress = 1;\n    }\n    if (params.loop) {\n        const firstSlideIndex = swiper.getSlideIndexByData(0);\n        const lastSlideIndex = swiper.getSlideIndexByData(swiper.slides.length - 1);\n        const firstSlideTranslate = swiper.slidesGrid[firstSlideIndex];\n        const lastSlideTranslate = swiper.slidesGrid[lastSlideIndex];\n        const translateMax = swiper.slidesGrid[swiper.slidesGrid.length - 1];\n        const translateAbs = Math.abs(translate);\n        if (translateAbs >= firstSlideTranslate) {\n            progressLoop = (translateAbs - firstSlideTranslate) / translateMax;\n        } else {\n            progressLoop = (translateAbs + translateMax - lastSlideTranslate) / translateMax;\n        }\n        if (progressLoop > 1) progressLoop -= 1;\n    }\n    Object.assign(swiper, {\n        progress,\n        progressLoop,\n        isBeginning,\n        isEnd\n    });\n    if (params.watchSlidesProgress || params.centeredSlides && params.autoHeight) swiper.updateSlidesProgress(translate);\n    if (isBeginning && !wasBeginning) {\n        swiper.emit(\"reachBeginning toEdge\");\n    }\n    if (isEnd && !wasEnd) {\n        swiper.emit(\"reachEnd toEdge\");\n    }\n    if (wasBeginning && !isBeginning || wasEnd && !isEnd) {\n        swiper.emit(\"fromEdge\");\n    }\n    swiper.emit(\"progress\", progress);\n}\nconst toggleSlideClasses = (slideEl, condition, className)=>{\n    if (condition && !slideEl.classList.contains(className)) {\n        slideEl.classList.add(className);\n    } else if (!condition && slideEl.classList.contains(className)) {\n        slideEl.classList.remove(className);\n    }\n};\nfunction updateSlidesClasses() {\n    const swiper = this;\n    const { slides, params, slidesEl, activeIndex } = swiper;\n    const isVirtual = swiper.virtual && params.virtual.enabled;\n    const gridEnabled = swiper.grid && params.grid && params.grid.rows > 1;\n    const getFilteredSlide = (selector)=>{\n        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(slidesEl, `.${params.slideClass}${selector}, swiper-slide${selector}`)[0];\n    };\n    let activeSlide;\n    let prevSlide;\n    let nextSlide;\n    if (isVirtual) {\n        if (params.loop) {\n            let slideIndex = activeIndex - swiper.virtual.slidesBefore;\n            if (slideIndex < 0) slideIndex = swiper.virtual.slides.length + slideIndex;\n            if (slideIndex >= swiper.virtual.slides.length) slideIndex -= swiper.virtual.slides.length;\n            activeSlide = getFilteredSlide(`[data-swiper-slide-index=\"${slideIndex}\"]`);\n        } else {\n            activeSlide = getFilteredSlide(`[data-swiper-slide-index=\"${activeIndex}\"]`);\n        }\n    } else {\n        if (gridEnabled) {\n            activeSlide = slides.find((slideEl)=>slideEl.column === activeIndex);\n            nextSlide = slides.find((slideEl)=>slideEl.column === activeIndex + 1);\n            prevSlide = slides.find((slideEl)=>slideEl.column === activeIndex - 1);\n        } else {\n            activeSlide = slides[activeIndex];\n        }\n    }\n    if (activeSlide) {\n        if (!gridEnabled) {\n            // Next Slide\n            nextSlide = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.r)(activeSlide, `.${params.slideClass}, swiper-slide`)[0];\n            if (params.loop && !nextSlide) {\n                nextSlide = slides[0];\n            }\n            // Prev Slide\n            prevSlide = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.t)(activeSlide, `.${params.slideClass}, swiper-slide`)[0];\n            if (params.loop && !prevSlide === 0) {\n                prevSlide = slides[slides.length - 1];\n            }\n        }\n    }\n    slides.forEach((slideEl)=>{\n        toggleSlideClasses(slideEl, slideEl === activeSlide, params.slideActiveClass);\n        toggleSlideClasses(slideEl, slideEl === nextSlide, params.slideNextClass);\n        toggleSlideClasses(slideEl, slideEl === prevSlide, params.slidePrevClass);\n    });\n    swiper.emitSlidesClasses();\n}\nconst processLazyPreloader = (swiper, imageEl)=>{\n    if (!swiper || swiper.destroyed || !swiper.params) return;\n    const slideSelector = ()=>swiper.isElement ? `swiper-slide` : `.${swiper.params.slideClass}`;\n    const slideEl = imageEl.closest(slideSelector());\n    if (slideEl) {\n        let lazyEl = slideEl.querySelector(`.${swiper.params.lazyPreloaderClass}`);\n        if (!lazyEl && swiper.isElement) {\n            if (slideEl.shadowRoot) {\n                lazyEl = slideEl.shadowRoot.querySelector(`.${swiper.params.lazyPreloaderClass}`);\n            } else {\n                // init later\n                requestAnimationFrame(()=>{\n                    if (slideEl.shadowRoot) {\n                        lazyEl = slideEl.shadowRoot.querySelector(`.${swiper.params.lazyPreloaderClass}`);\n                        if (lazyEl) lazyEl.remove();\n                    }\n                });\n            }\n        }\n        if (lazyEl) lazyEl.remove();\n    }\n};\nconst unlazy = (swiper, index)=>{\n    if (!swiper.slides[index]) return;\n    const imageEl = swiper.slides[index].querySelector('[loading=\"lazy\"]');\n    if (imageEl) imageEl.removeAttribute(\"loading\");\n};\nconst preload = (swiper)=>{\n    if (!swiper || swiper.destroyed || !swiper.params) return;\n    let amount = swiper.params.lazyPreloadPrevNext;\n    const len = swiper.slides.length;\n    if (!len || !amount || amount < 0) return;\n    amount = Math.min(amount, len);\n    const slidesPerView = swiper.params.slidesPerView === \"auto\" ? swiper.slidesPerViewDynamic() : Math.ceil(swiper.params.slidesPerView);\n    const activeIndex = swiper.activeIndex;\n    if (swiper.params.grid && swiper.params.grid.rows > 1) {\n        const activeColumn = activeIndex;\n        const preloadColumns = [\n            activeColumn - amount\n        ];\n        preloadColumns.push(...Array.from({\n            length: amount\n        }).map((_, i)=>{\n            return activeColumn + slidesPerView + i;\n        }));\n        swiper.slides.forEach((slideEl, i)=>{\n            if (preloadColumns.includes(slideEl.column)) unlazy(swiper, i);\n        });\n        return;\n    }\n    const slideIndexLastInView = activeIndex + slidesPerView - 1;\n    if (swiper.params.rewind || swiper.params.loop) {\n        for(let i = activeIndex - amount; i <= slideIndexLastInView + amount; i += 1){\n            const realIndex = (i % len + len) % len;\n            if (realIndex < activeIndex || realIndex > slideIndexLastInView) unlazy(swiper, realIndex);\n        }\n    } else {\n        for(let i = Math.max(activeIndex - amount, 0); i <= Math.min(slideIndexLastInView + amount, len - 1); i += 1){\n            if (i !== activeIndex && (i > slideIndexLastInView || i < activeIndex)) {\n                unlazy(swiper, i);\n            }\n        }\n    }\n};\nfunction getActiveIndexByTranslate(swiper) {\n    const { slidesGrid, params } = swiper;\n    const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;\n    let activeIndex;\n    for(let i = 0; i < slidesGrid.length; i += 1){\n        if (typeof slidesGrid[i + 1] !== \"undefined\") {\n            if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1] - (slidesGrid[i + 1] - slidesGrid[i]) / 2) {\n                activeIndex = i;\n            } else if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1]) {\n                activeIndex = i + 1;\n            }\n        } else if (translate >= slidesGrid[i]) {\n            activeIndex = i;\n        }\n    }\n    // Normalize slideIndex\n    if (params.normalizeSlideIndex) {\n        if (activeIndex < 0 || typeof activeIndex === \"undefined\") activeIndex = 0;\n    }\n    return activeIndex;\n}\nfunction updateActiveIndex(newActiveIndex) {\n    const swiper = this;\n    const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;\n    const { snapGrid, params, activeIndex: previousIndex, realIndex: previousRealIndex, snapIndex: previousSnapIndex } = swiper;\n    let activeIndex = newActiveIndex;\n    let snapIndex;\n    const getVirtualRealIndex = (aIndex)=>{\n        let realIndex = aIndex - swiper.virtual.slidesBefore;\n        if (realIndex < 0) {\n            realIndex = swiper.virtual.slides.length + realIndex;\n        }\n        if (realIndex >= swiper.virtual.slides.length) {\n            realIndex -= swiper.virtual.slides.length;\n        }\n        return realIndex;\n    };\n    if (typeof activeIndex === \"undefined\") {\n        activeIndex = getActiveIndexByTranslate(swiper);\n    }\n    if (snapGrid.indexOf(translate) >= 0) {\n        snapIndex = snapGrid.indexOf(translate);\n    } else {\n        const skip = Math.min(params.slidesPerGroupSkip, activeIndex);\n        snapIndex = skip + Math.floor((activeIndex - skip) / params.slidesPerGroup);\n    }\n    if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;\n    if (activeIndex === previousIndex && !swiper.params.loop) {\n        if (snapIndex !== previousSnapIndex) {\n            swiper.snapIndex = snapIndex;\n            swiper.emit(\"snapIndexChange\");\n        }\n        return;\n    }\n    if (activeIndex === previousIndex && swiper.params.loop && swiper.virtual && swiper.params.virtual.enabled) {\n        swiper.realIndex = getVirtualRealIndex(activeIndex);\n        return;\n    }\n    const gridEnabled = swiper.grid && params.grid && params.grid.rows > 1;\n    // Get real index\n    let realIndex;\n    if (swiper.virtual && params.virtual.enabled && params.loop) {\n        realIndex = getVirtualRealIndex(activeIndex);\n    } else if (gridEnabled) {\n        const firstSlideInColumn = swiper.slides.find((slideEl)=>slideEl.column === activeIndex);\n        let activeSlideIndex = parseInt(firstSlideInColumn.getAttribute(\"data-swiper-slide-index\"), 10);\n        if (Number.isNaN(activeSlideIndex)) {\n            activeSlideIndex = Math.max(swiper.slides.indexOf(firstSlideInColumn), 0);\n        }\n        realIndex = Math.floor(activeSlideIndex / params.grid.rows);\n    } else if (swiper.slides[activeIndex]) {\n        const slideIndex = swiper.slides[activeIndex].getAttribute(\"data-swiper-slide-index\");\n        if (slideIndex) {\n            realIndex = parseInt(slideIndex, 10);\n        } else {\n            realIndex = activeIndex;\n        }\n    } else {\n        realIndex = activeIndex;\n    }\n    Object.assign(swiper, {\n        previousSnapIndex,\n        snapIndex,\n        previousRealIndex,\n        realIndex,\n        previousIndex,\n        activeIndex\n    });\n    if (swiper.initialized) {\n        preload(swiper);\n    }\n    swiper.emit(\"activeIndexChange\");\n    swiper.emit(\"snapIndexChange\");\n    if (swiper.initialized || swiper.params.runCallbacksOnInit) {\n        if (previousRealIndex !== realIndex) {\n            swiper.emit(\"realIndexChange\");\n        }\n        swiper.emit(\"slideChange\");\n    }\n}\nfunction updateClickedSlide(el, path) {\n    const swiper = this;\n    const params = swiper.params;\n    let slide = el.closest(`.${params.slideClass}, swiper-slide`);\n    if (!slide && swiper.isElement && path && path.length > 1 && path.includes(el)) {\n        [\n            ...path.slice(path.indexOf(el) + 1, path.length)\n        ].forEach((pathEl)=>{\n            if (!slide && pathEl.matches && pathEl.matches(`.${params.slideClass}, swiper-slide`)) {\n                slide = pathEl;\n            }\n        });\n    }\n    let slideFound = false;\n    let slideIndex;\n    if (slide) {\n        for(let i = 0; i < swiper.slides.length; i += 1){\n            if (swiper.slides[i] === slide) {\n                slideFound = true;\n                slideIndex = i;\n                break;\n            }\n        }\n    }\n    if (slide && slideFound) {\n        swiper.clickedSlide = slide;\n        if (swiper.virtual && swiper.params.virtual.enabled) {\n            swiper.clickedIndex = parseInt(slide.getAttribute(\"data-swiper-slide-index\"), 10);\n        } else {\n            swiper.clickedIndex = slideIndex;\n        }\n    } else {\n        swiper.clickedSlide = undefined;\n        swiper.clickedIndex = undefined;\n        return;\n    }\n    if (params.slideToClickedSlide && swiper.clickedIndex !== undefined && swiper.clickedIndex !== swiper.activeIndex) {\n        swiper.slideToClickedSlide();\n    }\n}\nvar update = {\n    updateSize,\n    updateSlides,\n    updateAutoHeight,\n    updateSlidesOffset,\n    updateSlidesProgress,\n    updateProgress,\n    updateSlidesClasses,\n    updateActiveIndex,\n    updateClickedSlide\n};\nfunction getSwiperTranslate(axis = this.isHorizontal() ? \"x\" : \"y\") {\n    const swiper = this;\n    const { params, rtlTranslate: rtl, translate, wrapperEl } = swiper;\n    if (params.virtualTranslate) {\n        return rtl ? -translate : translate;\n    }\n    if (params.cssMode) {\n        return translate;\n    }\n    let currentTranslate = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.l)(wrapperEl, axis);\n    currentTranslate += swiper.cssOverflowAdjustment();\n    if (rtl) currentTranslate = -currentTranslate;\n    return currentTranslate || 0;\n}\nfunction setTranslate(translate, byController) {\n    const swiper = this;\n    const { rtlTranslate: rtl, params, wrapperEl, progress } = swiper;\n    let x = 0;\n    let y = 0;\n    const z = 0;\n    if (swiper.isHorizontal()) {\n        x = rtl ? -translate : translate;\n    } else {\n        y = translate;\n    }\n    if (params.roundLengths) {\n        x = Math.floor(x);\n        y = Math.floor(y);\n    }\n    swiper.previousTranslate = swiper.translate;\n    swiper.translate = swiper.isHorizontal() ? x : y;\n    if (params.cssMode) {\n        wrapperEl[swiper.isHorizontal() ? \"scrollLeft\" : \"scrollTop\"] = swiper.isHorizontal() ? -x : -y;\n    } else if (!params.virtualTranslate) {\n        if (swiper.isHorizontal()) {\n            x -= swiper.cssOverflowAdjustment();\n        } else {\n            y -= swiper.cssOverflowAdjustment();\n        }\n        wrapperEl.style.transform = `translate3d(${x}px, ${y}px, ${z}px)`;\n    }\n    // Check if we need to update progress\n    let newProgress;\n    const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n    if (translatesDiff === 0) {\n        newProgress = 0;\n    } else {\n        newProgress = (translate - swiper.minTranslate()) / translatesDiff;\n    }\n    if (newProgress !== progress) {\n        swiper.updateProgress(translate);\n    }\n    swiper.emit(\"setTranslate\", swiper.translate, byController);\n}\nfunction minTranslate() {\n    return -this.snapGrid[0];\n}\nfunction maxTranslate() {\n    return -this.snapGrid[this.snapGrid.length - 1];\n}\nfunction translateTo(translate = 0, speed = this.params.speed, runCallbacks = true, translateBounds = true, internal) {\n    const swiper = this;\n    const { params, wrapperEl } = swiper;\n    if (swiper.animating && params.preventInteractionOnTransition) {\n        return false;\n    }\n    const minTranslate = swiper.minTranslate();\n    const maxTranslate = swiper.maxTranslate();\n    let newTranslate;\n    if (translateBounds && translate > minTranslate) newTranslate = minTranslate;\n    else if (translateBounds && translate < maxTranslate) newTranslate = maxTranslate;\n    else newTranslate = translate;\n    // Update progress\n    swiper.updateProgress(newTranslate);\n    if (params.cssMode) {\n        const isH = swiper.isHorizontal();\n        if (speed === 0) {\n            wrapperEl[isH ? \"scrollLeft\" : \"scrollTop\"] = -newTranslate;\n        } else {\n            if (!swiper.support.smoothScroll) {\n                (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.u)({\n                    swiper,\n                    targetPosition: -newTranslate,\n                    side: isH ? \"left\" : \"top\"\n                });\n                return true;\n            }\n            wrapperEl.scrollTo({\n                [isH ? \"left\" : \"top\"]: -newTranslate,\n                behavior: \"smooth\"\n            });\n        }\n        return true;\n    }\n    if (speed === 0) {\n        swiper.setTransition(0);\n        swiper.setTranslate(newTranslate);\n        if (runCallbacks) {\n            swiper.emit(\"beforeTransitionStart\", speed, internal);\n            swiper.emit(\"transitionEnd\");\n        }\n    } else {\n        swiper.setTransition(speed);\n        swiper.setTranslate(newTranslate);\n        if (runCallbacks) {\n            swiper.emit(\"beforeTransitionStart\", speed, internal);\n            swiper.emit(\"transitionStart\");\n        }\n        if (!swiper.animating) {\n            swiper.animating = true;\n            if (!swiper.onTranslateToWrapperTransitionEnd) {\n                swiper.onTranslateToWrapperTransitionEnd = function transitionEnd(e) {\n                    if (!swiper || swiper.destroyed) return;\n                    if (e.target !== this) return;\n                    swiper.wrapperEl.removeEventListener(\"transitionend\", swiper.onTranslateToWrapperTransitionEnd);\n                    swiper.onTranslateToWrapperTransitionEnd = null;\n                    delete swiper.onTranslateToWrapperTransitionEnd;\n                    swiper.animating = false;\n                    if (runCallbacks) {\n                        swiper.emit(\"transitionEnd\");\n                    }\n                };\n            }\n            swiper.wrapperEl.addEventListener(\"transitionend\", swiper.onTranslateToWrapperTransitionEnd);\n        }\n    }\n    return true;\n}\nvar translate = {\n    getTranslate: getSwiperTranslate,\n    setTranslate,\n    minTranslate,\n    maxTranslate,\n    translateTo\n};\nfunction setTransition(duration, byController) {\n    const swiper = this;\n    if (!swiper.params.cssMode) {\n        swiper.wrapperEl.style.transitionDuration = `${duration}ms`;\n        swiper.wrapperEl.style.transitionDelay = duration === 0 ? `0ms` : \"\";\n    }\n    swiper.emit(\"setTransition\", duration, byController);\n}\nfunction transitionEmit({ swiper, runCallbacks, direction, step }) {\n    const { activeIndex, previousIndex } = swiper;\n    let dir = direction;\n    if (!dir) {\n        if (activeIndex > previousIndex) dir = \"next\";\n        else if (activeIndex < previousIndex) dir = \"prev\";\n        else dir = \"reset\";\n    }\n    swiper.emit(`transition${step}`);\n    if (runCallbacks && dir === \"reset\") {\n        swiper.emit(`slideResetTransition${step}`);\n    } else if (runCallbacks && activeIndex !== previousIndex) {\n        swiper.emit(`slideChangeTransition${step}`);\n        if (dir === \"next\") {\n            swiper.emit(`slideNextTransition${step}`);\n        } else {\n            swiper.emit(`slidePrevTransition${step}`);\n        }\n    }\n}\nfunction transitionStart(runCallbacks = true, direction) {\n    const swiper = this;\n    const { params } = swiper;\n    if (params.cssMode) return;\n    if (params.autoHeight) {\n        swiper.updateAutoHeight();\n    }\n    transitionEmit({\n        swiper,\n        runCallbacks,\n        direction,\n        step: \"Start\"\n    });\n}\nfunction transitionEnd(runCallbacks = true, direction) {\n    const swiper = this;\n    const { params } = swiper;\n    swiper.animating = false;\n    if (params.cssMode) return;\n    swiper.setTransition(0);\n    transitionEmit({\n        swiper,\n        runCallbacks,\n        direction,\n        step: \"End\"\n    });\n}\nvar transition = {\n    setTransition,\n    transitionStart,\n    transitionEnd\n};\nfunction slideTo(index = 0, speed, runCallbacks = true, internal, initial) {\n    if (typeof index === \"string\") {\n        index = parseInt(index, 10);\n    }\n    const swiper = this;\n    let slideIndex = index;\n    if (slideIndex < 0) slideIndex = 0;\n    const { params, snapGrid, slidesGrid, previousIndex, activeIndex, rtlTranslate: rtl, wrapperEl, enabled } = swiper;\n    if (!enabled && !internal && !initial || swiper.destroyed || swiper.animating && params.preventInteractionOnTransition) {\n        return false;\n    }\n    if (typeof speed === \"undefined\") {\n        speed = swiper.params.speed;\n    }\n    const skip = Math.min(swiper.params.slidesPerGroupSkip, slideIndex);\n    let snapIndex = skip + Math.floor((slideIndex - skip) / swiper.params.slidesPerGroup);\n    if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;\n    const translate = -snapGrid[snapIndex];\n    // Normalize slideIndex\n    if (params.normalizeSlideIndex) {\n        for(let i = 0; i < slidesGrid.length; i += 1){\n            const normalizedTranslate = -Math.floor(translate * 100);\n            const normalizedGrid = Math.floor(slidesGrid[i] * 100);\n            const normalizedGridNext = Math.floor(slidesGrid[i + 1] * 100);\n            if (typeof slidesGrid[i + 1] !== \"undefined\") {\n                if (normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext - (normalizedGridNext - normalizedGrid) / 2) {\n                    slideIndex = i;\n                } else if (normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext) {\n                    slideIndex = i + 1;\n                }\n            } else if (normalizedTranslate >= normalizedGrid) {\n                slideIndex = i;\n            }\n        }\n    }\n    // Directions locks\n    if (swiper.initialized && slideIndex !== activeIndex) {\n        if (!swiper.allowSlideNext && (rtl ? translate > swiper.translate && translate > swiper.minTranslate() : translate < swiper.translate && translate < swiper.minTranslate())) {\n            return false;\n        }\n        if (!swiper.allowSlidePrev && translate > swiper.translate && translate > swiper.maxTranslate()) {\n            if ((activeIndex || 0) !== slideIndex) {\n                return false;\n            }\n        }\n    }\n    if (slideIndex !== (previousIndex || 0) && runCallbacks) {\n        swiper.emit(\"beforeSlideChangeStart\");\n    }\n    // Update progress\n    swiper.updateProgress(translate);\n    let direction;\n    if (slideIndex > activeIndex) direction = \"next\";\n    else if (slideIndex < activeIndex) direction = \"prev\";\n    else direction = \"reset\";\n    // initial virtual\n    const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n    const isInitialVirtual = isVirtual && initial;\n    // Update Index\n    if (!isInitialVirtual && (rtl && -translate === swiper.translate || !rtl && translate === swiper.translate)) {\n        swiper.updateActiveIndex(slideIndex);\n        // Update Height\n        if (params.autoHeight) {\n            swiper.updateAutoHeight();\n        }\n        swiper.updateSlidesClasses();\n        if (params.effect !== \"slide\") {\n            swiper.setTranslate(translate);\n        }\n        if (direction !== \"reset\") {\n            swiper.transitionStart(runCallbacks, direction);\n            swiper.transitionEnd(runCallbacks, direction);\n        }\n        return false;\n    }\n    if (params.cssMode) {\n        const isH = swiper.isHorizontal();\n        const t = rtl ? translate : -translate;\n        if (speed === 0) {\n            if (isVirtual) {\n                swiper.wrapperEl.style.scrollSnapType = \"none\";\n                swiper._immediateVirtual = true;\n            }\n            if (isVirtual && !swiper._cssModeVirtualInitialSet && swiper.params.initialSlide > 0) {\n                swiper._cssModeVirtualInitialSet = true;\n                requestAnimationFrame(()=>{\n                    wrapperEl[isH ? \"scrollLeft\" : \"scrollTop\"] = t;\n                });\n            } else {\n                wrapperEl[isH ? \"scrollLeft\" : \"scrollTop\"] = t;\n            }\n            if (isVirtual) {\n                requestAnimationFrame(()=>{\n                    swiper.wrapperEl.style.scrollSnapType = \"\";\n                    swiper._immediateVirtual = false;\n                });\n            }\n        } else {\n            if (!swiper.support.smoothScroll) {\n                (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.u)({\n                    swiper,\n                    targetPosition: t,\n                    side: isH ? \"left\" : \"top\"\n                });\n                return true;\n            }\n            wrapperEl.scrollTo({\n                [isH ? \"left\" : \"top\"]: t,\n                behavior: \"smooth\"\n            });\n        }\n        return true;\n    }\n    const browser = getBrowser();\n    const isSafari = browser.isSafari;\n    if (isVirtual && !initial && isSafari && swiper.isElement) {\n        swiper.virtual.update(false, false, slideIndex);\n    }\n    swiper.setTransition(speed);\n    swiper.setTranslate(translate);\n    swiper.updateActiveIndex(slideIndex);\n    swiper.updateSlidesClasses();\n    swiper.emit(\"beforeTransitionStart\", speed, internal);\n    swiper.transitionStart(runCallbacks, direction);\n    if (speed === 0) {\n        swiper.transitionEnd(runCallbacks, direction);\n    } else if (!swiper.animating) {\n        swiper.animating = true;\n        if (!swiper.onSlideToWrapperTransitionEnd) {\n            swiper.onSlideToWrapperTransitionEnd = function transitionEnd(e) {\n                if (!swiper || swiper.destroyed) return;\n                if (e.target !== this) return;\n                swiper.wrapperEl.removeEventListener(\"transitionend\", swiper.onSlideToWrapperTransitionEnd);\n                swiper.onSlideToWrapperTransitionEnd = null;\n                delete swiper.onSlideToWrapperTransitionEnd;\n                swiper.transitionEnd(runCallbacks, direction);\n            };\n        }\n        swiper.wrapperEl.addEventListener(\"transitionend\", swiper.onSlideToWrapperTransitionEnd);\n    }\n    return true;\n}\nfunction slideToLoop(index = 0, speed, runCallbacks = true, internal) {\n    if (typeof index === \"string\") {\n        const indexAsNumber = parseInt(index, 10);\n        index = indexAsNumber;\n    }\n    const swiper = this;\n    if (swiper.destroyed) return;\n    if (typeof speed === \"undefined\") {\n        speed = swiper.params.speed;\n    }\n    const gridEnabled = swiper.grid && swiper.params.grid && swiper.params.grid.rows > 1;\n    let newIndex = index;\n    if (swiper.params.loop) {\n        if (swiper.virtual && swiper.params.virtual.enabled) {\n            // eslint-disable-next-line\n            newIndex = newIndex + swiper.virtual.slidesBefore;\n        } else {\n            let targetSlideIndex;\n            if (gridEnabled) {\n                const slideIndex = newIndex * swiper.params.grid.rows;\n                targetSlideIndex = swiper.slides.find((slideEl)=>slideEl.getAttribute(\"data-swiper-slide-index\") * 1 === slideIndex).column;\n            } else {\n                targetSlideIndex = swiper.getSlideIndexByData(newIndex);\n            }\n            const cols = gridEnabled ? Math.ceil(swiper.slides.length / swiper.params.grid.rows) : swiper.slides.length;\n            const { centeredSlides, slidesOffsetBefore, slidesOffsetAfter } = swiper.params;\n            const bothDirections = centeredSlides || !!slidesOffsetBefore || !!slidesOffsetAfter;\n            let slidesPerView = swiper.params.slidesPerView;\n            if (slidesPerView === \"auto\") {\n                slidesPerView = swiper.slidesPerViewDynamic();\n            } else {\n                slidesPerView = Math.ceil(parseFloat(swiper.params.slidesPerView, 10));\n                if (bothDirections && slidesPerView % 2 === 0) {\n                    slidesPerView = slidesPerView + 1;\n                }\n            }\n            let needLoopFix = cols - targetSlideIndex < slidesPerView;\n            if (bothDirections) {\n                needLoopFix = needLoopFix || targetSlideIndex < Math.ceil(slidesPerView / 2);\n            }\n            if (internal && bothDirections && swiper.params.slidesPerView !== \"auto\" && !gridEnabled) {\n                needLoopFix = false;\n            }\n            if (needLoopFix) {\n                const direction = bothDirections ? targetSlideIndex < swiper.activeIndex ? \"prev\" : \"next\" : targetSlideIndex - swiper.activeIndex - 1 < swiper.params.slidesPerView ? \"next\" : \"prev\";\n                swiper.loopFix({\n                    direction,\n                    slideTo: true,\n                    activeSlideIndex: direction === \"next\" ? targetSlideIndex + 1 : targetSlideIndex - cols + 1,\n                    slideRealIndex: direction === \"next\" ? swiper.realIndex : undefined\n                });\n            }\n            if (gridEnabled) {\n                const slideIndex = newIndex * swiper.params.grid.rows;\n                newIndex = swiper.slides.find((slideEl)=>slideEl.getAttribute(\"data-swiper-slide-index\") * 1 === slideIndex).column;\n            } else {\n                newIndex = swiper.getSlideIndexByData(newIndex);\n            }\n        }\n    }\n    requestAnimationFrame(()=>{\n        swiper.slideTo(newIndex, speed, runCallbacks, internal);\n    });\n    return swiper;\n}\n/* eslint no-unused-vars: \"off\" */ function slideNext(speed, runCallbacks = true, internal) {\n    const swiper = this;\n    const { enabled, params, animating } = swiper;\n    if (!enabled || swiper.destroyed) return swiper;\n    if (typeof speed === \"undefined\") {\n        speed = swiper.params.speed;\n    }\n    let perGroup = params.slidesPerGroup;\n    if (params.slidesPerView === \"auto\" && params.slidesPerGroup === 1 && params.slidesPerGroupAuto) {\n        perGroup = Math.max(swiper.slidesPerViewDynamic(\"current\", true), 1);\n    }\n    const increment = swiper.activeIndex < params.slidesPerGroupSkip ? 1 : perGroup;\n    const isVirtual = swiper.virtual && params.virtual.enabled;\n    if (params.loop) {\n        if (animating && !isVirtual && params.loopPreventsSliding) return false;\n        swiper.loopFix({\n            direction: \"next\"\n        });\n        // eslint-disable-next-line\n        swiper._clientLeft = swiper.wrapperEl.clientLeft;\n        if (swiper.activeIndex === swiper.slides.length - 1 && params.cssMode) {\n            requestAnimationFrame(()=>{\n                swiper.slideTo(swiper.activeIndex + increment, speed, runCallbacks, internal);\n            });\n            return true;\n        }\n    }\n    if (params.rewind && swiper.isEnd) {\n        return swiper.slideTo(0, speed, runCallbacks, internal);\n    }\n    return swiper.slideTo(swiper.activeIndex + increment, speed, runCallbacks, internal);\n}\n/* eslint no-unused-vars: \"off\" */ function slidePrev(speed, runCallbacks = true, internal) {\n    const swiper = this;\n    const { params, snapGrid, slidesGrid, rtlTranslate, enabled, animating } = swiper;\n    if (!enabled || swiper.destroyed) return swiper;\n    if (typeof speed === \"undefined\") {\n        speed = swiper.params.speed;\n    }\n    const isVirtual = swiper.virtual && params.virtual.enabled;\n    if (params.loop) {\n        if (animating && !isVirtual && params.loopPreventsSliding) return false;\n        swiper.loopFix({\n            direction: \"prev\"\n        });\n        // eslint-disable-next-line\n        swiper._clientLeft = swiper.wrapperEl.clientLeft;\n    }\n    const translate = rtlTranslate ? swiper.translate : -swiper.translate;\n    function normalize(val) {\n        if (val < 0) return -Math.floor(Math.abs(val));\n        return Math.floor(val);\n    }\n    const normalizedTranslate = normalize(translate);\n    const normalizedSnapGrid = snapGrid.map((val)=>normalize(val));\n    const isFreeMode = params.freeMode && params.freeMode.enabled;\n    let prevSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate) - 1];\n    if (typeof prevSnap === \"undefined\" && (params.cssMode || isFreeMode)) {\n        let prevSnapIndex;\n        snapGrid.forEach((snap, snapIndex)=>{\n            if (normalizedTranslate >= snap) {\n                // prevSnap = snap;\n                prevSnapIndex = snapIndex;\n            }\n        });\n        if (typeof prevSnapIndex !== \"undefined\") {\n            prevSnap = isFreeMode ? snapGrid[prevSnapIndex] : snapGrid[prevSnapIndex > 0 ? prevSnapIndex - 1 : prevSnapIndex];\n        }\n    }\n    let prevIndex = 0;\n    if (typeof prevSnap !== \"undefined\") {\n        prevIndex = slidesGrid.indexOf(prevSnap);\n        if (prevIndex < 0) prevIndex = swiper.activeIndex - 1;\n        if (params.slidesPerView === \"auto\" && params.slidesPerGroup === 1 && params.slidesPerGroupAuto) {\n            prevIndex = prevIndex - swiper.slidesPerViewDynamic(\"previous\", true) + 1;\n            prevIndex = Math.max(prevIndex, 0);\n        }\n    }\n    if (params.rewind && swiper.isBeginning) {\n        const lastIndex = swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual ? swiper.virtual.slides.length - 1 : swiper.slides.length - 1;\n        return swiper.slideTo(lastIndex, speed, runCallbacks, internal);\n    } else if (params.loop && swiper.activeIndex === 0 && params.cssMode) {\n        requestAnimationFrame(()=>{\n            swiper.slideTo(prevIndex, speed, runCallbacks, internal);\n        });\n        return true;\n    }\n    return swiper.slideTo(prevIndex, speed, runCallbacks, internal);\n}\n/* eslint no-unused-vars: \"off\" */ function slideReset(speed, runCallbacks = true, internal) {\n    const swiper = this;\n    if (swiper.destroyed) return;\n    if (typeof speed === \"undefined\") {\n        speed = swiper.params.speed;\n    }\n    return swiper.slideTo(swiper.activeIndex, speed, runCallbacks, internal);\n}\n/* eslint no-unused-vars: \"off\" */ function slideToClosest(speed, runCallbacks = true, internal, threshold = 0.5) {\n    const swiper = this;\n    if (swiper.destroyed) return;\n    if (typeof speed === \"undefined\") {\n        speed = swiper.params.speed;\n    }\n    let index = swiper.activeIndex;\n    const skip = Math.min(swiper.params.slidesPerGroupSkip, index);\n    const snapIndex = skip + Math.floor((index - skip) / swiper.params.slidesPerGroup);\n    const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;\n    if (translate >= swiper.snapGrid[snapIndex]) {\n        // The current translate is on or after the current snap index, so the choice\n        // is between the current index and the one after it.\n        const currentSnap = swiper.snapGrid[snapIndex];\n        const nextSnap = swiper.snapGrid[snapIndex + 1];\n        if (translate - currentSnap > (nextSnap - currentSnap) * threshold) {\n            index += swiper.params.slidesPerGroup;\n        }\n    } else {\n        // The current translate is before the current snap index, so the choice\n        // is between the current index and the one before it.\n        const prevSnap = swiper.snapGrid[snapIndex - 1];\n        const currentSnap = swiper.snapGrid[snapIndex];\n        if (translate - prevSnap <= (currentSnap - prevSnap) * threshold) {\n            index -= swiper.params.slidesPerGroup;\n        }\n    }\n    index = Math.max(index, 0);\n    index = Math.min(index, swiper.slidesGrid.length - 1);\n    return swiper.slideTo(index, speed, runCallbacks, internal);\n}\nfunction slideToClickedSlide() {\n    const swiper = this;\n    if (swiper.destroyed) return;\n    const { params, slidesEl } = swiper;\n    const slidesPerView = params.slidesPerView === \"auto\" ? swiper.slidesPerViewDynamic() : params.slidesPerView;\n    let slideToIndex = swiper.getSlideIndexWhenGrid(swiper.clickedIndex);\n    let realIndex;\n    const slideSelector = swiper.isElement ? `swiper-slide` : `.${params.slideClass}`;\n    const isGrid = swiper.grid && swiper.params.grid && swiper.params.grid.rows > 1;\n    if (params.loop) {\n        if (swiper.animating) return;\n        realIndex = parseInt(swiper.clickedSlide.getAttribute(\"data-swiper-slide-index\"), 10);\n        if (params.centeredSlides) {\n            swiper.slideToLoop(realIndex);\n        } else if (slideToIndex > (isGrid ? (swiper.slides.length - slidesPerView) / 2 - (swiper.params.grid.rows - 1) : swiper.slides.length - slidesPerView)) {\n            swiper.loopFix();\n            slideToIndex = swiper.getSlideIndex((0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(slidesEl, `${slideSelector}[data-swiper-slide-index=\"${realIndex}\"]`)[0]);\n            (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(()=>{\n                swiper.slideTo(slideToIndex);\n            });\n        } else {\n            swiper.slideTo(slideToIndex);\n        }\n    } else {\n        swiper.slideTo(slideToIndex);\n    }\n}\nvar slide = {\n    slideTo,\n    slideToLoop,\n    slideNext,\n    slidePrev,\n    slideReset,\n    slideToClosest,\n    slideToClickedSlide\n};\nfunction loopCreate(slideRealIndex, initial) {\n    const swiper = this;\n    const { params, slidesEl } = swiper;\n    if (!params.loop || swiper.virtual && swiper.params.virtual.enabled) return;\n    const initSlides = ()=>{\n        const slides = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(slidesEl, `.${params.slideClass}, swiper-slide`);\n        slides.forEach((el, index)=>{\n            el.setAttribute(\"data-swiper-slide-index\", index);\n        });\n    };\n    const clearBlankSlides = ()=>{\n        const slides = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(slidesEl, `.${params.slideBlankClass}`);\n        slides.forEach((el)=>{\n            el.remove();\n        });\n        if (slides.length > 0) {\n            swiper.recalcSlides();\n            swiper.updateSlides();\n        }\n    };\n    const gridEnabled = swiper.grid && params.grid && params.grid.rows > 1;\n    if (params.loopAddBlankSlides && (params.slidesPerGroup > 1 || gridEnabled)) {\n        clearBlankSlides();\n    }\n    const slidesPerGroup = params.slidesPerGroup * (gridEnabled ? params.grid.rows : 1);\n    const shouldFillGroup = swiper.slides.length % slidesPerGroup !== 0;\n    const shouldFillGrid = gridEnabled && swiper.slides.length % params.grid.rows !== 0;\n    const addBlankSlides = (amountOfSlides)=>{\n        for(let i = 0; i < amountOfSlides; i += 1){\n            const slideEl = swiper.isElement ? (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(\"swiper-slide\", [\n                params.slideBlankClass\n            ]) : (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(\"div\", [\n                params.slideClass,\n                params.slideBlankClass\n            ]);\n            swiper.slidesEl.append(slideEl);\n        }\n    };\n    if (shouldFillGroup) {\n        if (params.loopAddBlankSlides) {\n            const slidesToAdd = slidesPerGroup - swiper.slides.length % slidesPerGroup;\n            addBlankSlides(slidesToAdd);\n            swiper.recalcSlides();\n            swiper.updateSlides();\n        } else {\n            (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.v)(\"Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)\");\n        }\n        initSlides();\n    } else if (shouldFillGrid) {\n        if (params.loopAddBlankSlides) {\n            const slidesToAdd = params.grid.rows - swiper.slides.length % params.grid.rows;\n            addBlankSlides(slidesToAdd);\n            swiper.recalcSlides();\n            swiper.updateSlides();\n        } else {\n            (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.v)(\"Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)\");\n        }\n        initSlides();\n    } else {\n        initSlides();\n    }\n    const bothDirections = params.centeredSlides || !!params.slidesOffsetBefore || !!params.slidesOffsetAfter;\n    swiper.loopFix({\n        slideRealIndex,\n        direction: bothDirections ? undefined : \"next\",\n        initial\n    });\n}\nfunction loopFix({ slideRealIndex, slideTo = true, direction, setTranslate, activeSlideIndex, initial, byController, byMousewheel } = {}) {\n    const swiper = this;\n    if (!swiper.params.loop) return;\n    swiper.emit(\"beforeLoopFix\");\n    const { slides, allowSlidePrev, allowSlideNext, slidesEl, params } = swiper;\n    const { centeredSlides, slidesOffsetBefore, slidesOffsetAfter, initialSlide } = params;\n    const bothDirections = centeredSlides || !!slidesOffsetBefore || !!slidesOffsetAfter;\n    swiper.allowSlidePrev = true;\n    swiper.allowSlideNext = true;\n    if (swiper.virtual && params.virtual.enabled) {\n        if (slideTo) {\n            if (!bothDirections && swiper.snapIndex === 0) {\n                swiper.slideTo(swiper.virtual.slides.length, 0, false, true);\n            } else if (bothDirections && swiper.snapIndex < params.slidesPerView) {\n                swiper.slideTo(swiper.virtual.slides.length + swiper.snapIndex, 0, false, true);\n            } else if (swiper.snapIndex === swiper.snapGrid.length - 1) {\n                swiper.slideTo(swiper.virtual.slidesBefore, 0, false, true);\n            }\n        }\n        swiper.allowSlidePrev = allowSlidePrev;\n        swiper.allowSlideNext = allowSlideNext;\n        swiper.emit(\"loopFix\");\n        return;\n    }\n    let slidesPerView = params.slidesPerView;\n    if (slidesPerView === \"auto\") {\n        slidesPerView = swiper.slidesPerViewDynamic();\n    } else {\n        slidesPerView = Math.ceil(parseFloat(params.slidesPerView, 10));\n        if (bothDirections && slidesPerView % 2 === 0) {\n            slidesPerView = slidesPerView + 1;\n        }\n    }\n    const slidesPerGroup = params.slidesPerGroupAuto ? slidesPerView : params.slidesPerGroup;\n    let loopedSlides = bothDirections ? Math.max(slidesPerGroup, Math.ceil(slidesPerView / 2)) : slidesPerGroup;\n    if (loopedSlides % slidesPerGroup !== 0) {\n        loopedSlides += slidesPerGroup - loopedSlides % slidesPerGroup;\n    }\n    loopedSlides += params.loopAdditionalSlides;\n    swiper.loopedSlides = loopedSlides;\n    const gridEnabled = swiper.grid && params.grid && params.grid.rows > 1;\n    if (slides.length < slidesPerView + loopedSlides || swiper.params.effect === \"cards\" && slides.length < slidesPerView + loopedSlides * 2) {\n        (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.v)(\"Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled or not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters\");\n    } else if (gridEnabled && params.grid.fill === \"row\") {\n        (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.v)(\"Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`\");\n    }\n    const prependSlidesIndexes = [];\n    const appendSlidesIndexes = [];\n    const cols = gridEnabled ? Math.ceil(slides.length / params.grid.rows) : slides.length;\n    const isInitialOverflow = initial && cols - initialSlide < slidesPerView && !bothDirections;\n    let activeIndex = isInitialOverflow ? initialSlide : swiper.activeIndex;\n    if (typeof activeSlideIndex === \"undefined\") {\n        activeSlideIndex = swiper.getSlideIndex(slides.find((el)=>el.classList.contains(params.slideActiveClass)));\n    } else {\n        activeIndex = activeSlideIndex;\n    }\n    const isNext = direction === \"next\" || !direction;\n    const isPrev = direction === \"prev\" || !direction;\n    let slidesPrepended = 0;\n    let slidesAppended = 0;\n    const activeColIndex = gridEnabled ? slides[activeSlideIndex].column : activeSlideIndex;\n    const activeColIndexWithShift = activeColIndex + (bothDirections && typeof setTranslate === \"undefined\" ? -slidesPerView / 2 + 0.5 : 0);\n    // prepend last slides before start\n    if (activeColIndexWithShift < loopedSlides) {\n        slidesPrepended = Math.max(loopedSlides - activeColIndexWithShift, slidesPerGroup);\n        for(let i = 0; i < loopedSlides - activeColIndexWithShift; i += 1){\n            const index = i - Math.floor(i / cols) * cols;\n            if (gridEnabled) {\n                const colIndexToPrepend = cols - index - 1;\n                for(let i = slides.length - 1; i >= 0; i -= 1){\n                    if (slides[i].column === colIndexToPrepend) prependSlidesIndexes.push(i);\n                }\n            // slides.forEach((slide, slideIndex) => {\n            //   if (slide.column === colIndexToPrepend) prependSlidesIndexes.push(slideIndex);\n            // });\n            } else {\n                prependSlidesIndexes.push(cols - index - 1);\n            }\n        }\n    } else if (activeColIndexWithShift + slidesPerView > cols - loopedSlides) {\n        slidesAppended = Math.max(activeColIndexWithShift - (cols - loopedSlides * 2), slidesPerGroup);\n        if (isInitialOverflow) {\n            slidesAppended = Math.max(slidesAppended, slidesPerView - cols + initialSlide + 1);\n        }\n        for(let i = 0; i < slidesAppended; i += 1){\n            const index = i - Math.floor(i / cols) * cols;\n            if (gridEnabled) {\n                slides.forEach((slide, slideIndex)=>{\n                    if (slide.column === index) appendSlidesIndexes.push(slideIndex);\n                });\n            } else {\n                appendSlidesIndexes.push(index);\n            }\n        }\n    }\n    swiper.__preventObserver__ = true;\n    requestAnimationFrame(()=>{\n        swiper.__preventObserver__ = false;\n    });\n    if (swiper.params.effect === \"cards\" && slides.length < slidesPerView + loopedSlides * 2) {\n        if (appendSlidesIndexes.includes(activeSlideIndex)) {\n            appendSlidesIndexes.splice(appendSlidesIndexes.indexOf(activeSlideIndex), 1);\n        }\n        if (prependSlidesIndexes.includes(activeSlideIndex)) {\n            prependSlidesIndexes.splice(prependSlidesIndexes.indexOf(activeSlideIndex), 1);\n        }\n    }\n    if (isPrev) {\n        prependSlidesIndexes.forEach((index)=>{\n            slides[index].swiperLoopMoveDOM = true;\n            slidesEl.prepend(slides[index]);\n            slides[index].swiperLoopMoveDOM = false;\n        });\n    }\n    if (isNext) {\n        appendSlidesIndexes.forEach((index)=>{\n            slides[index].swiperLoopMoveDOM = true;\n            slidesEl.append(slides[index]);\n            slides[index].swiperLoopMoveDOM = false;\n        });\n    }\n    swiper.recalcSlides();\n    if (params.slidesPerView === \"auto\") {\n        swiper.updateSlides();\n    } else if (gridEnabled && (prependSlidesIndexes.length > 0 && isPrev || appendSlidesIndexes.length > 0 && isNext)) {\n        swiper.slides.forEach((slide, slideIndex)=>{\n            swiper.grid.updateSlide(slideIndex, slide, swiper.slides);\n        });\n    }\n    if (params.watchSlidesProgress) {\n        swiper.updateSlidesOffset();\n    }\n    if (slideTo) {\n        if (prependSlidesIndexes.length > 0 && isPrev) {\n            if (typeof slideRealIndex === \"undefined\") {\n                const currentSlideTranslate = swiper.slidesGrid[activeIndex];\n                const newSlideTranslate = swiper.slidesGrid[activeIndex + slidesPrepended];\n                const diff = newSlideTranslate - currentSlideTranslate;\n                if (byMousewheel) {\n                    swiper.setTranslate(swiper.translate - diff);\n                } else {\n                    swiper.slideTo(activeIndex + Math.ceil(slidesPrepended), 0, false, true);\n                    if (setTranslate) {\n                        swiper.touchEventsData.startTranslate = swiper.touchEventsData.startTranslate - diff;\n                        swiper.touchEventsData.currentTranslate = swiper.touchEventsData.currentTranslate - diff;\n                    }\n                }\n            } else {\n                if (setTranslate) {\n                    const shift = gridEnabled ? prependSlidesIndexes.length / params.grid.rows : prependSlidesIndexes.length;\n                    swiper.slideTo(swiper.activeIndex + shift, 0, false, true);\n                    swiper.touchEventsData.currentTranslate = swiper.translate;\n                }\n            }\n        } else if (appendSlidesIndexes.length > 0 && isNext) {\n            if (typeof slideRealIndex === \"undefined\") {\n                const currentSlideTranslate = swiper.slidesGrid[activeIndex];\n                const newSlideTranslate = swiper.slidesGrid[activeIndex - slidesAppended];\n                const diff = newSlideTranslate - currentSlideTranslate;\n                if (byMousewheel) {\n                    swiper.setTranslate(swiper.translate - diff);\n                } else {\n                    swiper.slideTo(activeIndex - slidesAppended, 0, false, true);\n                    if (setTranslate) {\n                        swiper.touchEventsData.startTranslate = swiper.touchEventsData.startTranslate - diff;\n                        swiper.touchEventsData.currentTranslate = swiper.touchEventsData.currentTranslate - diff;\n                    }\n                }\n            } else {\n                const shift = gridEnabled ? appendSlidesIndexes.length / params.grid.rows : appendSlidesIndexes.length;\n                swiper.slideTo(swiper.activeIndex - shift, 0, false, true);\n            }\n        }\n    }\n    swiper.allowSlidePrev = allowSlidePrev;\n    swiper.allowSlideNext = allowSlideNext;\n    if (swiper.controller && swiper.controller.control && !byController) {\n        const loopParams = {\n            slideRealIndex,\n            direction,\n            setTranslate,\n            activeSlideIndex,\n            byController: true\n        };\n        if (Array.isArray(swiper.controller.control)) {\n            swiper.controller.control.forEach((c)=>{\n                if (!c.destroyed && c.params.loop) c.loopFix({\n                    ...loopParams,\n                    slideTo: c.params.slidesPerView === params.slidesPerView ? slideTo : false\n                });\n            });\n        } else if (swiper.controller.control instanceof swiper.constructor && swiper.controller.control.params.loop) {\n            swiper.controller.control.loopFix({\n                ...loopParams,\n                slideTo: swiper.controller.control.params.slidesPerView === params.slidesPerView ? slideTo : false\n            });\n        }\n    }\n    swiper.emit(\"loopFix\");\n}\nfunction loopDestroy() {\n    const swiper = this;\n    const { params, slidesEl } = swiper;\n    if (!params.loop || !slidesEl || swiper.virtual && swiper.params.virtual.enabled) return;\n    swiper.recalcSlides();\n    const newSlidesOrder = [];\n    swiper.slides.forEach((slideEl)=>{\n        const index = typeof slideEl.swiperSlideIndex === \"undefined\" ? slideEl.getAttribute(\"data-swiper-slide-index\") * 1 : slideEl.swiperSlideIndex;\n        newSlidesOrder[index] = slideEl;\n    });\n    swiper.slides.forEach((slideEl)=>{\n        slideEl.removeAttribute(\"data-swiper-slide-index\");\n    });\n    newSlidesOrder.forEach((slideEl)=>{\n        slidesEl.append(slideEl);\n    });\n    swiper.recalcSlides();\n    swiper.slideTo(swiper.realIndex, 0);\n}\nvar loop = {\n    loopCreate,\n    loopFix,\n    loopDestroy\n};\nfunction setGrabCursor(moving) {\n    const swiper = this;\n    if (!swiper.params.simulateTouch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) return;\n    const el = swiper.params.touchEventsTarget === \"container\" ? swiper.el : swiper.wrapperEl;\n    if (swiper.isElement) {\n        swiper.__preventObserver__ = true;\n    }\n    el.style.cursor = \"move\";\n    el.style.cursor = moving ? \"grabbing\" : \"grab\";\n    if (swiper.isElement) {\n        requestAnimationFrame(()=>{\n            swiper.__preventObserver__ = false;\n        });\n    }\n}\nfunction unsetGrabCursor() {\n    const swiper = this;\n    if (swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) {\n        return;\n    }\n    if (swiper.isElement) {\n        swiper.__preventObserver__ = true;\n    }\n    swiper[swiper.params.touchEventsTarget === \"container\" ? \"el\" : \"wrapperEl\"].style.cursor = \"\";\n    if (swiper.isElement) {\n        requestAnimationFrame(()=>{\n            swiper.__preventObserver__ = false;\n        });\n    }\n}\nvar grabCursor = {\n    setGrabCursor,\n    unsetGrabCursor\n};\n// Modified from https://stackoverflow.com/questions/54520554/custom-element-getrootnode-closest-function-crossing-multiple-parent-shadowd\nfunction closestElement(selector, base = this) {\n    function __closestFrom(el) {\n        if (!el || el === (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)() || el === (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)()) return null;\n        if (el.assignedSlot) el = el.assignedSlot;\n        const found = el.closest(selector);\n        if (!found && !el.getRootNode) {\n            return null;\n        }\n        return found || __closestFrom(el.getRootNode().host);\n    }\n    return __closestFrom(base);\n}\nfunction preventEdgeSwipe(swiper, event, startX) {\n    const window1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    const { params } = swiper;\n    const edgeSwipeDetection = params.edgeSwipeDetection;\n    const edgeSwipeThreshold = params.edgeSwipeThreshold;\n    if (edgeSwipeDetection && (startX <= edgeSwipeThreshold || startX >= window1.innerWidth - edgeSwipeThreshold)) {\n        if (edgeSwipeDetection === \"prevent\") {\n            event.preventDefault();\n            return true;\n        }\n        return false;\n    }\n    return true;\n}\nfunction onTouchStart(event) {\n    const swiper = this;\n    const document1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n    let e = event;\n    if (e.originalEvent) e = e.originalEvent;\n    const data = swiper.touchEventsData;\n    if (e.type === \"pointerdown\") {\n        if (data.pointerId !== null && data.pointerId !== e.pointerId) {\n            return;\n        }\n        data.pointerId = e.pointerId;\n    } else if (e.type === \"touchstart\" && e.targetTouches.length === 1) {\n        data.touchId = e.targetTouches[0].identifier;\n    }\n    if (e.type === \"touchstart\") {\n        // don't proceed touch event\n        preventEdgeSwipe(swiper, e, e.targetTouches[0].pageX);\n        return;\n    }\n    const { params, touches, enabled } = swiper;\n    if (!enabled) return;\n    if (!params.simulateTouch && e.pointerType === \"mouse\") return;\n    if (swiper.animating && params.preventInteractionOnTransition) {\n        return;\n    }\n    if (!swiper.animating && params.cssMode && params.loop) {\n        swiper.loopFix();\n    }\n    let targetEl = e.target;\n    if (params.touchEventsTarget === \"wrapper\") {\n        if (!(0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.w)(targetEl, swiper.wrapperEl)) return;\n    }\n    if (\"which\" in e && e.which === 3) return;\n    if (\"button\" in e && e.button > 0) return;\n    if (data.isTouched && data.isMoved) return;\n    // change target el for shadow root component\n    const swipingClassHasValue = !!params.noSwipingClass && params.noSwipingClass !== \"\";\n    // eslint-disable-next-line\n    const eventPath = e.composedPath ? e.composedPath() : e.path;\n    if (swipingClassHasValue && e.target && e.target.shadowRoot && eventPath) {\n        targetEl = eventPath[0];\n    }\n    const noSwipingSelector = params.noSwipingSelector ? params.noSwipingSelector : `.${params.noSwipingClass}`;\n    const isTargetShadow = !!(e.target && e.target.shadowRoot);\n    // use closestElement for shadow root element to get the actual closest for nested shadow root element\n    if (params.noSwiping && (isTargetShadow ? closestElement(noSwipingSelector, targetEl) : targetEl.closest(noSwipingSelector))) {\n        swiper.allowClick = true;\n        return;\n    }\n    if (params.swipeHandler) {\n        if (!targetEl.closest(params.swipeHandler)) return;\n    }\n    touches.currentX = e.pageX;\n    touches.currentY = e.pageY;\n    const startX = touches.currentX;\n    const startY = touches.currentY;\n    // Do NOT start if iOS edge swipe is detected. Otherwise iOS app cannot swipe-to-go-back anymore\n    if (!preventEdgeSwipe(swiper, e, startX)) {\n        return;\n    }\n    Object.assign(data, {\n        isTouched: true,\n        isMoved: false,\n        allowTouchCallbacks: true,\n        isScrolling: undefined,\n        startMoving: undefined\n    });\n    touches.startX = startX;\n    touches.startY = startY;\n    data.touchStartTime = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.h)();\n    swiper.allowClick = true;\n    swiper.updateSize();\n    swiper.swipeDirection = undefined;\n    if (params.threshold > 0) data.allowThresholdMove = false;\n    let preventDefault = true;\n    if (targetEl.matches(data.focusableElements)) {\n        preventDefault = false;\n        if (targetEl.nodeName === \"SELECT\") {\n            data.isTouched = false;\n        }\n    }\n    if (document1.activeElement && document1.activeElement.matches(data.focusableElements) && document1.activeElement !== targetEl && (e.pointerType === \"mouse\" || e.pointerType !== \"mouse\" && !targetEl.matches(data.focusableElements))) {\n        document1.activeElement.blur();\n    }\n    const shouldPreventDefault = preventDefault && swiper.allowTouchMove && params.touchStartPreventDefault;\n    if ((params.touchStartForcePreventDefault || shouldPreventDefault) && !targetEl.isContentEditable) {\n        e.preventDefault();\n    }\n    if (params.freeMode && params.freeMode.enabled && swiper.freeMode && swiper.animating && !params.cssMode) {\n        swiper.freeMode.onTouchStart();\n    }\n    swiper.emit(\"touchStart\", e);\n}\nfunction onTouchMove(event) {\n    const document1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n    const swiper = this;\n    const data = swiper.touchEventsData;\n    const { params, touches, rtlTranslate: rtl, enabled } = swiper;\n    if (!enabled) return;\n    if (!params.simulateTouch && event.pointerType === \"mouse\") return;\n    let e = event;\n    if (e.originalEvent) e = e.originalEvent;\n    if (e.type === \"pointermove\") {\n        if (data.touchId !== null) return; // return from pointer if we use touch\n        const id = e.pointerId;\n        if (id !== data.pointerId) return;\n    }\n    let targetTouch;\n    if (e.type === \"touchmove\") {\n        targetTouch = [\n            ...e.changedTouches\n        ].find((t)=>t.identifier === data.touchId);\n        if (!targetTouch || targetTouch.identifier !== data.touchId) return;\n    } else {\n        targetTouch = e;\n    }\n    if (!data.isTouched) {\n        if (data.startMoving && data.isScrolling) {\n            swiper.emit(\"touchMoveOpposite\", e);\n        }\n        return;\n    }\n    const pageX = targetTouch.pageX;\n    const pageY = targetTouch.pageY;\n    if (e.preventedByNestedSwiper) {\n        touches.startX = pageX;\n        touches.startY = pageY;\n        return;\n    }\n    if (!swiper.allowTouchMove) {\n        if (!e.target.matches(data.focusableElements)) {\n            swiper.allowClick = false;\n        }\n        if (data.isTouched) {\n            Object.assign(touches, {\n                startX: pageX,\n                startY: pageY,\n                currentX: pageX,\n                currentY: pageY\n            });\n            data.touchStartTime = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.h)();\n        }\n        return;\n    }\n    if (params.touchReleaseOnEdges && !params.loop) {\n        if (swiper.isVertical()) {\n            // Vertical\n            if (pageY < touches.startY && swiper.translate <= swiper.maxTranslate() || pageY > touches.startY && swiper.translate >= swiper.minTranslate()) {\n                data.isTouched = false;\n                data.isMoved = false;\n                return;\n            }\n        } else if (rtl && (pageX > touches.startX && -swiper.translate <= swiper.maxTranslate() || pageX < touches.startX && -swiper.translate >= swiper.minTranslate())) {\n            return;\n        } else if (!rtl && (pageX < touches.startX && swiper.translate <= swiper.maxTranslate() || pageX > touches.startX && swiper.translate >= swiper.minTranslate())) {\n            return;\n        }\n    }\n    if (document1.activeElement && document1.activeElement.matches(data.focusableElements) && document1.activeElement !== e.target && e.pointerType !== \"mouse\") {\n        document1.activeElement.blur();\n    }\n    if (document1.activeElement) {\n        if (e.target === document1.activeElement && e.target.matches(data.focusableElements)) {\n            data.isMoved = true;\n            swiper.allowClick = false;\n            return;\n        }\n    }\n    if (data.allowTouchCallbacks) {\n        swiper.emit(\"touchMove\", e);\n    }\n    touches.previousX = touches.currentX;\n    touches.previousY = touches.currentY;\n    touches.currentX = pageX;\n    touches.currentY = pageY;\n    const diffX = touches.currentX - touches.startX;\n    const diffY = touches.currentY - touches.startY;\n    if (swiper.params.threshold && Math.sqrt(diffX ** 2 + diffY ** 2) < swiper.params.threshold) return;\n    if (typeof data.isScrolling === \"undefined\") {\n        let touchAngle;\n        if (swiper.isHorizontal() && touches.currentY === touches.startY || swiper.isVertical() && touches.currentX === touches.startX) {\n            data.isScrolling = false;\n        } else {\n            // eslint-disable-next-line\n            if (diffX * diffX + diffY * diffY >= 25) {\n                touchAngle = Math.atan2(Math.abs(diffY), Math.abs(diffX)) * 180 / Math.PI;\n                data.isScrolling = swiper.isHorizontal() ? touchAngle > params.touchAngle : 90 - touchAngle > params.touchAngle;\n            }\n        }\n    }\n    if (data.isScrolling) {\n        swiper.emit(\"touchMoveOpposite\", e);\n    }\n    if (typeof data.startMoving === \"undefined\") {\n        if (touches.currentX !== touches.startX || touches.currentY !== touches.startY) {\n            data.startMoving = true;\n        }\n    }\n    if (data.isScrolling || e.type === \"touchmove\" && data.preventTouchMoveFromPointerMove) {\n        data.isTouched = false;\n        return;\n    }\n    if (!data.startMoving) {\n        return;\n    }\n    swiper.allowClick = false;\n    if (!params.cssMode && e.cancelable) {\n        e.preventDefault();\n    }\n    if (params.touchMoveStopPropagation && !params.nested) {\n        e.stopPropagation();\n    }\n    let diff = swiper.isHorizontal() ? diffX : diffY;\n    let touchesDiff = swiper.isHorizontal() ? touches.currentX - touches.previousX : touches.currentY - touches.previousY;\n    if (params.oneWayMovement) {\n        diff = Math.abs(diff) * (rtl ? 1 : -1);\n        touchesDiff = Math.abs(touchesDiff) * (rtl ? 1 : -1);\n    }\n    touches.diff = diff;\n    diff *= params.touchRatio;\n    if (rtl) {\n        diff = -diff;\n        touchesDiff = -touchesDiff;\n    }\n    const prevTouchesDirection = swiper.touchesDirection;\n    swiper.swipeDirection = diff > 0 ? \"prev\" : \"next\";\n    swiper.touchesDirection = touchesDiff > 0 ? \"prev\" : \"next\";\n    const isLoop = swiper.params.loop && !params.cssMode;\n    const allowLoopFix = swiper.touchesDirection === \"next\" && swiper.allowSlideNext || swiper.touchesDirection === \"prev\" && swiper.allowSlidePrev;\n    if (!data.isMoved) {\n        if (isLoop && allowLoopFix) {\n            swiper.loopFix({\n                direction: swiper.swipeDirection\n            });\n        }\n        data.startTranslate = swiper.getTranslate();\n        swiper.setTransition(0);\n        if (swiper.animating) {\n            const evt = new window.CustomEvent(\"transitionend\", {\n                bubbles: true,\n                cancelable: true,\n                detail: {\n                    bySwiperTouchMove: true\n                }\n            });\n            swiper.wrapperEl.dispatchEvent(evt);\n        }\n        data.allowMomentumBounce = false;\n        // Grab Cursor\n        if (params.grabCursor && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {\n            swiper.setGrabCursor(true);\n        }\n        swiper.emit(\"sliderFirstMove\", e);\n    }\n    let loopFixed;\n    new Date().getTime();\n    if (params._loopSwapReset !== false && data.isMoved && data.allowThresholdMove && prevTouchesDirection !== swiper.touchesDirection && isLoop && allowLoopFix && Math.abs(diff) >= 1) {\n        Object.assign(touches, {\n            startX: pageX,\n            startY: pageY,\n            currentX: pageX,\n            currentY: pageY,\n            startTranslate: data.currentTranslate\n        });\n        data.loopSwapReset = true;\n        data.startTranslate = data.currentTranslate;\n        return;\n    }\n    swiper.emit(\"sliderMove\", e);\n    data.isMoved = true;\n    data.currentTranslate = diff + data.startTranslate;\n    let disableParentSwiper = true;\n    let resistanceRatio = params.resistanceRatio;\n    if (params.touchReleaseOnEdges) {\n        resistanceRatio = 0;\n    }\n    if (diff > 0) {\n        if (isLoop && allowLoopFix && !loopFixed && data.allowThresholdMove && data.currentTranslate > (params.centeredSlides ? swiper.minTranslate() - swiper.slidesSizesGrid[swiper.activeIndex + 1] - (params.slidesPerView !== \"auto\" && swiper.slides.length - params.slidesPerView >= 2 ? swiper.slidesSizesGrid[swiper.activeIndex + 1] + swiper.params.spaceBetween : 0) - swiper.params.spaceBetween : swiper.minTranslate())) {\n            swiper.loopFix({\n                direction: \"prev\",\n                setTranslate: true,\n                activeSlideIndex: 0\n            });\n        }\n        if (data.currentTranslate > swiper.minTranslate()) {\n            disableParentSwiper = false;\n            if (params.resistance) {\n                data.currentTranslate = swiper.minTranslate() - 1 + (-swiper.minTranslate() + data.startTranslate + diff) ** resistanceRatio;\n            }\n        }\n    } else if (diff < 0) {\n        if (isLoop && allowLoopFix && !loopFixed && data.allowThresholdMove && data.currentTranslate < (params.centeredSlides ? swiper.maxTranslate() + swiper.slidesSizesGrid[swiper.slidesSizesGrid.length - 1] + swiper.params.spaceBetween + (params.slidesPerView !== \"auto\" && swiper.slides.length - params.slidesPerView >= 2 ? swiper.slidesSizesGrid[swiper.slidesSizesGrid.length - 1] + swiper.params.spaceBetween : 0) : swiper.maxTranslate())) {\n            swiper.loopFix({\n                direction: \"next\",\n                setTranslate: true,\n                activeSlideIndex: swiper.slides.length - (params.slidesPerView === \"auto\" ? swiper.slidesPerViewDynamic() : Math.ceil(parseFloat(params.slidesPerView, 10)))\n            });\n        }\n        if (data.currentTranslate < swiper.maxTranslate()) {\n            disableParentSwiper = false;\n            if (params.resistance) {\n                data.currentTranslate = swiper.maxTranslate() + 1 - (swiper.maxTranslate() - data.startTranslate - diff) ** resistanceRatio;\n            }\n        }\n    }\n    if (disableParentSwiper) {\n        e.preventedByNestedSwiper = true;\n    }\n    // Directions locks\n    if (!swiper.allowSlideNext && swiper.swipeDirection === \"next\" && data.currentTranslate < data.startTranslate) {\n        data.currentTranslate = data.startTranslate;\n    }\n    if (!swiper.allowSlidePrev && swiper.swipeDirection === \"prev\" && data.currentTranslate > data.startTranslate) {\n        data.currentTranslate = data.startTranslate;\n    }\n    if (!swiper.allowSlidePrev && !swiper.allowSlideNext) {\n        data.currentTranslate = data.startTranslate;\n    }\n    // Threshold\n    if (params.threshold > 0) {\n        if (Math.abs(diff) > params.threshold || data.allowThresholdMove) {\n            if (!data.allowThresholdMove) {\n                data.allowThresholdMove = true;\n                touches.startX = touches.currentX;\n                touches.startY = touches.currentY;\n                data.currentTranslate = data.startTranslate;\n                touches.diff = swiper.isHorizontal() ? touches.currentX - touches.startX : touches.currentY - touches.startY;\n                return;\n            }\n        } else {\n            data.currentTranslate = data.startTranslate;\n            return;\n        }\n    }\n    if (!params.followFinger || params.cssMode) return;\n    // Update active index in free mode\n    if (params.freeMode && params.freeMode.enabled && swiper.freeMode || params.watchSlidesProgress) {\n        swiper.updateActiveIndex();\n        swiper.updateSlidesClasses();\n    }\n    if (params.freeMode && params.freeMode.enabled && swiper.freeMode) {\n        swiper.freeMode.onTouchMove();\n    }\n    // Update progress\n    swiper.updateProgress(data.currentTranslate);\n    // Update translate\n    swiper.setTranslate(data.currentTranslate);\n}\nfunction onTouchEnd(event) {\n    const swiper = this;\n    const data = swiper.touchEventsData;\n    let e = event;\n    if (e.originalEvent) e = e.originalEvent;\n    let targetTouch;\n    const isTouchEvent = e.type === \"touchend\" || e.type === \"touchcancel\";\n    if (!isTouchEvent) {\n        if (data.touchId !== null) return; // return from pointer if we use touch\n        if (e.pointerId !== data.pointerId) return;\n        targetTouch = e;\n    } else {\n        targetTouch = [\n            ...e.changedTouches\n        ].find((t)=>t.identifier === data.touchId);\n        if (!targetTouch || targetTouch.identifier !== data.touchId) return;\n    }\n    if ([\n        \"pointercancel\",\n        \"pointerout\",\n        \"pointerleave\",\n        \"contextmenu\"\n    ].includes(e.type)) {\n        const proceed = [\n            \"pointercancel\",\n            \"contextmenu\"\n        ].includes(e.type) && (swiper.browser.isSafari || swiper.browser.isWebView);\n        if (!proceed) {\n            return;\n        }\n    }\n    data.pointerId = null;\n    data.touchId = null;\n    const { params, touches, rtlTranslate: rtl, slidesGrid, enabled } = swiper;\n    if (!enabled) return;\n    if (!params.simulateTouch && e.pointerType === \"mouse\") return;\n    if (data.allowTouchCallbacks) {\n        swiper.emit(\"touchEnd\", e);\n    }\n    data.allowTouchCallbacks = false;\n    if (!data.isTouched) {\n        if (data.isMoved && params.grabCursor) {\n            swiper.setGrabCursor(false);\n        }\n        data.isMoved = false;\n        data.startMoving = false;\n        return;\n    }\n    // Return Grab Cursor\n    if (params.grabCursor && data.isMoved && data.isTouched && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {\n        swiper.setGrabCursor(false);\n    }\n    // Time diff\n    const touchEndTime = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.h)();\n    const timeDiff = touchEndTime - data.touchStartTime;\n    // Tap, doubleTap, Click\n    if (swiper.allowClick) {\n        const pathTree = e.path || e.composedPath && e.composedPath();\n        swiper.updateClickedSlide(pathTree && pathTree[0] || e.target, pathTree);\n        swiper.emit(\"tap click\", e);\n        if (timeDiff < 300 && touchEndTime - data.lastClickTime < 300) {\n            swiper.emit(\"doubleTap doubleClick\", e);\n        }\n    }\n    data.lastClickTime = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.h)();\n    (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(()=>{\n        if (!swiper.destroyed) swiper.allowClick = true;\n    });\n    if (!data.isTouched || !data.isMoved || !swiper.swipeDirection || touches.diff === 0 && !data.loopSwapReset || data.currentTranslate === data.startTranslate && !data.loopSwapReset) {\n        data.isTouched = false;\n        data.isMoved = false;\n        data.startMoving = false;\n        return;\n    }\n    data.isTouched = false;\n    data.isMoved = false;\n    data.startMoving = false;\n    let currentPos;\n    if (params.followFinger) {\n        currentPos = rtl ? swiper.translate : -swiper.translate;\n    } else {\n        currentPos = -data.currentTranslate;\n    }\n    if (params.cssMode) {\n        return;\n    }\n    if (params.freeMode && params.freeMode.enabled) {\n        swiper.freeMode.onTouchEnd({\n            currentPos\n        });\n        return;\n    }\n    // Find current slide\n    const swipeToLast = currentPos >= -swiper.maxTranslate() && !swiper.params.loop;\n    let stopIndex = 0;\n    let groupSize = swiper.slidesSizesGrid[0];\n    for(let i = 0; i < slidesGrid.length; i += i < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup){\n        const increment = i < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;\n        if (typeof slidesGrid[i + increment] !== \"undefined\") {\n            if (swipeToLast || currentPos >= slidesGrid[i] && currentPos < slidesGrid[i + increment]) {\n                stopIndex = i;\n                groupSize = slidesGrid[i + increment] - slidesGrid[i];\n            }\n        } else if (swipeToLast || currentPos >= slidesGrid[i]) {\n            stopIndex = i;\n            groupSize = slidesGrid[slidesGrid.length - 1] - slidesGrid[slidesGrid.length - 2];\n        }\n    }\n    let rewindFirstIndex = null;\n    let rewindLastIndex = null;\n    if (params.rewind) {\n        if (swiper.isBeginning) {\n            rewindLastIndex = params.virtual && params.virtual.enabled && swiper.virtual ? swiper.virtual.slides.length - 1 : swiper.slides.length - 1;\n        } else if (swiper.isEnd) {\n            rewindFirstIndex = 0;\n        }\n    }\n    // Find current slide size\n    const ratio = (currentPos - slidesGrid[stopIndex]) / groupSize;\n    const increment = stopIndex < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;\n    if (timeDiff > params.longSwipesMs) {\n        // Long touches\n        if (!params.longSwipes) {\n            swiper.slideTo(swiper.activeIndex);\n            return;\n        }\n        if (swiper.swipeDirection === \"next\") {\n            if (ratio >= params.longSwipesRatio) swiper.slideTo(params.rewind && swiper.isEnd ? rewindFirstIndex : stopIndex + increment);\n            else swiper.slideTo(stopIndex);\n        }\n        if (swiper.swipeDirection === \"prev\") {\n            if (ratio > 1 - params.longSwipesRatio) {\n                swiper.slideTo(stopIndex + increment);\n            } else if (rewindLastIndex !== null && ratio < 0 && Math.abs(ratio) > params.longSwipesRatio) {\n                swiper.slideTo(rewindLastIndex);\n            } else {\n                swiper.slideTo(stopIndex);\n            }\n        }\n    } else {\n        // Short swipes\n        if (!params.shortSwipes) {\n            swiper.slideTo(swiper.activeIndex);\n            return;\n        }\n        const isNavButtonTarget = swiper.navigation && (e.target === swiper.navigation.nextEl || e.target === swiper.navigation.prevEl);\n        if (!isNavButtonTarget) {\n            if (swiper.swipeDirection === \"next\") {\n                swiper.slideTo(rewindFirstIndex !== null ? rewindFirstIndex : stopIndex + increment);\n            }\n            if (swiper.swipeDirection === \"prev\") {\n                swiper.slideTo(rewindLastIndex !== null ? rewindLastIndex : stopIndex);\n            }\n        } else if (e.target === swiper.navigation.nextEl) {\n            swiper.slideTo(stopIndex + increment);\n        } else {\n            swiper.slideTo(stopIndex);\n        }\n    }\n}\nfunction onResize() {\n    const swiper = this;\n    const { params, el } = swiper;\n    if (el && el.offsetWidth === 0) return;\n    // Breakpoints\n    if (params.breakpoints) {\n        swiper.setBreakpoint();\n    }\n    // Save locks\n    const { allowSlideNext, allowSlidePrev, snapGrid } = swiper;\n    const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n    // Disable locks on resize\n    swiper.allowSlideNext = true;\n    swiper.allowSlidePrev = true;\n    swiper.updateSize();\n    swiper.updateSlides();\n    swiper.updateSlidesClasses();\n    const isVirtualLoop = isVirtual && params.loop;\n    if ((params.slidesPerView === \"auto\" || params.slidesPerView > 1) && swiper.isEnd && !swiper.isBeginning && !swiper.params.centeredSlides && !isVirtualLoop) {\n        swiper.slideTo(swiper.slides.length - 1, 0, false, true);\n    } else {\n        if (swiper.params.loop && !isVirtual) {\n            swiper.slideToLoop(swiper.realIndex, 0, false, true);\n        } else {\n            swiper.slideTo(swiper.activeIndex, 0, false, true);\n        }\n    }\n    if (swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused) {\n        clearTimeout(swiper.autoplay.resizeTimeout);\n        swiper.autoplay.resizeTimeout = setTimeout(()=>{\n            if (swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused) {\n                swiper.autoplay.resume();\n            }\n        }, 500);\n    }\n    // Return locks after resize\n    swiper.allowSlidePrev = allowSlidePrev;\n    swiper.allowSlideNext = allowSlideNext;\n    if (swiper.params.watchOverflow && snapGrid !== swiper.snapGrid) {\n        swiper.checkOverflow();\n    }\n}\nfunction onClick(e) {\n    const swiper = this;\n    if (!swiper.enabled) return;\n    if (!swiper.allowClick) {\n        if (swiper.params.preventClicks) e.preventDefault();\n        if (swiper.params.preventClicksPropagation && swiper.animating) {\n            e.stopPropagation();\n            e.stopImmediatePropagation();\n        }\n    }\n}\nfunction onScroll() {\n    const swiper = this;\n    const { wrapperEl, rtlTranslate, enabled } = swiper;\n    if (!enabled) return;\n    swiper.previousTranslate = swiper.translate;\n    if (swiper.isHorizontal()) {\n        swiper.translate = -wrapperEl.scrollLeft;\n    } else {\n        swiper.translate = -wrapperEl.scrollTop;\n    }\n    // eslint-disable-next-line\n    if (swiper.translate === 0) swiper.translate = 0;\n    swiper.updateActiveIndex();\n    swiper.updateSlidesClasses();\n    let newProgress;\n    const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n    if (translatesDiff === 0) {\n        newProgress = 0;\n    } else {\n        newProgress = (swiper.translate - swiper.minTranslate()) / translatesDiff;\n    }\n    if (newProgress !== swiper.progress) {\n        swiper.updateProgress(rtlTranslate ? -swiper.translate : swiper.translate);\n    }\n    swiper.emit(\"setTranslate\", swiper.translate, false);\n}\nfunction onLoad(e) {\n    const swiper = this;\n    processLazyPreloader(swiper, e.target);\n    if (swiper.params.cssMode || swiper.params.slidesPerView !== \"auto\" && !swiper.params.autoHeight) {\n        return;\n    }\n    swiper.update();\n}\nfunction onDocumentTouchStart() {\n    const swiper = this;\n    if (swiper.documentTouchHandlerProceeded) return;\n    swiper.documentTouchHandlerProceeded = true;\n    if (swiper.params.touchReleaseOnEdges) {\n        swiper.el.style.touchAction = \"auto\";\n    }\n}\nconst events = (swiper, method)=>{\n    const document1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n    const { params, el, wrapperEl, device } = swiper;\n    const capture = !!params.nested;\n    const domMethod = method === \"on\" ? \"addEventListener\" : \"removeEventListener\";\n    const swiperMethod = method;\n    if (!el || typeof el === \"string\") return;\n    // Touch Events\n    document1[domMethod](\"touchstart\", swiper.onDocumentTouchStart, {\n        passive: false,\n        capture\n    });\n    el[domMethod](\"touchstart\", swiper.onTouchStart, {\n        passive: false\n    });\n    el[domMethod](\"pointerdown\", swiper.onTouchStart, {\n        passive: false\n    });\n    document1[domMethod](\"touchmove\", swiper.onTouchMove, {\n        passive: false,\n        capture\n    });\n    document1[domMethod](\"pointermove\", swiper.onTouchMove, {\n        passive: false,\n        capture\n    });\n    document1[domMethod](\"touchend\", swiper.onTouchEnd, {\n        passive: true\n    });\n    document1[domMethod](\"pointerup\", swiper.onTouchEnd, {\n        passive: true\n    });\n    document1[domMethod](\"pointercancel\", swiper.onTouchEnd, {\n        passive: true\n    });\n    document1[domMethod](\"touchcancel\", swiper.onTouchEnd, {\n        passive: true\n    });\n    document1[domMethod](\"pointerout\", swiper.onTouchEnd, {\n        passive: true\n    });\n    document1[domMethod](\"pointerleave\", swiper.onTouchEnd, {\n        passive: true\n    });\n    document1[domMethod](\"contextmenu\", swiper.onTouchEnd, {\n        passive: true\n    });\n    // Prevent Links Clicks\n    if (params.preventClicks || params.preventClicksPropagation) {\n        el[domMethod](\"click\", swiper.onClick, true);\n    }\n    if (params.cssMode) {\n        wrapperEl[domMethod](\"scroll\", swiper.onScroll);\n    }\n    // Resize handler\n    if (params.updateOnWindowResize) {\n        swiper[swiperMethod](device.ios || device.android ? \"resize orientationchange observerUpdate\" : \"resize observerUpdate\", onResize, true);\n    } else {\n        swiper[swiperMethod](\"observerUpdate\", onResize, true);\n    }\n    // Images loader\n    el[domMethod](\"load\", swiper.onLoad, {\n        capture: true\n    });\n};\nfunction attachEvents() {\n    const swiper = this;\n    const { params } = swiper;\n    swiper.onTouchStart = onTouchStart.bind(swiper);\n    swiper.onTouchMove = onTouchMove.bind(swiper);\n    swiper.onTouchEnd = onTouchEnd.bind(swiper);\n    swiper.onDocumentTouchStart = onDocumentTouchStart.bind(swiper);\n    if (params.cssMode) {\n        swiper.onScroll = onScroll.bind(swiper);\n    }\n    swiper.onClick = onClick.bind(swiper);\n    swiper.onLoad = onLoad.bind(swiper);\n    events(swiper, \"on\");\n}\nfunction detachEvents() {\n    const swiper = this;\n    events(swiper, \"off\");\n}\nvar events$1 = {\n    attachEvents,\n    detachEvents\n};\nconst isGridEnabled = (swiper, params)=>{\n    return swiper.grid && params.grid && params.grid.rows > 1;\n};\nfunction setBreakpoint() {\n    const swiper = this;\n    const { realIndex, initialized, params, el } = swiper;\n    const breakpoints = params.breakpoints;\n    if (!breakpoints || breakpoints && Object.keys(breakpoints).length === 0) return;\n    const document1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n    // Get breakpoint for window/container width and update parameters\n    const breakpointsBase = params.breakpointsBase === \"window\" || !params.breakpointsBase ? params.breakpointsBase : \"container\";\n    const breakpointContainer = [\n        \"window\",\n        \"container\"\n    ].includes(params.breakpointsBase) || !params.breakpointsBase ? swiper.el : document1.querySelector(params.breakpointsBase);\n    const breakpoint = swiper.getBreakpoint(breakpoints, breakpointsBase, breakpointContainer);\n    if (!breakpoint || swiper.currentBreakpoint === breakpoint) return;\n    const breakpointOnlyParams = breakpoint in breakpoints ? breakpoints[breakpoint] : undefined;\n    const breakpointParams = breakpointOnlyParams || swiper.originalParams;\n    const wasMultiRow = isGridEnabled(swiper, params);\n    const isMultiRow = isGridEnabled(swiper, breakpointParams);\n    const wasGrabCursor = swiper.params.grabCursor;\n    const isGrabCursor = breakpointParams.grabCursor;\n    const wasEnabled = params.enabled;\n    if (wasMultiRow && !isMultiRow) {\n        el.classList.remove(`${params.containerModifierClass}grid`, `${params.containerModifierClass}grid-column`);\n        swiper.emitContainerClasses();\n    } else if (!wasMultiRow && isMultiRow) {\n        el.classList.add(`${params.containerModifierClass}grid`);\n        if (breakpointParams.grid.fill && breakpointParams.grid.fill === \"column\" || !breakpointParams.grid.fill && params.grid.fill === \"column\") {\n            el.classList.add(`${params.containerModifierClass}grid-column`);\n        }\n        swiper.emitContainerClasses();\n    }\n    if (wasGrabCursor && !isGrabCursor) {\n        swiper.unsetGrabCursor();\n    } else if (!wasGrabCursor && isGrabCursor) {\n        swiper.setGrabCursor();\n    }\n    // Toggle navigation, pagination, scrollbar\n    [\n        \"navigation\",\n        \"pagination\",\n        \"scrollbar\"\n    ].forEach((prop)=>{\n        if (typeof breakpointParams[prop] === \"undefined\") return;\n        const wasModuleEnabled = params[prop] && params[prop].enabled;\n        const isModuleEnabled = breakpointParams[prop] && breakpointParams[prop].enabled;\n        if (wasModuleEnabled && !isModuleEnabled) {\n            swiper[prop].disable();\n        }\n        if (!wasModuleEnabled && isModuleEnabled) {\n            swiper[prop].enable();\n        }\n    });\n    const directionChanged = breakpointParams.direction && breakpointParams.direction !== params.direction;\n    const needsReLoop = params.loop && (breakpointParams.slidesPerView !== params.slidesPerView || directionChanged);\n    const wasLoop = params.loop;\n    if (directionChanged && initialized) {\n        swiper.changeDirection();\n    }\n    (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.x)(swiper.params, breakpointParams);\n    const isEnabled = swiper.params.enabled;\n    const hasLoop = swiper.params.loop;\n    Object.assign(swiper, {\n        allowTouchMove: swiper.params.allowTouchMove,\n        allowSlideNext: swiper.params.allowSlideNext,\n        allowSlidePrev: swiper.params.allowSlidePrev\n    });\n    if (wasEnabled && !isEnabled) {\n        swiper.disable();\n    } else if (!wasEnabled && isEnabled) {\n        swiper.enable();\n    }\n    swiper.currentBreakpoint = breakpoint;\n    swiper.emit(\"_beforeBreakpoint\", breakpointParams);\n    if (initialized) {\n        if (needsReLoop) {\n            swiper.loopDestroy();\n            swiper.loopCreate(realIndex);\n            swiper.updateSlides();\n        } else if (!wasLoop && hasLoop) {\n            swiper.loopCreate(realIndex);\n            swiper.updateSlides();\n        } else if (wasLoop && !hasLoop) {\n            swiper.loopDestroy();\n        }\n    }\n    swiper.emit(\"breakpoint\", breakpointParams);\n}\nfunction getBreakpoint(breakpoints, base = \"window\", containerEl) {\n    if (!breakpoints || base === \"container\" && !containerEl) return undefined;\n    let breakpoint = false;\n    const window1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    const currentHeight = base === \"window\" ? window1.innerHeight : containerEl.clientHeight;\n    const points = Object.keys(breakpoints).map((point)=>{\n        if (typeof point === \"string\" && point.indexOf(\"@\") === 0) {\n            const minRatio = parseFloat(point.substr(1));\n            const value = currentHeight * minRatio;\n            return {\n                value,\n                point\n            };\n        }\n        return {\n            value: point,\n            point\n        };\n    });\n    points.sort((a, b)=>parseInt(a.value, 10) - parseInt(b.value, 10));\n    for(let i = 0; i < points.length; i += 1){\n        const { point, value } = points[i];\n        if (base === \"window\") {\n            if (window1.matchMedia(`(min-width: ${value}px)`).matches) {\n                breakpoint = point;\n            }\n        } else if (value <= containerEl.clientWidth) {\n            breakpoint = point;\n        }\n    }\n    return breakpoint || \"max\";\n}\nvar breakpoints = {\n    setBreakpoint,\n    getBreakpoint\n};\nfunction prepareClasses(entries, prefix) {\n    const resultClasses = [];\n    entries.forEach((item)=>{\n        if (typeof item === \"object\") {\n            Object.keys(item).forEach((classNames)=>{\n                if (item[classNames]) {\n                    resultClasses.push(prefix + classNames);\n                }\n            });\n        } else if (typeof item === \"string\") {\n            resultClasses.push(prefix + item);\n        }\n    });\n    return resultClasses;\n}\nfunction addClasses() {\n    const swiper = this;\n    const { classNames, params, rtl, el, device } = swiper;\n    // prettier-ignore\n    const suffixes = prepareClasses([\n        \"initialized\",\n        params.direction,\n        {\n            \"free-mode\": swiper.params.freeMode && params.freeMode.enabled\n        },\n        {\n            \"autoheight\": params.autoHeight\n        },\n        {\n            \"rtl\": rtl\n        },\n        {\n            \"grid\": params.grid && params.grid.rows > 1\n        },\n        {\n            \"grid-column\": params.grid && params.grid.rows > 1 && params.grid.fill === \"column\"\n        },\n        {\n            \"android\": device.android\n        },\n        {\n            \"ios\": device.ios\n        },\n        {\n            \"css-mode\": params.cssMode\n        },\n        {\n            \"centered\": params.cssMode && params.centeredSlides\n        },\n        {\n            \"watch-progress\": params.watchSlidesProgress\n        }\n    ], params.containerModifierClass);\n    classNames.push(...suffixes);\n    el.classList.add(...classNames);\n    swiper.emitContainerClasses();\n}\nfunction removeClasses() {\n    const swiper = this;\n    const { el, classNames } = swiper;\n    if (!el || typeof el === \"string\") return;\n    el.classList.remove(...classNames);\n    swiper.emitContainerClasses();\n}\nvar classes = {\n    addClasses,\n    removeClasses\n};\nfunction checkOverflow() {\n    const swiper = this;\n    const { isLocked: wasLocked, params } = swiper;\n    const { slidesOffsetBefore } = params;\n    if (slidesOffsetBefore) {\n        const lastSlideIndex = swiper.slides.length - 1;\n        const lastSlideRightEdge = swiper.slidesGrid[lastSlideIndex] + swiper.slidesSizesGrid[lastSlideIndex] + slidesOffsetBefore * 2;\n        swiper.isLocked = swiper.size > lastSlideRightEdge;\n    } else {\n        swiper.isLocked = swiper.snapGrid.length === 1;\n    }\n    if (params.allowSlideNext === true) {\n        swiper.allowSlideNext = !swiper.isLocked;\n    }\n    if (params.allowSlidePrev === true) {\n        swiper.allowSlidePrev = !swiper.isLocked;\n    }\n    if (wasLocked && wasLocked !== swiper.isLocked) {\n        swiper.isEnd = false;\n    }\n    if (wasLocked !== swiper.isLocked) {\n        swiper.emit(swiper.isLocked ? \"lock\" : \"unlock\");\n    }\n}\nvar checkOverflow$1 = {\n    checkOverflow\n};\nvar defaults = {\n    init: true,\n    direction: \"horizontal\",\n    oneWayMovement: false,\n    swiperElementNodeName: \"SWIPER-CONTAINER\",\n    touchEventsTarget: \"wrapper\",\n    initialSlide: 0,\n    speed: 300,\n    cssMode: false,\n    updateOnWindowResize: true,\n    resizeObserver: true,\n    nested: false,\n    createElements: false,\n    eventsPrefix: \"swiper\",\n    enabled: true,\n    focusableElements: \"input, select, option, textarea, button, video, label\",\n    // Overrides\n    width: null,\n    height: null,\n    //\n    preventInteractionOnTransition: false,\n    // ssr\n    userAgent: null,\n    url: null,\n    // To support iOS's swipe-to-go-back gesture (when being used in-app).\n    edgeSwipeDetection: false,\n    edgeSwipeThreshold: 20,\n    // Autoheight\n    autoHeight: false,\n    // Set wrapper width\n    setWrapperSize: false,\n    // Virtual Translate\n    virtualTranslate: false,\n    // Effects\n    effect: \"slide\",\n    // 'slide' or 'fade' or 'cube' or 'coverflow' or 'flip'\n    // Breakpoints\n    breakpoints: undefined,\n    breakpointsBase: \"window\",\n    // Slides grid\n    spaceBetween: 0,\n    slidesPerView: 1,\n    slidesPerGroup: 1,\n    slidesPerGroupSkip: 0,\n    slidesPerGroupAuto: false,\n    centeredSlides: false,\n    centeredSlidesBounds: false,\n    slidesOffsetBefore: 0,\n    // in px\n    slidesOffsetAfter: 0,\n    // in px\n    normalizeSlideIndex: true,\n    centerInsufficientSlides: false,\n    // Disable swiper and hide navigation when container not overflow\n    watchOverflow: true,\n    // Round length\n    roundLengths: false,\n    // Touches\n    touchRatio: 1,\n    touchAngle: 45,\n    simulateTouch: true,\n    shortSwipes: true,\n    longSwipes: true,\n    longSwipesRatio: 0.5,\n    longSwipesMs: 300,\n    followFinger: true,\n    allowTouchMove: true,\n    threshold: 5,\n    touchMoveStopPropagation: false,\n    touchStartPreventDefault: true,\n    touchStartForcePreventDefault: false,\n    touchReleaseOnEdges: false,\n    // Unique Navigation Elements\n    uniqueNavElements: true,\n    // Resistance\n    resistance: true,\n    resistanceRatio: 0.85,\n    // Progress\n    watchSlidesProgress: false,\n    // Cursor\n    grabCursor: false,\n    // Clicks\n    preventClicks: true,\n    preventClicksPropagation: true,\n    slideToClickedSlide: false,\n    // loop\n    loop: false,\n    loopAddBlankSlides: true,\n    loopAdditionalSlides: 0,\n    loopPreventsSliding: true,\n    // rewind\n    rewind: false,\n    // Swiping/no swiping\n    allowSlidePrev: true,\n    allowSlideNext: true,\n    swipeHandler: null,\n    // '.swipe-handler',\n    noSwiping: true,\n    noSwipingClass: \"swiper-no-swiping\",\n    noSwipingSelector: null,\n    // Passive Listeners\n    passiveListeners: true,\n    maxBackfaceHiddenSlides: 10,\n    // NS\n    containerModifierClass: \"swiper-\",\n    // NEW\n    slideClass: \"swiper-slide\",\n    slideBlankClass: \"swiper-slide-blank\",\n    slideActiveClass: \"swiper-slide-active\",\n    slideVisibleClass: \"swiper-slide-visible\",\n    slideFullyVisibleClass: \"swiper-slide-fully-visible\",\n    slideNextClass: \"swiper-slide-next\",\n    slidePrevClass: \"swiper-slide-prev\",\n    wrapperClass: \"swiper-wrapper\",\n    lazyPreloaderClass: \"swiper-lazy-preloader\",\n    lazyPreloadPrevNext: 0,\n    // Callbacks\n    runCallbacksOnInit: true,\n    // Internals\n    _emitClasses: false\n};\nfunction moduleExtendParams(params, allModulesParams) {\n    return function extendParams(obj = {}) {\n        const moduleParamName = Object.keys(obj)[0];\n        const moduleParams = obj[moduleParamName];\n        if (typeof moduleParams !== \"object\" || moduleParams === null) {\n            (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.x)(allModulesParams, obj);\n            return;\n        }\n        if (params[moduleParamName] === true) {\n            params[moduleParamName] = {\n                enabled: true\n            };\n        }\n        if (moduleParamName === \"navigation\" && params[moduleParamName] && params[moduleParamName].enabled && !params[moduleParamName].prevEl && !params[moduleParamName].nextEl) {\n            params[moduleParamName].auto = true;\n        }\n        if ([\n            \"pagination\",\n            \"scrollbar\"\n        ].indexOf(moduleParamName) >= 0 && params[moduleParamName] && params[moduleParamName].enabled && !params[moduleParamName].el) {\n            params[moduleParamName].auto = true;\n        }\n        if (!(moduleParamName in params && \"enabled\" in moduleParams)) {\n            (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.x)(allModulesParams, obj);\n            return;\n        }\n        if (typeof params[moduleParamName] === \"object\" && !(\"enabled\" in params[moduleParamName])) {\n            params[moduleParamName].enabled = true;\n        }\n        if (!params[moduleParamName]) params[moduleParamName] = {\n            enabled: false\n        };\n        (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.x)(allModulesParams, obj);\n    };\n}\n/* eslint no-param-reassign: \"off\" */ const prototypes = {\n    eventsEmitter,\n    update,\n    translate,\n    transition,\n    slide,\n    loop,\n    grabCursor,\n    events: events$1,\n    breakpoints,\n    checkOverflow: checkOverflow$1,\n    classes\n};\nconst extendedDefaults = {};\nclass Swiper {\n    constructor(...args){\n        let el;\n        let params;\n        if (args.length === 1 && args[0].constructor && Object.prototype.toString.call(args[0]).slice(8, -1) === \"Object\") {\n            params = args[0];\n        } else {\n            [el, params] = args;\n        }\n        if (!params) params = {};\n        params = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.x)({}, params);\n        if (el && !params.el) params.el = el;\n        const document1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n        if (params.el && typeof params.el === \"string\" && document1.querySelectorAll(params.el).length > 1) {\n            const swipers = [];\n            document1.querySelectorAll(params.el).forEach((containerEl)=>{\n                const newParams = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.x)({}, params, {\n                    el: containerEl\n                });\n                swipers.push(new Swiper(newParams));\n            });\n            // eslint-disable-next-line no-constructor-return\n            return swipers;\n        }\n        // Swiper Instance\n        const swiper = this;\n        swiper.__swiper__ = true;\n        swiper.support = getSupport();\n        swiper.device = getDevice({\n            userAgent: params.userAgent\n        });\n        swiper.browser = getBrowser();\n        swiper.eventsListeners = {};\n        swiper.eventsAnyListeners = [];\n        swiper.modules = [\n            ...swiper.__modules__\n        ];\n        if (params.modules && Array.isArray(params.modules)) {\n            swiper.modules.push(...params.modules);\n        }\n        const allModulesParams = {};\n        swiper.modules.forEach((mod)=>{\n            mod({\n                params,\n                swiper,\n                extendParams: moduleExtendParams(params, allModulesParams),\n                on: swiper.on.bind(swiper),\n                once: swiper.once.bind(swiper),\n                off: swiper.off.bind(swiper),\n                emit: swiper.emit.bind(swiper)\n            });\n        });\n        // Extend defaults with modules params\n        const swiperParams = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.x)({}, defaults, allModulesParams);\n        // Extend defaults with passed params\n        swiper.params = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.x)({}, swiperParams, extendedDefaults, params);\n        swiper.originalParams = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.x)({}, swiper.params);\n        swiper.passedParams = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.x)({}, params);\n        // add event listeners\n        if (swiper.params && swiper.params.on) {\n            Object.keys(swiper.params.on).forEach((eventName)=>{\n                swiper.on(eventName, swiper.params.on[eventName]);\n            });\n        }\n        if (swiper.params && swiper.params.onAny) {\n            swiper.onAny(swiper.params.onAny);\n        }\n        // Extend Swiper\n        Object.assign(swiper, {\n            enabled: swiper.params.enabled,\n            el,\n            // Classes\n            classNames: [],\n            // Slides\n            slides: [],\n            slidesGrid: [],\n            snapGrid: [],\n            slidesSizesGrid: [],\n            // isDirection\n            isHorizontal () {\n                return swiper.params.direction === \"horizontal\";\n            },\n            isVertical () {\n                return swiper.params.direction === \"vertical\";\n            },\n            // Indexes\n            activeIndex: 0,\n            realIndex: 0,\n            //\n            isBeginning: true,\n            isEnd: false,\n            // Props\n            translate: 0,\n            previousTranslate: 0,\n            progress: 0,\n            velocity: 0,\n            animating: false,\n            cssOverflowAdjustment () {\n                // Returns 0 unless `translate` is > 2**23\n                // Should be subtracted from css values to prevent overflow\n                return Math.trunc(this.translate / 2 ** 23) * 2 ** 23;\n            },\n            // Locks\n            allowSlideNext: swiper.params.allowSlideNext,\n            allowSlidePrev: swiper.params.allowSlidePrev,\n            // Touch Events\n            touchEventsData: {\n                isTouched: undefined,\n                isMoved: undefined,\n                allowTouchCallbacks: undefined,\n                touchStartTime: undefined,\n                isScrolling: undefined,\n                currentTranslate: undefined,\n                startTranslate: undefined,\n                allowThresholdMove: undefined,\n                // Form elements to match\n                focusableElements: swiper.params.focusableElements,\n                // Last click time\n                lastClickTime: 0,\n                clickTimeout: undefined,\n                // Velocities\n                velocities: [],\n                allowMomentumBounce: undefined,\n                startMoving: undefined,\n                pointerId: null,\n                touchId: null\n            },\n            // Clicks\n            allowClick: true,\n            // Touches\n            allowTouchMove: swiper.params.allowTouchMove,\n            touches: {\n                startX: 0,\n                startY: 0,\n                currentX: 0,\n                currentY: 0,\n                diff: 0\n            },\n            // Images\n            imagesToLoad: [],\n            imagesLoaded: 0\n        });\n        swiper.emit(\"_swiper\");\n        // Init\n        if (swiper.params.init) {\n            swiper.init();\n        }\n        // Return app instance\n        // eslint-disable-next-line no-constructor-return\n        return swiper;\n    }\n    getDirectionLabel(property) {\n        if (this.isHorizontal()) {\n            return property;\n        }\n        // prettier-ignore\n        return ({\n            \"width\": \"height\",\n            \"margin-top\": \"margin-left\",\n            \"margin-bottom \": \"margin-right\",\n            \"margin-left\": \"margin-top\",\n            \"margin-right\": \"margin-bottom\",\n            \"padding-left\": \"padding-top\",\n            \"padding-right\": \"padding-bottom\",\n            \"marginRight\": \"marginBottom\"\n        })[property];\n    }\n    getSlideIndex(slideEl) {\n        const { slidesEl, params } = this;\n        const slides = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(slidesEl, `.${params.slideClass}, swiper-slide`);\n        const firstSlideIndex = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.j)(slides[0]);\n        return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.j)(slideEl) - firstSlideIndex;\n    }\n    getSlideIndexByData(index) {\n        return this.getSlideIndex(this.slides.find((slideEl)=>slideEl.getAttribute(\"data-swiper-slide-index\") * 1 === index));\n    }\n    getSlideIndexWhenGrid(index) {\n        if (this.grid && this.params.grid && this.params.grid.rows > 1) {\n            if (this.params.grid.fill === \"column\") {\n                index = Math.floor(index / this.params.grid.rows);\n            } else if (this.params.grid.fill === \"row\") {\n                index = index % Math.ceil(this.slides.length / this.params.grid.rows);\n            }\n        }\n        return index;\n    }\n    recalcSlides() {\n        const swiper = this;\n        const { slidesEl, params } = swiper;\n        swiper.slides = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(slidesEl, `.${params.slideClass}, swiper-slide`);\n    }\n    enable() {\n        const swiper = this;\n        if (swiper.enabled) return;\n        swiper.enabled = true;\n        if (swiper.params.grabCursor) {\n            swiper.setGrabCursor();\n        }\n        swiper.emit(\"enable\");\n    }\n    disable() {\n        const swiper = this;\n        if (!swiper.enabled) return;\n        swiper.enabled = false;\n        if (swiper.params.grabCursor) {\n            swiper.unsetGrabCursor();\n        }\n        swiper.emit(\"disable\");\n    }\n    setProgress(progress, speed) {\n        const swiper = this;\n        progress = Math.min(Math.max(progress, 0), 1);\n        const min = swiper.minTranslate();\n        const max = swiper.maxTranslate();\n        const current = (max - min) * progress + min;\n        swiper.translateTo(current, typeof speed === \"undefined\" ? 0 : speed);\n        swiper.updateActiveIndex();\n        swiper.updateSlidesClasses();\n    }\n    emitContainerClasses() {\n        const swiper = this;\n        if (!swiper.params._emitClasses || !swiper.el) return;\n        const cls = swiper.el.className.split(\" \").filter((className)=>{\n            return className.indexOf(\"swiper\") === 0 || className.indexOf(swiper.params.containerModifierClass) === 0;\n        });\n        swiper.emit(\"_containerClasses\", cls.join(\" \"));\n    }\n    getSlideClasses(slideEl) {\n        const swiper = this;\n        if (swiper.destroyed) return \"\";\n        return slideEl.className.split(\" \").filter((className)=>{\n            return className.indexOf(\"swiper-slide\") === 0 || className.indexOf(swiper.params.slideClass) === 0;\n        }).join(\" \");\n    }\n    emitSlidesClasses() {\n        const swiper = this;\n        if (!swiper.params._emitClasses || !swiper.el) return;\n        const updates = [];\n        swiper.slides.forEach((slideEl)=>{\n            const classNames = swiper.getSlideClasses(slideEl);\n            updates.push({\n                slideEl,\n                classNames\n            });\n            swiper.emit(\"_slideClass\", slideEl, classNames);\n        });\n        swiper.emit(\"_slideClasses\", updates);\n    }\n    slidesPerViewDynamic(view = \"current\", exact = false) {\n        const swiper = this;\n        const { params, slides, slidesGrid, slidesSizesGrid, size: swiperSize, activeIndex } = swiper;\n        let spv = 1;\n        if (typeof params.slidesPerView === \"number\") return params.slidesPerView;\n        if (params.centeredSlides) {\n            let slideSize = slides[activeIndex] ? Math.ceil(slides[activeIndex].swiperSlideSize) : 0;\n            let breakLoop;\n            for(let i = activeIndex + 1; i < slides.length; i += 1){\n                if (slides[i] && !breakLoop) {\n                    slideSize += Math.ceil(slides[i].swiperSlideSize);\n                    spv += 1;\n                    if (slideSize > swiperSize) breakLoop = true;\n                }\n            }\n            for(let i = activeIndex - 1; i >= 0; i -= 1){\n                if (slides[i] && !breakLoop) {\n                    slideSize += slides[i].swiperSlideSize;\n                    spv += 1;\n                    if (slideSize > swiperSize) breakLoop = true;\n                }\n            }\n        } else {\n            // eslint-disable-next-line\n            if (view === \"current\") {\n                for(let i = activeIndex + 1; i < slides.length; i += 1){\n                    const slideInView = exact ? slidesGrid[i] + slidesSizesGrid[i] - slidesGrid[activeIndex] < swiperSize : slidesGrid[i] - slidesGrid[activeIndex] < swiperSize;\n                    if (slideInView) {\n                        spv += 1;\n                    }\n                }\n            } else {\n                // previous\n                for(let i = activeIndex - 1; i >= 0; i -= 1){\n                    const slideInView = slidesGrid[activeIndex] - slidesGrid[i] < swiperSize;\n                    if (slideInView) {\n                        spv += 1;\n                    }\n                }\n            }\n        }\n        return spv;\n    }\n    update() {\n        const swiper = this;\n        if (!swiper || swiper.destroyed) return;\n        const { snapGrid, params } = swiper;\n        // Breakpoints\n        if (params.breakpoints) {\n            swiper.setBreakpoint();\n        }\n        [\n            ...swiper.el.querySelectorAll('[loading=\"lazy\"]')\n        ].forEach((imageEl)=>{\n            if (imageEl.complete) {\n                processLazyPreloader(swiper, imageEl);\n            }\n        });\n        swiper.updateSize();\n        swiper.updateSlides();\n        swiper.updateProgress();\n        swiper.updateSlidesClasses();\n        function setTranslate() {\n            const translateValue = swiper.rtlTranslate ? swiper.translate * -1 : swiper.translate;\n            const newTranslate = Math.min(Math.max(translateValue, swiper.maxTranslate()), swiper.minTranslate());\n            swiper.setTranslate(newTranslate);\n            swiper.updateActiveIndex();\n            swiper.updateSlidesClasses();\n        }\n        let translated;\n        if (params.freeMode && params.freeMode.enabled && !params.cssMode) {\n            setTranslate();\n            if (params.autoHeight) {\n                swiper.updateAutoHeight();\n            }\n        } else {\n            if ((params.slidesPerView === \"auto\" || params.slidesPerView > 1) && swiper.isEnd && !params.centeredSlides) {\n                const slides = swiper.virtual && params.virtual.enabled ? swiper.virtual.slides : swiper.slides;\n                translated = swiper.slideTo(slides.length - 1, 0, false, true);\n            } else {\n                translated = swiper.slideTo(swiper.activeIndex, 0, false, true);\n            }\n            if (!translated) {\n                setTranslate();\n            }\n        }\n        if (params.watchOverflow && snapGrid !== swiper.snapGrid) {\n            swiper.checkOverflow();\n        }\n        swiper.emit(\"update\");\n    }\n    changeDirection(newDirection, needUpdate = true) {\n        const swiper = this;\n        const currentDirection = swiper.params.direction;\n        if (!newDirection) {\n            // eslint-disable-next-line\n            newDirection = currentDirection === \"horizontal\" ? \"vertical\" : \"horizontal\";\n        }\n        if (newDirection === currentDirection || newDirection !== \"horizontal\" && newDirection !== \"vertical\") {\n            return swiper;\n        }\n        swiper.el.classList.remove(`${swiper.params.containerModifierClass}${currentDirection}`);\n        swiper.el.classList.add(`${swiper.params.containerModifierClass}${newDirection}`);\n        swiper.emitContainerClasses();\n        swiper.params.direction = newDirection;\n        swiper.slides.forEach((slideEl)=>{\n            if (newDirection === \"vertical\") {\n                slideEl.style.width = \"\";\n            } else {\n                slideEl.style.height = \"\";\n            }\n        });\n        swiper.emit(\"changeDirection\");\n        if (needUpdate) swiper.update();\n        return swiper;\n    }\n    changeLanguageDirection(direction) {\n        const swiper = this;\n        if (swiper.rtl && direction === \"rtl\" || !swiper.rtl && direction === \"ltr\") return;\n        swiper.rtl = direction === \"rtl\";\n        swiper.rtlTranslate = swiper.params.direction === \"horizontal\" && swiper.rtl;\n        if (swiper.rtl) {\n            swiper.el.classList.add(`${swiper.params.containerModifierClass}rtl`);\n            swiper.el.dir = \"rtl\";\n        } else {\n            swiper.el.classList.remove(`${swiper.params.containerModifierClass}rtl`);\n            swiper.el.dir = \"ltr\";\n        }\n        swiper.update();\n    }\n    mount(element) {\n        const swiper = this;\n        if (swiper.mounted) return true;\n        // Find el\n        let el = element || swiper.params.el;\n        if (typeof el === \"string\") {\n            el = document.querySelector(el);\n        }\n        if (!el) {\n            return false;\n        }\n        el.swiper = swiper;\n        if (el.parentNode && el.parentNode.host && el.parentNode.host.nodeName === swiper.params.swiperElementNodeName.toUpperCase()) {\n            swiper.isElement = true;\n        }\n        const getWrapperSelector = ()=>{\n            return `.${(swiper.params.wrapperClass || \"\").trim().split(\" \").join(\".\")}`;\n        };\n        const getWrapper = ()=>{\n            if (el && el.shadowRoot && el.shadowRoot.querySelector) {\n                const res = el.shadowRoot.querySelector(getWrapperSelector());\n                // Children needs to return slot items\n                return res;\n            }\n            return (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(el, getWrapperSelector())[0];\n        };\n        // Find Wrapper\n        let wrapperEl = getWrapper();\n        if (!wrapperEl && swiper.params.createElements) {\n            wrapperEl = (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(\"div\", swiper.params.wrapperClass);\n            el.append(wrapperEl);\n            (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(el, `.${swiper.params.slideClass}`).forEach((slideEl)=>{\n                wrapperEl.append(slideEl);\n            });\n        }\n        Object.assign(swiper, {\n            el,\n            wrapperEl,\n            slidesEl: swiper.isElement && !el.parentNode.host.slideSlots ? el.parentNode.host : wrapperEl,\n            hostEl: swiper.isElement ? el.parentNode.host : el,\n            mounted: true,\n            // RTL\n            rtl: el.dir.toLowerCase() === \"rtl\" || (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.q)(el, \"direction\") === \"rtl\",\n            rtlTranslate: swiper.params.direction === \"horizontal\" && (el.dir.toLowerCase() === \"rtl\" || (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.q)(el, \"direction\") === \"rtl\"),\n            wrongRTL: (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.q)(wrapperEl, \"display\") === \"-webkit-box\"\n        });\n        return true;\n    }\n    init(el) {\n        const swiper = this;\n        if (swiper.initialized) return swiper;\n        const mounted = swiper.mount(el);\n        if (mounted === false) return swiper;\n        swiper.emit(\"beforeInit\");\n        // Set breakpoint\n        if (swiper.params.breakpoints) {\n            swiper.setBreakpoint();\n        }\n        // Add Classes\n        swiper.addClasses();\n        // Update size\n        swiper.updateSize();\n        // Update slides\n        swiper.updateSlides();\n        if (swiper.params.watchOverflow) {\n            swiper.checkOverflow();\n        }\n        // Set Grab Cursor\n        if (swiper.params.grabCursor && swiper.enabled) {\n            swiper.setGrabCursor();\n        }\n        // Slide To Initial Slide\n        if (swiper.params.loop && swiper.virtual && swiper.params.virtual.enabled) {\n            swiper.slideTo(swiper.params.initialSlide + swiper.virtual.slidesBefore, 0, swiper.params.runCallbacksOnInit, false, true);\n        } else {\n            swiper.slideTo(swiper.params.initialSlide, 0, swiper.params.runCallbacksOnInit, false, true);\n        }\n        // Create loop\n        if (swiper.params.loop) {\n            swiper.loopCreate(undefined, true);\n        }\n        // Attach events\n        swiper.attachEvents();\n        const lazyElements = [\n            ...swiper.el.querySelectorAll('[loading=\"lazy\"]')\n        ];\n        if (swiper.isElement) {\n            lazyElements.push(...swiper.hostEl.querySelectorAll('[loading=\"lazy\"]'));\n        }\n        lazyElements.forEach((imageEl)=>{\n            if (imageEl.complete) {\n                processLazyPreloader(swiper, imageEl);\n            } else {\n                imageEl.addEventListener(\"load\", (e)=>{\n                    processLazyPreloader(swiper, e.target);\n                });\n            }\n        });\n        preload(swiper);\n        // Init Flag\n        swiper.initialized = true;\n        preload(swiper);\n        // Emit\n        swiper.emit(\"init\");\n        swiper.emit(\"afterInit\");\n        return swiper;\n    }\n    destroy(deleteInstance = true, cleanStyles = true) {\n        const swiper = this;\n        const { params, el, wrapperEl, slides } = swiper;\n        if (typeof swiper.params === \"undefined\" || swiper.destroyed) {\n            return null;\n        }\n        swiper.emit(\"beforeDestroy\");\n        // Init Flag\n        swiper.initialized = false;\n        // Detach events\n        swiper.detachEvents();\n        // Destroy loop\n        if (params.loop) {\n            swiper.loopDestroy();\n        }\n        // Cleanup styles\n        if (cleanStyles) {\n            swiper.removeClasses();\n            if (el && typeof el !== \"string\") {\n                el.removeAttribute(\"style\");\n            }\n            if (wrapperEl) {\n                wrapperEl.removeAttribute(\"style\");\n            }\n            if (slides && slides.length) {\n                slides.forEach((slideEl)=>{\n                    slideEl.classList.remove(params.slideVisibleClass, params.slideFullyVisibleClass, params.slideActiveClass, params.slideNextClass, params.slidePrevClass);\n                    slideEl.removeAttribute(\"style\");\n                    slideEl.removeAttribute(\"data-swiper-slide-index\");\n                });\n            }\n        }\n        swiper.emit(\"destroy\");\n        // Detach emitter events\n        Object.keys(swiper.eventsListeners).forEach((eventName)=>{\n            swiper.off(eventName);\n        });\n        if (deleteInstance !== false) {\n            if (swiper.el && typeof swiper.el !== \"string\") {\n                swiper.el.swiper = null;\n            }\n            (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.y)(swiper);\n        }\n        swiper.destroyed = true;\n        return null;\n    }\n    static extendDefaults(newDefaults) {\n        (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_1__.x)(extendedDefaults, newDefaults);\n    }\n    static get extendedDefaults() {\n        return extendedDefaults;\n    }\n    static get defaults() {\n        return defaults;\n    }\n    static installModule(mod) {\n        if (!Swiper.prototype.__modules__) Swiper.prototype.__modules__ = [];\n        const modules = Swiper.prototype.__modules__;\n        if (typeof mod === \"function\" && modules.indexOf(mod) < 0) {\n            modules.push(mod);\n        }\n    }\n    static use(module) {\n        if (Array.isArray(module)) {\n            module.forEach((m)=>Swiper.installModule(m));\n            return Swiper;\n        }\n        Swiper.installModule(module);\n        return Swiper;\n    }\n}\nObject.keys(prototypes).forEach((prototypeGroup)=>{\n    Object.keys(prototypes[prototypeGroup]).forEach((protoMethod)=>{\n        Swiper.prototype[protoMethod] = prototypes[prototypeGroup][protoMethod];\n    });\n});\nSwiper.use([\n    Resize,\n    Observer\n]);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/shared/swiper-core.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/shared/update-on-virtual-data.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/swiper/shared/update-on-virtual-data.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ getChangedParams),\n/* harmony export */   g: () => (/* binding */ getParams),\n/* harmony export */   m: () => (/* binding */ mountSwiper),\n/* harmony export */   u: () => (/* binding */ updateOnVirtualData)\n/* harmony export */ });\n/* harmony import */ var _update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./update-swiper.mjs */ \"(ssr)/./node_modules/swiper/shared/update-swiper.mjs\");\n/* harmony import */ var _swiper_core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./swiper-core.mjs */ \"(ssr)/./node_modules/swiper/shared/swiper-core.mjs\");\n\n\nfunction getParams(obj = {}, splitEvents = true) {\n    const params = {\n        on: {}\n    };\n    const events = {};\n    const passedParams = {};\n    (0,_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__.e)(params, _swiper_core_mjs__WEBPACK_IMPORTED_MODULE_1__.d);\n    params._emitClasses = true;\n    params.init = false;\n    const rest = {};\n    const allowedParams = _update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__.p.map((key)=>key.replace(/_/, \"\"));\n    const plainObj = Object.assign({}, obj);\n    Object.keys(plainObj).forEach((key)=>{\n        if (typeof obj[key] === \"undefined\") return;\n        if (allowedParams.indexOf(key) >= 0) {\n            if ((0,_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(obj[key])) {\n                params[key] = {};\n                passedParams[key] = {};\n                (0,_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__.e)(params[key], obj[key]);\n                (0,_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__.e)(passedParams[key], obj[key]);\n            } else {\n                params[key] = obj[key];\n                passedParams[key] = obj[key];\n            }\n        } else if (key.search(/on[A-Z]/) === 0 && typeof obj[key] === \"function\") {\n            if (splitEvents) {\n                events[`${key[2].toLowerCase()}${key.substr(3)}`] = obj[key];\n            } else {\n                params.on[`${key[2].toLowerCase()}${key.substr(3)}`] = obj[key];\n            }\n        } else {\n            rest[key] = obj[key];\n        }\n    });\n    [\n        \"navigation\",\n        \"pagination\",\n        \"scrollbar\"\n    ].forEach((key)=>{\n        if (params[key] === true) params[key] = {};\n        if (params[key] === false) delete params[key];\n    });\n    return {\n        params,\n        passedParams,\n        rest,\n        events\n    };\n}\nfunction mountSwiper({ el, nextEl, prevEl, paginationEl, scrollbarEl, swiper }, swiperParams) {\n    if ((0,_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__.n)(swiperParams) && nextEl && prevEl) {\n        swiper.params.navigation.nextEl = nextEl;\n        swiper.originalParams.navigation.nextEl = nextEl;\n        swiper.params.navigation.prevEl = prevEl;\n        swiper.originalParams.navigation.prevEl = prevEl;\n    }\n    if ((0,_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(swiperParams) && paginationEl) {\n        swiper.params.pagination.el = paginationEl;\n        swiper.originalParams.pagination.el = paginationEl;\n    }\n    if ((0,_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(swiperParams) && scrollbarEl) {\n        swiper.params.scrollbar.el = scrollbarEl;\n        swiper.originalParams.scrollbar.el = scrollbarEl;\n    }\n    swiper.init(el);\n}\nfunction getChangedParams(swiperParams, oldParams, children, oldChildren, getKey) {\n    const keys = [];\n    if (!oldParams) return keys;\n    const addKey = (key)=>{\n        if (keys.indexOf(key) < 0) keys.push(key);\n    };\n    if (children && oldChildren) {\n        const oldChildrenKeys = oldChildren.map(getKey);\n        const childrenKeys = children.map(getKey);\n        if (oldChildrenKeys.join(\"\") !== childrenKeys.join(\"\")) addKey(\"children\");\n        if (oldChildren.length !== children.length) addKey(\"children\");\n    }\n    const watchParams = _update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__.p.filter((key)=>key[0] === \"_\").map((key)=>key.replace(/_/, \"\"));\n    watchParams.forEach((key)=>{\n        if (key in swiperParams && key in oldParams) {\n            if ((0,_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(swiperParams[key]) && (0,_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_0__.i)(oldParams[key])) {\n                const newKeys = Object.keys(swiperParams[key]);\n                const oldKeys = Object.keys(oldParams[key]);\n                if (newKeys.length !== oldKeys.length) {\n                    addKey(key);\n                } else {\n                    newKeys.forEach((newKey)=>{\n                        if (swiperParams[key][newKey] !== oldParams[key][newKey]) {\n                            addKey(key);\n                        }\n                    });\n                    oldKeys.forEach((oldKey)=>{\n                        if (swiperParams[key][oldKey] !== oldParams[key][oldKey]) addKey(key);\n                    });\n                }\n            } else if (swiperParams[key] !== oldParams[key]) {\n                addKey(key);\n            }\n        }\n    });\n    return keys;\n}\nconst updateOnVirtualData = (swiper)=>{\n    if (!swiper || swiper.destroyed || !swiper.params.virtual || swiper.params.virtual && !swiper.params.virtual.enabled) return;\n    swiper.updateSlides();\n    swiper.updateProgress();\n    swiper.updateSlidesClasses();\n    swiper.emit(\"_virtualUpdated\");\n    if (swiper.parallax && swiper.params.parallax && swiper.params.parallax.enabled) {\n        swiper.parallax.setTranslate();\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/shared/update-on-virtual-data.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/shared/update-swiper.mjs":
/*!******************************************************!*\
  !*** ./node_modules/swiper/shared/update-swiper.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ needsPagination),\n/* harmony export */   b: () => (/* binding */ needsScrollbar),\n/* harmony export */   c: () => (/* binding */ attrToProp),\n/* harmony export */   d: () => (/* binding */ uniqueClasses),\n/* harmony export */   e: () => (/* binding */ extend),\n/* harmony export */   i: () => (/* binding */ isObject),\n/* harmony export */   n: () => (/* binding */ needsNavigation),\n/* harmony export */   p: () => (/* binding */ paramsList),\n/* harmony export */   u: () => (/* binding */ updateSwiper),\n/* harmony export */   w: () => (/* binding */ wrapperClass)\n/* harmony export */ });\n/* harmony import */ var _utils_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.mjs */ \"(ssr)/./node_modules/swiper/shared/utils.mjs\");\n\n/* underscore in name -> watch for changes */ const paramsList = [\n    \"eventsPrefix\",\n    \"injectStyles\",\n    \"injectStylesUrls\",\n    \"modules\",\n    \"init\",\n    \"_direction\",\n    \"oneWayMovement\",\n    \"swiperElementNodeName\",\n    \"touchEventsTarget\",\n    \"initialSlide\",\n    \"_speed\",\n    \"cssMode\",\n    \"updateOnWindowResize\",\n    \"resizeObserver\",\n    \"nested\",\n    \"focusableElements\",\n    \"_enabled\",\n    \"_width\",\n    \"_height\",\n    \"preventInteractionOnTransition\",\n    \"userAgent\",\n    \"url\",\n    \"_edgeSwipeDetection\",\n    \"_edgeSwipeThreshold\",\n    \"_freeMode\",\n    \"_autoHeight\",\n    \"setWrapperSize\",\n    \"virtualTranslate\",\n    \"_effect\",\n    \"breakpoints\",\n    \"breakpointsBase\",\n    \"_spaceBetween\",\n    \"_slidesPerView\",\n    \"maxBackfaceHiddenSlides\",\n    \"_grid\",\n    \"_slidesPerGroup\",\n    \"_slidesPerGroupSkip\",\n    \"_slidesPerGroupAuto\",\n    \"_centeredSlides\",\n    \"_centeredSlidesBounds\",\n    \"_slidesOffsetBefore\",\n    \"_slidesOffsetAfter\",\n    \"normalizeSlideIndex\",\n    \"_centerInsufficientSlides\",\n    \"_watchOverflow\",\n    \"roundLengths\",\n    \"touchRatio\",\n    \"touchAngle\",\n    \"simulateTouch\",\n    \"_shortSwipes\",\n    \"_longSwipes\",\n    \"longSwipesRatio\",\n    \"longSwipesMs\",\n    \"_followFinger\",\n    \"allowTouchMove\",\n    \"_threshold\",\n    \"touchMoveStopPropagation\",\n    \"touchStartPreventDefault\",\n    \"touchStartForcePreventDefault\",\n    \"touchReleaseOnEdges\",\n    \"uniqueNavElements\",\n    \"_resistance\",\n    \"_resistanceRatio\",\n    \"_watchSlidesProgress\",\n    \"_grabCursor\",\n    \"preventClicks\",\n    \"preventClicksPropagation\",\n    \"_slideToClickedSlide\",\n    \"_loop\",\n    \"loopAdditionalSlides\",\n    \"loopAddBlankSlides\",\n    \"loopPreventsSliding\",\n    \"_rewind\",\n    \"_allowSlidePrev\",\n    \"_allowSlideNext\",\n    \"_swipeHandler\",\n    \"_noSwiping\",\n    \"noSwipingClass\",\n    \"noSwipingSelector\",\n    \"passiveListeners\",\n    \"containerModifierClass\",\n    \"slideClass\",\n    \"slideActiveClass\",\n    \"slideVisibleClass\",\n    \"slideFullyVisibleClass\",\n    \"slideNextClass\",\n    \"slidePrevClass\",\n    \"slideBlankClass\",\n    \"wrapperClass\",\n    \"lazyPreloaderClass\",\n    \"lazyPreloadPrevNext\",\n    \"runCallbacksOnInit\",\n    \"observer\",\n    \"observeParents\",\n    \"observeSlideChildren\",\n    // modules\n    \"a11y\",\n    \"_autoplay\",\n    \"_controller\",\n    \"coverflowEffect\",\n    \"cubeEffect\",\n    \"fadeEffect\",\n    \"flipEffect\",\n    \"creativeEffect\",\n    \"cardsEffect\",\n    \"hashNavigation\",\n    \"history\",\n    \"keyboard\",\n    \"mousewheel\",\n    \"_navigation\",\n    \"_pagination\",\n    \"parallax\",\n    \"_scrollbar\",\n    \"_thumbs\",\n    \"virtual\",\n    \"zoom\",\n    \"control\"\n];\nfunction isObject(o) {\n    return typeof o === \"object\" && o !== null && o.constructor && Object.prototype.toString.call(o).slice(8, -1) === \"Object\" && !o.__swiper__;\n}\nfunction extend(target, src) {\n    const noExtend = [\n        \"__proto__\",\n        \"constructor\",\n        \"prototype\"\n    ];\n    Object.keys(src).filter((key)=>noExtend.indexOf(key) < 0).forEach((key)=>{\n        if (typeof target[key] === \"undefined\") target[key] = src[key];\n        else if (isObject(src[key]) && isObject(target[key]) && Object.keys(src[key]).length > 0) {\n            if (src[key].__swiper__) target[key] = src[key];\n            else extend(target[key], src[key]);\n        } else {\n            target[key] = src[key];\n        }\n    });\n}\nfunction needsNavigation(params = {}) {\n    return params.navigation && typeof params.navigation.nextEl === \"undefined\" && typeof params.navigation.prevEl === \"undefined\";\n}\nfunction needsPagination(params = {}) {\n    return params.pagination && typeof params.pagination.el === \"undefined\";\n}\nfunction needsScrollbar(params = {}) {\n    return params.scrollbar && typeof params.scrollbar.el === \"undefined\";\n}\nfunction uniqueClasses(classNames = \"\") {\n    const classes = classNames.split(\" \").map((c)=>c.trim()).filter((c)=>!!c);\n    const unique = [];\n    classes.forEach((c)=>{\n        if (unique.indexOf(c) < 0) unique.push(c);\n    });\n    return unique.join(\" \");\n}\nfunction attrToProp(attrName = \"\") {\n    return attrName.replace(/-[a-z]/g, (l)=>l.toUpperCase().replace(\"-\", \"\"));\n}\nfunction wrapperClass(className = \"\") {\n    if (!className) return \"swiper-wrapper\";\n    if (!className.includes(\"swiper-wrapper\")) return `swiper-wrapper ${className}`;\n    return className;\n}\nfunction updateSwiper({ swiper, slides, passedParams, changedParams, nextEl, prevEl, scrollbarEl, paginationEl }) {\n    const updateParams = changedParams.filter((key)=>key !== \"children\" && key !== \"direction\" && key !== \"wrapperClass\");\n    const { params: currentParams, pagination, navigation, scrollbar, virtual, thumbs } = swiper;\n    let needThumbsInit;\n    let needControllerInit;\n    let needPaginationInit;\n    let needScrollbarInit;\n    let needNavigationInit;\n    let loopNeedDestroy;\n    let loopNeedEnable;\n    let loopNeedReloop;\n    if (changedParams.includes(\"thumbs\") && passedParams.thumbs && passedParams.thumbs.swiper && !passedParams.thumbs.swiper.destroyed && currentParams.thumbs && (!currentParams.thumbs.swiper || currentParams.thumbs.swiper.destroyed)) {\n        needThumbsInit = true;\n    }\n    if (changedParams.includes(\"controller\") && passedParams.controller && passedParams.controller.control && currentParams.controller && !currentParams.controller.control) {\n        needControllerInit = true;\n    }\n    if (changedParams.includes(\"pagination\") && passedParams.pagination && (passedParams.pagination.el || paginationEl) && (currentParams.pagination || currentParams.pagination === false) && pagination && !pagination.el) {\n        needPaginationInit = true;\n    }\n    if (changedParams.includes(\"scrollbar\") && passedParams.scrollbar && (passedParams.scrollbar.el || scrollbarEl) && (currentParams.scrollbar || currentParams.scrollbar === false) && scrollbar && !scrollbar.el) {\n        needScrollbarInit = true;\n    }\n    if (changedParams.includes(\"navigation\") && passedParams.navigation && (passedParams.navigation.prevEl || prevEl) && (passedParams.navigation.nextEl || nextEl) && (currentParams.navigation || currentParams.navigation === false) && navigation && !navigation.prevEl && !navigation.nextEl) {\n        needNavigationInit = true;\n    }\n    const destroyModule = (mod)=>{\n        if (!swiper[mod]) return;\n        swiper[mod].destroy();\n        if (mod === \"navigation\") {\n            if (swiper.isElement) {\n                swiper[mod].prevEl.remove();\n                swiper[mod].nextEl.remove();\n            }\n            currentParams[mod].prevEl = undefined;\n            currentParams[mod].nextEl = undefined;\n            swiper[mod].prevEl = undefined;\n            swiper[mod].nextEl = undefined;\n        } else {\n            if (swiper.isElement) {\n                swiper[mod].el.remove();\n            }\n            currentParams[mod].el = undefined;\n            swiper[mod].el = undefined;\n        }\n    };\n    if (changedParams.includes(\"loop\") && swiper.isElement) {\n        if (currentParams.loop && !passedParams.loop) {\n            loopNeedDestroy = true;\n        } else if (!currentParams.loop && passedParams.loop) {\n            loopNeedEnable = true;\n        } else {\n            loopNeedReloop = true;\n        }\n    }\n    updateParams.forEach((key)=>{\n        if (isObject(currentParams[key]) && isObject(passedParams[key])) {\n            Object.assign(currentParams[key], passedParams[key]);\n            if ((key === \"navigation\" || key === \"pagination\" || key === \"scrollbar\") && \"enabled\" in passedParams[key] && !passedParams[key].enabled) {\n                destroyModule(key);\n            }\n        } else {\n            const newValue = passedParams[key];\n            if ((newValue === true || newValue === false) && (key === \"navigation\" || key === \"pagination\" || key === \"scrollbar\")) {\n                if (newValue === false) {\n                    destroyModule(key);\n                }\n            } else {\n                currentParams[key] = passedParams[key];\n            }\n        }\n    });\n    if (updateParams.includes(\"controller\") && !needControllerInit && swiper.controller && swiper.controller.control && currentParams.controller && currentParams.controller.control) {\n        swiper.controller.control = currentParams.controller.control;\n    }\n    if (changedParams.includes(\"children\") && slides && virtual && currentParams.virtual.enabled) {\n        virtual.slides = slides;\n        virtual.update(true);\n    } else if (changedParams.includes(\"virtual\") && virtual && currentParams.virtual.enabled) {\n        if (slides) virtual.slides = slides;\n        virtual.update(true);\n    }\n    if (changedParams.includes(\"children\") && slides && currentParams.loop) {\n        loopNeedReloop = true;\n    }\n    if (needThumbsInit) {\n        const initialized = thumbs.init();\n        if (initialized) thumbs.update(true);\n    }\n    if (needControllerInit) {\n        swiper.controller.control = currentParams.controller.control;\n    }\n    if (needPaginationInit) {\n        if (swiper.isElement && (!paginationEl || typeof paginationEl === \"string\")) {\n            paginationEl = document.createElement(\"div\");\n            paginationEl.classList.add(\"swiper-pagination\");\n            paginationEl.part.add(\"pagination\");\n            swiper.el.appendChild(paginationEl);\n        }\n        if (paginationEl) currentParams.pagination.el = paginationEl;\n        pagination.init();\n        pagination.render();\n        pagination.update();\n    }\n    if (needScrollbarInit) {\n        if (swiper.isElement && (!scrollbarEl || typeof scrollbarEl === \"string\")) {\n            scrollbarEl = document.createElement(\"div\");\n            scrollbarEl.classList.add(\"swiper-scrollbar\");\n            scrollbarEl.part.add(\"scrollbar\");\n            swiper.el.appendChild(scrollbarEl);\n        }\n        if (scrollbarEl) currentParams.scrollbar.el = scrollbarEl;\n        scrollbar.init();\n        scrollbar.updateSize();\n        scrollbar.setTranslate();\n    }\n    if (needNavigationInit) {\n        if (swiper.isElement) {\n            if (!nextEl || typeof nextEl === \"string\") {\n                nextEl = document.createElement(\"div\");\n                nextEl.classList.add(\"swiper-button-next\");\n                (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.s)(nextEl, swiper.navigation.arrowSvg);\n                nextEl.part.add(\"button-next\");\n                swiper.el.appendChild(nextEl);\n            }\n            if (!prevEl || typeof prevEl === \"string\") {\n                prevEl = document.createElement(\"div\");\n                prevEl.classList.add(\"swiper-button-prev\");\n                (0,_utils_mjs__WEBPACK_IMPORTED_MODULE_0__.s)(prevEl, swiper.navigation.arrowSvg);\n                prevEl.part.add(\"button-prev\");\n                swiper.el.appendChild(prevEl);\n            }\n        }\n        if (nextEl) currentParams.navigation.nextEl = nextEl;\n        if (prevEl) currentParams.navigation.prevEl = prevEl;\n        navigation.init();\n        navigation.update();\n    }\n    if (changedParams.includes(\"allowSlideNext\")) {\n        swiper.allowSlideNext = passedParams.allowSlideNext;\n    }\n    if (changedParams.includes(\"allowSlidePrev\")) {\n        swiper.allowSlidePrev = passedParams.allowSlidePrev;\n    }\n    if (changedParams.includes(\"direction\")) {\n        swiper.changeDirection(passedParams.direction, false);\n    }\n    if (loopNeedDestroy || loopNeedReloop) {\n        swiper.loopDestroy();\n    }\n    if (loopNeedEnable || loopNeedReloop) {\n        swiper.loopCreate();\n    }\n    swiper.update();\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/shared/update-swiper.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/shared/utils.mjs":
/*!**********************************************!*\
  !*** ./node_modules/swiper/shared/utils.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ getRotateFix),\n/* harmony export */   b: () => (/* binding */ setCSSProperty),\n/* harmony export */   c: () => (/* binding */ createElement),\n/* harmony export */   d: () => (/* binding */ elementParents),\n/* harmony export */   e: () => (/* binding */ elementChildren),\n/* harmony export */   f: () => (/* binding */ elementOffset),\n/* harmony export */   g: () => (/* binding */ getSlideTransformEl),\n/* harmony export */   h: () => (/* binding */ now),\n/* harmony export */   i: () => (/* binding */ elementOuterSize),\n/* harmony export */   j: () => (/* binding */ elementIndex),\n/* harmony export */   k: () => (/* binding */ classesToTokens),\n/* harmony export */   l: () => (/* binding */ getTranslate),\n/* harmony export */   m: () => (/* binding */ makeElementsArray),\n/* harmony export */   n: () => (/* binding */ nextTick),\n/* harmony export */   o: () => (/* binding */ elementTransitionEnd),\n/* harmony export */   p: () => (/* binding */ isObject),\n/* harmony export */   q: () => (/* binding */ elementStyle),\n/* harmony export */   r: () => (/* binding */ elementNextAll),\n/* harmony export */   s: () => (/* binding */ setInnerHTML),\n/* harmony export */   t: () => (/* binding */ elementPrevAll),\n/* harmony export */   u: () => (/* binding */ animateCSSModeScroll),\n/* harmony export */   v: () => (/* binding */ showWarning),\n/* harmony export */   w: () => (/* binding */ elementIsChildOf),\n/* harmony export */   x: () => (/* binding */ extend),\n/* harmony export */   y: () => (/* binding */ deleteProps)\n/* harmony export */ });\n/* harmony import */ var _ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ssr-window.esm.mjs */ \"(ssr)/./node_modules/swiper/shared/ssr-window.esm.mjs\");\n\nfunction classesToTokens(classes = \"\") {\n    return classes.trim().split(\" \").filter((c)=>!!c.trim());\n}\nfunction deleteProps(obj) {\n    const object = obj;\n    Object.keys(object).forEach((key)=>{\n        try {\n            object[key] = null;\n        } catch (e) {\n        // no getter for object\n        }\n        try {\n            delete object[key];\n        } catch (e) {\n        // something got wrong\n        }\n    });\n}\nfunction nextTick(callback, delay = 0) {\n    return setTimeout(callback, delay);\n}\nfunction now() {\n    return Date.now();\n}\nfunction getComputedStyle(el) {\n    const window1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    let style;\n    if (window1.getComputedStyle) {\n        style = window1.getComputedStyle(el, null);\n    }\n    if (!style && el.currentStyle) {\n        style = el.currentStyle;\n    }\n    if (!style) {\n        style = el.style;\n    }\n    return style;\n}\nfunction getTranslate(el, axis = \"x\") {\n    const window1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    let matrix;\n    let curTransform;\n    let transformMatrix;\n    const curStyle = getComputedStyle(el);\n    if (window1.WebKitCSSMatrix) {\n        curTransform = curStyle.transform || curStyle.webkitTransform;\n        if (curTransform.split(\",\").length > 6) {\n            curTransform = curTransform.split(\", \").map((a)=>a.replace(\",\", \".\")).join(\", \");\n        }\n        // Some old versions of Webkit choke when 'none' is passed; pass\n        // empty string instead in this case\n        transformMatrix = new window1.WebKitCSSMatrix(curTransform === \"none\" ? \"\" : curTransform);\n    } else {\n        transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform || curStyle.transform || curStyle.getPropertyValue(\"transform\").replace(\"translate(\", \"matrix(1, 0, 0, 1,\");\n        matrix = transformMatrix.toString().split(\",\");\n    }\n    if (axis === \"x\") {\n        // Latest Chrome and webkits Fix\n        if (window1.WebKitCSSMatrix) curTransform = transformMatrix.m41;\n        else if (matrix.length === 16) curTransform = parseFloat(matrix[12]);\n        else curTransform = parseFloat(matrix[4]);\n    }\n    if (axis === \"y\") {\n        // Latest Chrome and webkits Fix\n        if (window1.WebKitCSSMatrix) curTransform = transformMatrix.m42;\n        else if (matrix.length === 16) curTransform = parseFloat(matrix[13]);\n        else curTransform = parseFloat(matrix[5]);\n    }\n    return curTransform || 0;\n}\nfunction isObject(o) {\n    return typeof o === \"object\" && o !== null && o.constructor && Object.prototype.toString.call(o).slice(8, -1) === \"Object\";\n}\nfunction isNode(node) {\n    // eslint-disable-next-line\n    if (false) {}\n    return node && (node.nodeType === 1 || node.nodeType === 11);\n}\nfunction extend(...args) {\n    const to = Object(args[0]);\n    const noExtend = [\n        \"__proto__\",\n        \"constructor\",\n        \"prototype\"\n    ];\n    for(let i = 1; i < args.length; i += 1){\n        const nextSource = args[i];\n        if (nextSource !== undefined && nextSource !== null && !isNode(nextSource)) {\n            const keysArray = Object.keys(Object(nextSource)).filter((key)=>noExtend.indexOf(key) < 0);\n            for(let nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1){\n                const nextKey = keysArray[nextIndex];\n                const desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n                if (desc !== undefined && desc.enumerable) {\n                    if (isObject(to[nextKey]) && isObject(nextSource[nextKey])) {\n                        if (nextSource[nextKey].__swiper__) {\n                            to[nextKey] = nextSource[nextKey];\n                        } else {\n                            extend(to[nextKey], nextSource[nextKey]);\n                        }\n                    } else if (!isObject(to[nextKey]) && isObject(nextSource[nextKey])) {\n                        to[nextKey] = {};\n                        if (nextSource[nextKey].__swiper__) {\n                            to[nextKey] = nextSource[nextKey];\n                        } else {\n                            extend(to[nextKey], nextSource[nextKey]);\n                        }\n                    } else {\n                        to[nextKey] = nextSource[nextKey];\n                    }\n                }\n            }\n        }\n    }\n    return to;\n}\nfunction setCSSProperty(el, varName, varValue) {\n    el.style.setProperty(varName, varValue);\n}\nfunction animateCSSModeScroll({ swiper, targetPosition, side }) {\n    const window1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    const startPosition = -swiper.translate;\n    let startTime = null;\n    let time;\n    const duration = swiper.params.speed;\n    swiper.wrapperEl.style.scrollSnapType = \"none\";\n    window1.cancelAnimationFrame(swiper.cssModeFrameID);\n    const dir = targetPosition > startPosition ? \"next\" : \"prev\";\n    const isOutOfBound = (current, target)=>{\n        return dir === \"next\" && current >= target || dir === \"prev\" && current <= target;\n    };\n    const animate = ()=>{\n        time = new Date().getTime();\n        if (startTime === null) {\n            startTime = time;\n        }\n        const progress = Math.max(Math.min((time - startTime) / duration, 1), 0);\n        const easeProgress = 0.5 - Math.cos(progress * Math.PI) / 2;\n        let currentPosition = startPosition + easeProgress * (targetPosition - startPosition);\n        if (isOutOfBound(currentPosition, targetPosition)) {\n            currentPosition = targetPosition;\n        }\n        swiper.wrapperEl.scrollTo({\n            [side]: currentPosition\n        });\n        if (isOutOfBound(currentPosition, targetPosition)) {\n            swiper.wrapperEl.style.overflow = \"hidden\";\n            swiper.wrapperEl.style.scrollSnapType = \"\";\n            setTimeout(()=>{\n                swiper.wrapperEl.style.overflow = \"\";\n                swiper.wrapperEl.scrollTo({\n                    [side]: currentPosition\n                });\n            });\n            window1.cancelAnimationFrame(swiper.cssModeFrameID);\n            return;\n        }\n        swiper.cssModeFrameID = window1.requestAnimationFrame(animate);\n    };\n    animate();\n}\nfunction getSlideTransformEl(slideEl) {\n    return slideEl.querySelector(\".swiper-slide-transform\") || slideEl.shadowRoot && slideEl.shadowRoot.querySelector(\".swiper-slide-transform\") || slideEl;\n}\nfunction elementChildren(element, selector = \"\") {\n    const window1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    const children = [\n        ...element.children\n    ];\n    if (window1.HTMLSlotElement && element instanceof HTMLSlotElement) {\n        children.push(...element.assignedElements());\n    }\n    if (!selector) {\n        return children;\n    }\n    return children.filter((el)=>el.matches(selector));\n}\nfunction elementIsChildOfSlot(el, slot) {\n    // Breadth-first search through all parent's children and assigned elements\n    const elementsQueue = [\n        slot\n    ];\n    while(elementsQueue.length > 0){\n        const elementToCheck = elementsQueue.shift();\n        if (el === elementToCheck) {\n            return true;\n        }\n        elementsQueue.push(...elementToCheck.children, ...elementToCheck.shadowRoot ? elementToCheck.shadowRoot.children : [], ...elementToCheck.assignedElements ? elementToCheck.assignedElements() : []);\n    }\n}\nfunction elementIsChildOf(el, parent) {\n    const window1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    let isChild = parent.contains(el);\n    if (!isChild && window1.HTMLSlotElement && parent instanceof HTMLSlotElement) {\n        const children = [\n            ...parent.assignedElements()\n        ];\n        isChild = children.includes(el);\n        if (!isChild) {\n            isChild = elementIsChildOfSlot(el, parent);\n        }\n    }\n    return isChild;\n}\nfunction showWarning(text) {\n    try {\n        console.warn(text);\n        return;\n    } catch (err) {\n    // err\n    }\n}\nfunction createElement(tag, classes = []) {\n    const el = document.createElement(tag);\n    el.classList.add(...Array.isArray(classes) ? classes : classesToTokens(classes));\n    return el;\n}\nfunction elementOffset(el) {\n    const window1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    const document1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.g)();\n    const box = el.getBoundingClientRect();\n    const body = document1.body;\n    const clientTop = el.clientTop || body.clientTop || 0;\n    const clientLeft = el.clientLeft || body.clientLeft || 0;\n    const scrollTop = el === window1 ? window1.scrollY : el.scrollTop;\n    const scrollLeft = el === window1 ? window1.scrollX : el.scrollLeft;\n    return {\n        top: box.top + scrollTop - clientTop,\n        left: box.left + scrollLeft - clientLeft\n    };\n}\nfunction elementPrevAll(el, selector) {\n    const prevEls = [];\n    while(el.previousElementSibling){\n        const prev = el.previousElementSibling; // eslint-disable-line\n        if (selector) {\n            if (prev.matches(selector)) prevEls.push(prev);\n        } else prevEls.push(prev);\n        el = prev;\n    }\n    return prevEls;\n}\nfunction elementNextAll(el, selector) {\n    const nextEls = [];\n    while(el.nextElementSibling){\n        const next = el.nextElementSibling; // eslint-disable-line\n        if (selector) {\n            if (next.matches(selector)) nextEls.push(next);\n        } else nextEls.push(next);\n        el = next;\n    }\n    return nextEls;\n}\nfunction elementStyle(el, prop) {\n    const window1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    return window1.getComputedStyle(el, null).getPropertyValue(prop);\n}\nfunction elementIndex(el) {\n    let child = el;\n    let i;\n    if (child) {\n        i = 0;\n        // eslint-disable-next-line\n        while((child = child.previousSibling) !== null){\n            if (child.nodeType === 1) i += 1;\n        }\n        return i;\n    }\n    return undefined;\n}\nfunction elementParents(el, selector) {\n    const parents = []; // eslint-disable-line\n    let parent = el.parentElement; // eslint-disable-line\n    while(parent){\n        if (selector) {\n            if (parent.matches(selector)) parents.push(parent);\n        } else {\n            parents.push(parent);\n        }\n        parent = parent.parentElement;\n    }\n    return parents;\n}\nfunction elementTransitionEnd(el, callback) {\n    function fireCallBack(e) {\n        if (e.target !== el) return;\n        callback.call(el, e);\n        el.removeEventListener(\"transitionend\", fireCallBack);\n    }\n    if (callback) {\n        el.addEventListener(\"transitionend\", fireCallBack);\n    }\n}\nfunction elementOuterSize(el, size, includeMargins) {\n    const window1 = (0,_ssr_window_esm_mjs__WEBPACK_IMPORTED_MODULE_0__.a)();\n    if (includeMargins) {\n        return el[size === \"width\" ? \"offsetWidth\" : \"offsetHeight\"] + parseFloat(window1.getComputedStyle(el, null).getPropertyValue(size === \"width\" ? \"margin-right\" : \"margin-top\")) + parseFloat(window1.getComputedStyle(el, null).getPropertyValue(size === \"width\" ? \"margin-left\" : \"margin-bottom\"));\n    }\n    return el.offsetWidth;\n}\nfunction makeElementsArray(el) {\n    return (Array.isArray(el) ? el : [\n        el\n    ]).filter((e)=>!!e);\n}\nfunction getRotateFix(swiper) {\n    return (v)=>{\n        if (Math.abs(v) > 0 && swiper.browser && swiper.browser.need3dFix && Math.abs(v) % 90 === 0) {\n            return v + 0.001;\n        }\n        return v;\n    };\n}\nfunction setInnerHTML(el, html = \"\") {\n    if (typeof trustedTypes !== \"undefined\") {\n        el.innerHTML = trustedTypes.createPolicy(\"html\", {\n            createHTML: (s)=>s\n        }).createHTML(html);\n    } else {\n        el.innerHTML = html;\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/shared/utils.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/swiper/swiper-react.mjs":
/*!**********************************************!*\
  !*** ./node_modules/swiper/swiper-react.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Swiper: () => (/* binding */ Swiper),\n/* harmony export */   SwiperSlide: () => (/* binding */ SwiperSlide),\n/* harmony export */   useSwiper: () => (/* binding */ useSwiper),\n/* harmony export */   useSwiperSlide: () => (/* binding */ useSwiperSlide)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _shared_swiper_core_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shared/swiper-core.mjs */ \"(ssr)/./node_modules/swiper/shared/swiper-core.mjs\");\n/* harmony import */ var _shared_update_on_virtual_data_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shared/update-on-virtual-data.mjs */ \"(ssr)/./node_modules/swiper/shared/update-on-virtual-data.mjs\");\n/* harmony import */ var _shared_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./shared/update-swiper.mjs */ \"(ssr)/./node_modules/swiper/shared/update-swiper.mjs\");\n/**\n * Swiper React 12.0.3\n * Most modern mobile touch slider and framework with hardware accelerated transitions\n * https://swiperjs.com\n *\n * Copyright 2014-2025 Vladimir Kharlampidi\n *\n * Released under the MIT License\n *\n * Released on: October 21, 2025\n */ \n\n\n\nfunction _extends() {\n    _extends = Object.assign ? Object.assign.bind() : function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction isChildSwiperSlide(child) {\n    return child.type && child.type.displayName && child.type.displayName.includes(\"SwiperSlide\");\n}\nfunction processChildren(c) {\n    const slides = [];\n    react__WEBPACK_IMPORTED_MODULE_0__.Children.toArray(c).forEach((child)=>{\n        if (isChildSwiperSlide(child)) {\n            slides.push(child);\n        } else if (child.props && child.props.children) {\n            processChildren(child.props.children).forEach((slide)=>slides.push(slide));\n        }\n    });\n    return slides;\n}\nfunction getChildren(c) {\n    const slides = [];\n    const slots = {\n        \"container-start\": [],\n        \"container-end\": [],\n        \"wrapper-start\": [],\n        \"wrapper-end\": []\n    };\n    react__WEBPACK_IMPORTED_MODULE_0__.Children.toArray(c).forEach((child)=>{\n        if (isChildSwiperSlide(child)) {\n            slides.push(child);\n        } else if (child.props && child.props.slot && slots[child.props.slot]) {\n            slots[child.props.slot].push(child);\n        } else if (child.props && child.props.children) {\n            const foundSlides = processChildren(child.props.children);\n            if (foundSlides.length > 0) {\n                foundSlides.forEach((slide)=>slides.push(slide));\n            } else {\n                slots[\"container-end\"].push(child);\n            }\n        } else {\n            slots[\"container-end\"].push(child);\n        }\n    });\n    return {\n        slides,\n        slots\n    };\n}\nfunction renderVirtual(swiper, slides, virtualData) {\n    if (!virtualData) return null;\n    const getSlideIndex = (index)=>{\n        let slideIndex = index;\n        if (index < 0) {\n            slideIndex = slides.length + index;\n        } else if (slideIndex >= slides.length) {\n            // eslint-disable-next-line\n            slideIndex = slideIndex - slides.length;\n        }\n        return slideIndex;\n    };\n    const style = swiper.isHorizontal() ? {\n        [swiper.rtlTranslate ? \"right\" : \"left\"]: `${virtualData.offset}px`\n    } : {\n        top: `${virtualData.offset}px`\n    };\n    const { from, to } = virtualData;\n    const loopFrom = swiper.params.loop ? -slides.length : 0;\n    const loopTo = swiper.params.loop ? slides.length * 2 : slides.length;\n    const slidesToRender = [];\n    for(let i = loopFrom; i < loopTo; i += 1){\n        if (i >= from && i <= to) {\n            slidesToRender.push(slides[getSlideIndex(i)]);\n        }\n    }\n    return slidesToRender.map((child, index)=>{\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(child, {\n            swiper,\n            style,\n            key: child.props.virtualIndex || child.key || `slide-${index}`\n        });\n    });\n}\nfunction useIsomorphicLayoutEffect(callback, deps) {\n    // eslint-disable-next-line\n    if (true) return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(callback, deps);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(callback, deps);\n}\nconst SwiperSlideContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nconst useSwiperSlide = ()=>{\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SwiperSlideContext);\n};\nconst SwiperContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nconst useSwiper = ()=>{\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SwiperContext);\n};\nconst Swiper = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ className, tag: Tag = \"div\", wrapperTag: WrapperTag = \"div\", children, onSwiper, ...rest } = {}, externalElRef)=>{\n    let eventsAssigned = false;\n    const [containerClasses, setContainerClasses] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"swiper\");\n    const [virtualData, setVirtualData] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [breakpointChanged, setBreakpointChanged] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const initializedRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const swiperElRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const swiperRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const oldPassedParamsRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const oldSlides = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const nextElRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const prevElRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const paginationElRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const scrollbarElRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const { params: swiperParams, passedParams, rest: restProps, events } = (0,_shared_update_on_virtual_data_mjs__WEBPACK_IMPORTED_MODULE_2__.g)(rest);\n    const { slides, slots } = getChildren(children);\n    const onBeforeBreakpoint = ()=>{\n        setBreakpointChanged(!breakpointChanged);\n    };\n    Object.assign(swiperParams.on, {\n        _containerClasses (swiper, classes) {\n            setContainerClasses(classes);\n        }\n    });\n    const initSwiper = ()=>{\n        // init swiper\n        Object.assign(swiperParams.on, events);\n        eventsAssigned = true;\n        const passParams = {\n            ...swiperParams\n        };\n        delete passParams.wrapperClass;\n        swiperRef.current = new _shared_swiper_core_mjs__WEBPACK_IMPORTED_MODULE_1__.S(passParams);\n        if (swiperRef.current.virtual && swiperRef.current.params.virtual.enabled) {\n            swiperRef.current.virtual.slides = slides;\n            const extendWith = {\n                cache: false,\n                slides,\n                renderExternal: setVirtualData,\n                renderExternalUpdate: false\n            };\n            (0,_shared_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_3__.e)(swiperRef.current.params.virtual, extendWith);\n            (0,_shared_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_3__.e)(swiperRef.current.originalParams.virtual, extendWith);\n        }\n    };\n    if (!swiperElRef.current) {\n        initSwiper();\n    }\n    // Listen for breakpoints change\n    if (swiperRef.current) {\n        swiperRef.current.on(\"_beforeBreakpoint\", onBeforeBreakpoint);\n    }\n    const attachEvents = ()=>{\n        if (eventsAssigned || !events || !swiperRef.current) return;\n        Object.keys(events).forEach((eventName)=>{\n            swiperRef.current.on(eventName, events[eventName]);\n        });\n    };\n    const detachEvents = ()=>{\n        if (!events || !swiperRef.current) return;\n        Object.keys(events).forEach((eventName)=>{\n            swiperRef.current.off(eventName, events[eventName]);\n        });\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        return ()=>{\n            if (swiperRef.current) swiperRef.current.off(\"_beforeBreakpoint\", onBeforeBreakpoint);\n        };\n    });\n    // set initialized flag\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!initializedRef.current && swiperRef.current) {\n            swiperRef.current.emitSlidesClasses();\n            initializedRef.current = true;\n        }\n    });\n    // mount swiper\n    useIsomorphicLayoutEffect(()=>{\n        if (externalElRef) {\n            externalElRef.current = swiperElRef.current;\n        }\n        if (!swiperElRef.current) return;\n        if (swiperRef.current.destroyed) {\n            initSwiper();\n        }\n        (0,_shared_update_on_virtual_data_mjs__WEBPACK_IMPORTED_MODULE_2__.m)({\n            el: swiperElRef.current,\n            nextEl: nextElRef.current,\n            prevEl: prevElRef.current,\n            paginationEl: paginationElRef.current,\n            scrollbarEl: scrollbarElRef.current,\n            swiper: swiperRef.current\n        }, swiperParams);\n        if (onSwiper && !swiperRef.current.destroyed) onSwiper(swiperRef.current);\n        // eslint-disable-next-line\n        return ()=>{\n            if (swiperRef.current && !swiperRef.current.destroyed) {\n                swiperRef.current.destroy(true, false);\n            }\n        };\n    }, []);\n    // watch for params change\n    useIsomorphicLayoutEffect(()=>{\n        attachEvents();\n        const changedParams = (0,_shared_update_on_virtual_data_mjs__WEBPACK_IMPORTED_MODULE_2__.a)(passedParams, oldPassedParamsRef.current, slides, oldSlides.current, (c)=>c.key);\n        oldPassedParamsRef.current = passedParams;\n        oldSlides.current = slides;\n        if (changedParams.length && swiperRef.current && !swiperRef.current.destroyed) {\n            (0,_shared_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_3__.u)({\n                swiper: swiperRef.current,\n                slides,\n                passedParams,\n                changedParams,\n                nextEl: nextElRef.current,\n                prevEl: prevElRef.current,\n                scrollbarEl: scrollbarElRef.current,\n                paginationEl: paginationElRef.current\n            });\n        }\n        return ()=>{\n            detachEvents();\n        };\n    });\n    // update on virtual update\n    useIsomorphicLayoutEffect(()=>{\n        (0,_shared_update_on_virtual_data_mjs__WEBPACK_IMPORTED_MODULE_2__.u)(swiperRef.current);\n    }, [\n        virtualData\n    ]);\n    // bypass swiper instance to slides\n    function renderSlides() {\n        if (swiperParams.virtual) {\n            return renderVirtual(swiperRef.current, slides, virtualData);\n        }\n        return slides.map((child, index)=>{\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(child, {\n                swiper: swiperRef.current,\n                swiperSlideIndex: index\n            });\n        });\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Tag, _extends({\n        ref: swiperElRef,\n        className: (0,_shared_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_3__.d)(`${containerClasses}${className ? ` ${className}` : \"\"}`)\n    }, restProps), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SwiperContext.Provider, {\n        value: swiperRef.current\n    }, slots[\"container-start\"], /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(WrapperTag, {\n        className: (0,_shared_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_3__.w)(swiperParams.wrapperClass)\n    }, slots[\"wrapper-start\"], renderSlides(), slots[\"wrapper-end\"]), (0,_shared_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_3__.n)(swiperParams) && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: prevElRef,\n        className: \"swiper-button-prev\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: nextElRef,\n        className: \"swiper-button-next\"\n    })), (0,_shared_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_3__.b)(swiperParams) && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: scrollbarElRef,\n        className: \"swiper-scrollbar\"\n    }), (0,_shared_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(swiperParams) && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: paginationElRef,\n        className: \"swiper-pagination\"\n    }), slots[\"container-end\"]));\n});\nSwiper.displayName = \"Swiper\";\nconst SwiperSlide = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ tag: Tag = \"div\", children, className = \"\", swiper, zoom, lazy, virtualIndex, swiperSlideIndex, ...rest } = {}, externalRef)=>{\n    const slideElRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const [slideClasses, setSlideClasses] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"swiper-slide\");\n    const [lazyLoaded, setLazyLoaded] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    function updateClasses(_s, el, classNames) {\n        if (el === slideElRef.current) {\n            setSlideClasses(classNames);\n        }\n    }\n    useIsomorphicLayoutEffect(()=>{\n        if (typeof swiperSlideIndex !== \"undefined\") {\n            slideElRef.current.swiperSlideIndex = swiperSlideIndex;\n        }\n        if (externalRef) {\n            externalRef.current = slideElRef.current;\n        }\n        if (!slideElRef.current || !swiper) {\n            return;\n        }\n        if (swiper.destroyed) {\n            if (slideClasses !== \"swiper-slide\") {\n                setSlideClasses(\"swiper-slide\");\n            }\n            return;\n        }\n        swiper.on(\"_slideClass\", updateClasses);\n        // eslint-disable-next-line\n        return ()=>{\n            if (!swiper) return;\n            swiper.off(\"_slideClass\", updateClasses);\n        };\n    });\n    useIsomorphicLayoutEffect(()=>{\n        if (swiper && slideElRef.current && !swiper.destroyed) {\n            setSlideClasses(swiper.getSlideClasses(slideElRef.current));\n        }\n    }, [\n        swiper\n    ]);\n    const slideData = {\n        isActive: slideClasses.indexOf(\"swiper-slide-active\") >= 0,\n        isVisible: slideClasses.indexOf(\"swiper-slide-visible\") >= 0,\n        isPrev: slideClasses.indexOf(\"swiper-slide-prev\") >= 0,\n        isNext: slideClasses.indexOf(\"swiper-slide-next\") >= 0\n    };\n    const renderChildren = ()=>{\n        return typeof children === \"function\" ? children(slideData) : children;\n    };\n    const onLoad = ()=>{\n        setLazyLoaded(true);\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Tag, _extends({\n        ref: slideElRef,\n        className: (0,_shared_update_swiper_mjs__WEBPACK_IMPORTED_MODULE_3__.d)(`${slideClasses}${className ? ` ${className}` : \"\"}`),\n        \"data-swiper-slide-index\": virtualIndex,\n        onLoad: onLoad\n    }, rest), zoom && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SwiperSlideContext.Provider, {\n        value: slideData\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"swiper-zoom-container\",\n        \"data-swiper-zoom\": typeof zoom === \"number\" ? zoom : undefined\n    }, renderChildren(), lazy && !lazyLoaded && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"swiper-lazy-preloader\"\n    }))), !zoom && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SwiperSlideContext.Provider, {\n        value: slideData\n    }, renderChildren(), lazy && !lazyLoaded && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"swiper-lazy-preloader\"\n    })));\n});\nSwiperSlide.displayName = \"SwiperSlide\";\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/swiper/swiper-react.mjs\n");

/***/ })

};
;