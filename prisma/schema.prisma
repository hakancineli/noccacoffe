// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

// User model for authentication and profile
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  passwordHash String  @map("password_hash")
  firstName   String?  @map("first_name")
  lastName    String?  @map("last_name")
  phone       String?
  birthDate   DateTime? @map("birth_date") @db.Date
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  userPoints  UserPoints?
  pointTransactions PointTransaction[]
  userRewards UserReward[]
  
  @@map("users")
}

// User points and tier information
model UserPoints {
  id        String   @id @default(cuid())
  userId    String   @unique @map("user_id")
  points    Int      @default(0)
  tier      Tier     @default(BRONZE)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_points")
}

// Point transactions history
model PointTransaction {
  id            String            @id @default(cuid())
  userId        String            @map("user_id")
  points        Int
  transactionType TransactionType @map("transaction_type")
  description   String?
  referenceId   String?           @map("reference_id")
  createdAt     DateTime          @default(now()) @map("created_at")
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("point_transactions")
}

// Available rewards
model Reward {
  id          String     @id @default(cuid())
  name        String
  description String?
  type        RewardType
  pointsCost  Int        @map("points_cost")
  imageUrl    String?    @map("image_url")
  isActive    Boolean    @default(true) @map("is_active")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  
  // Relations
  userRewards UserReward[]
  
  @@map("rewards")
}

// User reward redemptions
model UserReward {
  id         String      @id @default(cuid())
  userId     String      @map("user_id")
  rewardId   String      @map("reward_id")
  status     RewardStatus @default(AVAILABLE)
  redeemedAt DateTime?   @map("redeemed_at")
  expiresAt  DateTime?   @map("expires_at")
  createdAt  DateTime    @default(now()) @map("created_at")
  
  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  reward Reward @relation(fields: [rewardId], references: [id], onDelete: Cascade)
  
  @@map("user_rewards")
}

// Campaigns and promotions
model Campaign {
  id             String       @id @default(cuid())
  name           String
  description    String?
  type           CampaignType
  targetAudience TargetAudience @map("target_audience")
  startDate      DateTime     @map("start_date") @db.Date
  endDate        DateTime     @map("end_date") @db.Date
  isActive       Boolean      @default(true) @map("is_active")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  
  @@map("campaigns")
}

// Enums
enum Tier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
}

enum TransactionType {
  EARNED
  REDEEMED
  BONUS
}

enum RewardType {
  PRODUCT
  DISCOUNT
  COUPON
  EXPERIENCE
}

enum RewardStatus {
  AVAILABLE
  REDEEMED
  EXPIRED
}

enum CampaignType {
  POINT_MULTIPLIER
  BONUS_POINTS
  FREE_PRODUCT
  DISCOUNT
}

enum TargetAudience {
  ALL
  TIER_BASED
  NEW_CUSTOMERS
}
