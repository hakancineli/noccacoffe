// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

// User model for authentication and profile
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  passwordHash String  @map("password_hash")
  firstName   String?  @map("first_name")
  lastName    String?  @map("last_name")
  phone       String?
  birthDate   DateTime? @map("birth_date") @db.Date
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  userPoints  UserPoints?
  pointTransactions PointTransaction[]
  userRewards UserReward[]
  orders     Order[]
  
  @@map("users")
}

// User points and tier information
model UserPoints {
  id        String   @id @default(cuid())
  userId    String   @unique @map("user_id")
  points    Int      @default(0)
  tier      Tier     @default(BRONZE)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_points")
}

// Point transactions history
model PointTransaction {
  id            String            @id @default(cuid())
  userId        String            @map("user_id")
  points        Int
  transactionType TransactionType @map("transaction_type")
  description   String?
  referenceId   String?           @map("reference_id")
  createdAt     DateTime          @default(now()) @map("created_at")
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("point_transactions")
}

// Available rewards
model Reward {
  id          String     @id @default(cuid())
  name        String
  description String?
  type        RewardType
  pointsCost  Int        @map("points_cost")
  imageUrl    String?    @map("image_url")
  isActive    Boolean    @default(true) @map("is_active")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  
  // Relations
  userRewards UserReward[]
  
  @@map("rewards")
}

// User reward redemptions
model UserReward {
  id         String      @id @default(cuid())
  userId     String      @map("user_id")
  rewardId   String      @map("reward_id")
  status     RewardStatus @default(AVAILABLE)
  redeemedAt DateTime?   @map("redeemed_at")
  expiresAt  DateTime?   @map("expires_at")
  createdAt  DateTime    @default(now()) @map("created_at")
  
  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  reward Reward @relation(fields: [rewardId], references: [id], onDelete: Cascade)
  
  @@map("user_rewards")
}

// Campaigns and promotions
model Campaign {
  id             String       @id @default(cuid())
  name           String
  description    String?
  type           CampaignType
  targetAudience TargetAudience @map("target_audience")
  startDate      DateTime     @map("start_date") @db.Date
  endDate        DateTime     @map("end_date") @db.Date
  isActive       Boolean      @default(true) @map("is_active")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  
  @@map("campaigns")
}

// Enums
enum Tier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
}

enum TransactionType {
  EARNED
  REDEEMED
  BONUS
}

enum RewardType {
  PRODUCT
  DISCOUNT
  COUPON
  EXPERIENCE
}

enum RewardStatus {
  AVAILABLE
  REDEEMED
  EXPIRED
}

enum CampaignType {
  POINT_MULTIPLIER
  BONUS_POINTS
  FREE_PRODUCT
  DISCOUNT
}

enum TargetAudience {
  ALL
  TIER_BASED
  NEW_CUSTOMERS
}

// Order management models
model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique @map("order_number")
  userId      String?     @map("user_id")
  customerName String?    @map("customer_name")
  customerPhone String?   @map("customer_phone")
  customerEmail String?   @map("customer_email")
  status      OrderStatus @default(PENDING)
  totalAmount Float       @map("total_amount")
  discountAmount Float?   @default(0) @map("discount_amount")
  finalAmount Float       @map("final_amount")
  paymentMethod PaymentMethod? @map("payment_method")
  paymentStatus PaymentStatus @default(PENDING) @map("payment_status")
  notes       String?
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  
  // Relations
  user        User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  orderItems  OrderItem[]
  payment     Payment?
  
  @@map("orders")
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String   @map("order_id")
  productId   String   @map("product_id")
  productName String   @map("product_name")
  quantity    Int
  unitPrice   Float    @map("unit_price")
  totalPrice  Float    @map("total_price")
  notes       String?
  createdAt   DateTime @default(now()) @map("created_at")
  
  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("order_items")
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String?
  category    String
  price       Float
  imageUrl    String?     @map("image_url")
  isActive    Boolean     @default(true) @map("is_active")
  stock       Int         @default(0)
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  
  // Relations
  orderItems  OrderItem[]
  
  @@map("products")
}

model Payment {
  id            String        @id @default(cuid())
  orderId       String        @unique @map("order_id")
  amount        Float
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  transactionId String?       @map("transaction_id")
  bankResponse  Json?         @map("bank_response")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  
  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  @@map("payments")
}

model Barista {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  passwordHash String  @map("password_hash")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  @@map("baristas")
}

// Enums for order management
enum OrderStatus {
  PENDING
  PREPARING
  READY
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  MOBILE_PAYMENT
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}
